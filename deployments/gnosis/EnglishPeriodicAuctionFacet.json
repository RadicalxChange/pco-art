{
  "address": "0xA07DA5b6358B14629F27e6C7893a03CB1551C269",
  "abi": [
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintUtils__InsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winningBidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "AuctionClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionLengthSeconds",
          "type": "uint256"
        }
      ],
      "name": "AuctionLengthSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidExtensionSeconds",
          "type": "uint256"
        }
      ],
      "name": "BidExtensionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidExtensionWindowLengthSeconds",
          "type": "uint256"
        }
      ],
      "name": "BidExtensionWindowLengthSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPeriodStartTime",
          "type": "uint256"
        }
      ],
      "name": "InitialPeriodStartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBidIncrement",
          "type": "uint256"
        }
      ],
      "name": "MinBidIncrementSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "repossessor",
          "type": "address"
        }
      ],
      "name": "RepossessorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startingBid",
          "type": "uint256"
        }
      ],
      "name": "StartingBidSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "auctionEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionLengthSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "auctionStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "availableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bidExtensionSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bidExtensionWindowLengthSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "bidOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEnglishPeriodicAuctionInternal.Bid",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "bidOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEnglishPeriodicAuctionInternal.Bid",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateFeeFromBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "cancelBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "cancelBidAndWithdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "closeAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "currentAuctionRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "highestBid",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEnglishPeriodicAuctionInternal.Bid",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "highestBid",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEnglishPeriodicAuctionInternal.Bid",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialBidder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialPeriodStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_repossessor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialBidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialPeriodStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialPeriodStartTimeOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startingBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionLengthSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBidIncrement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidExtensionWindowLengthSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidExtensionSeconds",
          "type": "uint256"
        }
      ],
      "name": "initializeAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_repossessor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialBidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialPeriodStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialPeriodStartTimeOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startingBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionLengthSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBidIncrement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidExtensionWindowLengthSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidExtensionSeconds",
          "type": "uint256"
        }
      ],
      "name": "initializeAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isAuctionPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isReadyForTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBidIncrement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repossessor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionLengthSeconds",
          "type": "uint256"
        }
      ],
      "name": "setAuctionLengthSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_repossessor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_auctionLengthSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBidIncrement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidExtensionWindowLengthSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidExtensionSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startingBid",
          "type": "uint256"
        }
      ],
      "name": "setAuctionParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidExtensionSeconds",
          "type": "uint256"
        }
      ],
      "name": "setBidExtensionSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidExtensionWindowLengthSeconds",
          "type": "uint256"
        }
      ],
      "name": "setBidExtensionWindowLengthSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBidIncrement",
          "type": "uint256"
        }
      ],
      "name": "setMinBidIncrement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_repossessor",
          "type": "address"
        }
      ],
      "name": "setRepossessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startingBid",
          "type": "uint256"
        }
      ],
      "name": "setStartingBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startingBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa0d6c9fefe3bb341bad8a4cdb91914843f9ecb640bb688062bcfcab2b92f0496",
  "receipt": {
    "to": null,
    "from": "0xfF5Be16460704eFd0263dB1444Eaa216b77477c5",
    "contractAddress": "0xA07DA5b6358B14629F27e6C7893a03CB1551C269",
    "transactionIndex": 4,
    "gasUsed": "2321960",
    "logsBloom": "0x
    "blockHash": "0x1bb83dd7e1bb196118c71bac9849b2d369ea7d9ffd311b7cd2606c8db027462b",
    "transactionHash": "0xa0d6c9fefe3bb341bad8a4cdb91914843f9ecb640bb688062bcfcab2b92f0496",
    "logs": [],
    "blockNumber": 29381955,
    "cumulativeGasUsed": "2852890",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 14,
  "solcInputHash": "d0a27ede5665b36e991b1d6afa627006",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winningBidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"AuctionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionLengthSeconds\",\"type\":\"uint256\"}],\"name\":\"AuctionLengthSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidExtensionSeconds\",\"type\":\"uint256\"}],\"name\":\"BidExtensionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidExtensionWindowLengthSeconds\",\"type\":\"uint256\"}],\"name\":\"BidExtensionWindowLengthSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPeriodStartTime\",\"type\":\"uint256\"}],\"name\":\"InitialPeriodStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidIncrement\",\"type\":\"uint256\"}],\"name\":\"MinBidIncrementSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"repossessor\",\"type\":\"address\"}],\"name\":\"RepossessorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingBid\",\"type\":\"uint256\"}],\"name\":\"StartingBidSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"auctionEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionLengthSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"auctionStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"availableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidExtensionSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidExtensionWindowLengthSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"bidOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IEnglishPeriodicAuctionInternal.Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"bidOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IEnglishPeriodicAuctionInternal.Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"calculateFeeFromBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"cancelBidAndWithdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"closeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"currentAuctionRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"highestBid\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IEnglishPeriodicAuctionInternal.Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"highestBid\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IEnglishPeriodicAuctionInternal.Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialBidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialPeriodStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_repossessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialPeriodStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialPeriodStartTimeOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionLengthSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidExtensionWindowLengthSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidExtensionSeconds\",\"type\":\"uint256\"}],\"name\":\"initializeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_repossessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialPeriodStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialPeriodStartTimeOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionLengthSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidExtensionWindowLengthSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidExtensionSeconds\",\"type\":\"uint256\"}],\"name\":\"initializeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isAuctionPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isReadyForTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repossessor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionLengthSeconds\",\"type\":\"uint256\"}],\"name\":\"setAuctionLengthSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_repossessor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_auctionLengthSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidExtensionWindowLengthSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidExtensionSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingBid\",\"type\":\"uint256\"}],\"name\":\"setAuctionParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidExtensionSeconds\",\"type\":\"uint256\"}],\"name\":\"setBidExtensionSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidExtensionWindowLengthSeconds\",\"type\":\"uint256\"}],\"name\":\"setBidExtensionWindowLengthSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBidIncrement\",\"type\":\"uint256\"}],\"name\":\"setMinBidIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_repossessor\",\"type\":\"address\"}],\"name\":\"setRepossessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingBid\",\"type\":\"uint256\"}],\"name\":\"setStartingBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"EnglishPeriodicAuctionFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"auctionEndTime(uint256)\":{\"notice\":\"Get auction end time\"},\"auctionLengthSeconds()\":{\"notice\":\"Get auction length\"},\"auctionStartTime(uint256)\":{\"notice\":\"Get auction start time\"},\"availableCollateral(address)\":{\"notice\":\"Get available collateral\"},\"bidExtensionSeconds()\":{\"notice\":\"Get bid extension seconds\"},\"bidExtensionWindowLengthSeconds()\":{\"notice\":\"Get bid extension window length\"},\"bidOf(uint256,address)\":{\"notice\":\"Get bid for address\"},\"bidOf(uint256,uint256,address)\":{\"notice\":\"Get bid for address for particular round\"},\"calculateFeeFromBid(uint256)\":{\"notice\":\"Calculate fee from bid\"},\"cancelBid(uint256,uint256)\":{\"notice\":\"Cancel bid for current round\"},\"cancelBidAndWithdrawCollateral(uint256,uint256)\":{\"notice\":\"Cancel bid for current round and withdraw collateral\"},\"closeAuction(uint256)\":{\"notice\":\"Close auction and trigger a transfer to the highest bidder\"},\"currentAuctionRound(uint256)\":{\"notice\":\"Get current auction round\"},\"highestBid(uint256)\":{\"notice\":\"Get highest outstanding bid\"},\"highestBid(uint256,uint256)\":{\"notice\":\"Get highest outstanding bid for a particular round\"},\"initialBidder()\":{\"notice\":\"Get initial bidder\"},\"initialPeriodStartTime()\":{\"notice\":\"Get initial period start time\"},\"initializeAuction(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize auction parameters with owner\"},\"initializeAuction(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize auction parameters\"},\"isAuctionPeriod(uint256)\":{\"notice\":\"Get is auction period\"},\"isReadyForTransfer(uint256)\":{\"notice\":\"Is token ready for transfer\"},\"minBidIncrement()\":{\"notice\":\"Get minimum bid increment\"},\"placeBid(uint256,uint256)\":{\"notice\":\"Place a bid\"},\"repossessor()\":{\"notice\":\"Get repossessor\"},\"setAuctionLengthSeconds(uint256)\":{\"notice\":\"Set auction length\"},\"setAuctionParameters(address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Set auction parameters\"},\"setBidExtensionSeconds(uint256)\":{\"notice\":\"Set bid extension seconds\"},\"setBidExtensionWindowLengthSeconds(uint256)\":{\"notice\":\"Set bid extension window length\"},\"setMinBidIncrement(uint256)\":{\"notice\":\"Set minimum bid increment\"},\"setRepossessor(address)\":{\"notice\":\"Set repossessor\"},\"setStartingBid(uint256)\":{\"notice\":\"Set starting bid\"},\"startingBid()\":{\"notice\":\"Get starting bid\"},\"withdrawCollateral()\":{\"notice\":\"Withdraw collateral\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/auction/facets/EnglishPeriodicAuctionFacet.sol\":\"EnglishPeriodicAuctionFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC721Internal } from './IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721 is IERC721Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given address\\n     * @return balance quantity of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice query the owner of given token\\n     * @param tokenId token to query\\n     * @return owner token owner\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice grant approval to given account to spend token\\n     * @param operator address to be approved\\n     * @param tokenId token to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external payable;\\n\\n    /**\\n     * @notice get approval status for given token\\n     * @param tokenId token to query\\n     * @return operator address approved to spend token\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given account to spend all tokens held by sender\\n     * @param operator address to be approved\\n     * @param status approval status\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return status whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool status);\\n}\\n\",\"keccak256\":\"0xa14655a5bdee327bc019b583b04480e8542fa6b0788e5569077ec54805d1463a\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC721 interface needed by internal functions\\n */\\ninterface IERC721Internal {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed operator,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x8d46d596fa0e48cdcbf8bb8d6a42120351c4d1b002156bf647f95523178cbe08\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xba7b4d73d42dfc9f8083ce36aed0fa2c56c73878d8bda7d64f2fb908d5e04636\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Internal } from '../../../interfaces/IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721BaseInternal is IERC721Internal {\\n    error ERC721Base__NotOwnerOrApproved();\\n    error ERC721Base__SelfApproval();\\n    error ERC721Base__BalanceQueryZeroAddress();\\n    error ERC721Base__ERC721ReceiverNotImplemented();\\n    error ERC721Base__InvalidOwner();\\n    error ERC721Base__MintToZeroAddress();\\n    error ERC721Base__NonExistentToken();\\n    error ERC721Base__NotTokenOwner();\\n    error ERC721Base__TokenAlreadyMinted();\\n    error ERC721Base__TransferToZeroAddress();\\n}\\n\",\"keccak256\":\"0x3118e4b75bc32c0c5b1f7aca49d30bf618966260179d848171b2ce3e3e0b5373\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata interface\\n */\\ninterface IERC721Metadata is IERC721MetadataInternal {\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x281dd4dbf81c3acf12bf43bc6e0f77ae68cb2764450cce8121a53c061bf87960\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721BaseInternal } from '../base/IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal interface\\n */\\ninterface IERC721MetadataInternal is IERC721BaseInternal {\\n    error ERC721Metadata__NonExistentToken();\\n}\\n\",\"keccak256\":\"0xd420b4227db773f26b0e40cb6ea4819d340d0ee5ea59d6321c27e79ae7ecca86\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/allowlist/IAllowlistReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IAllowlistReadable\\n */\\ninterface IAllowlistReadable {\\n    /**\\n     * @notice Check if address is allowed\\n     */\\n    function isAllowed(address _address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6e8241b3bfa7a83ab1111191d049cd41cc672df0d4dea0581696efdc20aefd82\",\"license\":\"MIT\"},\"contracts/auction/EnglishPeriodicAuctionInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { EnglishPeriodicAuctionStorage } from './EnglishPeriodicAuctionStorage.sol';\\nimport { IPeriodicPCOParamsReadable } from '../pco/IPeriodicPCOParamsReadable.sol';\\nimport { IStewardLicense } from '../license/IStewardLicense.sol';\\nimport { IBeneficiary } from '../beneficiary/IBeneficiary.sol';\\nimport { IEnglishPeriodicAuctionInternal } from './IEnglishPeriodicAuctionInternal.sol';\\n\\n/**\\n * @title EnglishPeriodicAuctionInternal\\n */\\nabstract contract EnglishPeriodicAuctionInternal is\\n    IEnglishPeriodicAuctionInternal\\n{\\n    /**\\n     * @notice Initialize parameters\\n     */\\n    function _initializeAuction(\\n        address repossessor,\\n        address initialBidder,\\n        uint256 initialPeriodStartTime,\\n        uint256 initialPeriodStartTimeOffset,\\n        uint256 startingBid,\\n        uint256 auctionLengthSeconds,\\n        uint256 minBidIncrement,\\n        uint256 bidExtensionWindowLengthSeconds,\\n        uint256 bidExtensionSeconds\\n    ) internal {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        l.isInitialized = true;\\n        l.initialBidder = initialBidder;\\n        l.initialPeriodStartTimeOffset = initialPeriodStartTimeOffset;\\n        l.initialPeriodStartTime = initialPeriodStartTime;\\n        _setStartingBid(startingBid);\\n        _setRepossessor(repossessor);\\n        _setAuctionLengthSeconds(auctionLengthSeconds);\\n        _setMinBidIncrement(minBidIncrement);\\n        _setBidExtensionWindowLengthSeconds(bidExtensionWindowLengthSeconds);\\n        _setBidExtensionSeconds(bidExtensionSeconds);\\n    }\\n\\n    /**\\n     * @notice Set auction parameters\\n     */\\n    function _setAuctionParameters(\\n        address repossessor,\\n        uint256 auctionLengthSeconds,\\n        uint256 minBidIncrement,\\n        uint256 bidExtensionWindowLengthSeconds,\\n        uint256 bidExtensionSeconds,\\n        uint256 startingBid\\n    ) internal {\\n        _setRepossessor(repossessor);\\n        _setAuctionLengthSeconds(auctionLengthSeconds);\\n        _setMinBidIncrement(minBidIncrement);\\n        _setBidExtensionWindowLengthSeconds(bidExtensionWindowLengthSeconds);\\n        _setBidExtensionSeconds(bidExtensionSeconds);\\n        _setStartingBid(startingBid);\\n    }\\n\\n    /**\\n     * @notice Check if initialized\\n     */\\n    function _isInitialized() internal view returns (bool) {\\n        return EnglishPeriodicAuctionStorage.layout().isInitialized;\\n    }\\n\\n    /**\\n     * @notice Get starting bid\\n     */\\n    function _startingBid() internal view returns (uint256) {\\n        return EnglishPeriodicAuctionStorage.layout().startingBid;\\n    }\\n\\n    /**\\n     * @notice Get repossessor\\n     */\\n    function _repossessor() internal view returns (address) {\\n        return EnglishPeriodicAuctionStorage.layout().repossessor;\\n    }\\n\\n    /**\\n     * @notice Set repossessor\\n     */\\n    function _setRepossessor(address repossessor) internal {\\n        EnglishPeriodicAuctionStorage.layout().repossessor = repossessor;\\n\\n        emit RepossessorSet(repossessor);\\n    }\\n\\n    /**\\n     * @notice Get initial period start time\\n     */\\n    function _initialPeriodStartTime() internal view returns (uint256) {\\n        return EnglishPeriodicAuctionStorage.layout().initialPeriodStartTime;\\n    }\\n\\n    /**\\n     * @notice Get auction length\\n     */\\n    function _auctionLengthSeconds() internal view returns (uint256) {\\n        return EnglishPeriodicAuctionStorage.layout().auctionLengthSeconds;\\n    }\\n\\n    /**\\n     * @notice Set starting bid\\n     */\\n    function _setStartingBid(uint256 startingBid) internal {\\n        EnglishPeriodicAuctionStorage.layout().startingBid = startingBid;\\n\\n        emit StartingBidSet(startingBid);\\n    }\\n\\n    /**\\n     * @notice Set auction length\\n     */\\n    function _setAuctionLengthSeconds(uint256 auctionLengthSeconds) internal {\\n        EnglishPeriodicAuctionStorage\\n            .layout()\\n            .auctionLengthSeconds = auctionLengthSeconds;\\n\\n        emit AuctionLengthSet(auctionLengthSeconds);\\n    }\\n\\n    /**\\n     * @notice Get minimum bid increment\\n     */\\n    function _minBidIncrement() internal view returns (uint256) {\\n        return EnglishPeriodicAuctionStorage.layout().minBidIncrement;\\n    }\\n\\n    /**\\n     * @notice Set minimum bid increment\\n     */\\n    function _setMinBidIncrement(uint256 minBidIncrement) internal {\\n        EnglishPeriodicAuctionStorage\\n            .layout()\\n            .minBidIncrement = minBidIncrement;\\n\\n        emit MinBidIncrementSet(minBidIncrement);\\n    }\\n\\n    /**\\n     * @notice Get bid extension window length\\n     */\\n    function _bidExtensionWindowLengthSeconds()\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            EnglishPeriodicAuctionStorage\\n                .layout()\\n                .bidExtensionWindowLengthSeconds;\\n    }\\n\\n    /**\\n     * @notice Set bid extension window length\\n     */\\n    function _setBidExtensionWindowLengthSeconds(\\n        uint256 bidExtensionWindowLengthSeconds\\n    ) internal {\\n        EnglishPeriodicAuctionStorage\\n            .layout()\\n            .bidExtensionWindowLengthSeconds = bidExtensionWindowLengthSeconds;\\n\\n        emit BidExtensionWindowLengthSet(bidExtensionWindowLengthSeconds);\\n    }\\n\\n    /**\\n     * @notice Get bid extension\\n     */\\n    function _bidExtensionSeconds() internal view returns (uint256) {\\n        return EnglishPeriodicAuctionStorage.layout().bidExtensionSeconds;\\n    }\\n\\n    /**\\n     * @notice Set bid extension\\n     */\\n    function _setBidExtensionSeconds(uint256 bidExtensionSeconds) internal {\\n        EnglishPeriodicAuctionStorage\\n            .layout()\\n            .bidExtensionSeconds = bidExtensionSeconds;\\n\\n        emit BidExtensionSet(bidExtensionSeconds);\\n    }\\n\\n    /**\\n     * @notice Get initial bidder\\n     */\\n    function _initialBidder() internal view returns (address) {\\n        return EnglishPeriodicAuctionStorage.layout().initialBidder;\\n    }\\n\\n    /**\\n     * @notice Get highest outstanding bid\\n     */\\n    function _highestBid(\\n        uint256 tokenId,\\n        uint256 round\\n    ) internal view returns (Bid storage) {\\n        return\\n            EnglishPeriodicAuctionStorage.layout().highestBids[tokenId][round];\\n    }\\n\\n    /**\\n     * @notice Get bid for address\\n     */\\n    function _bidOf(\\n        uint256 tokenId,\\n        uint256 round,\\n        address bidder\\n    ) internal view returns (Bid storage) {\\n        return\\n            EnglishPeriodicAuctionStorage.layout().bids[tokenId][round][bidder];\\n    }\\n\\n    /**\\n     * @notice Get is auction period\\n     */\\n    function _isAuctionPeriod(uint256 tokenId) internal view returns (bool) {\\n        if (tokenId >= IStewardLicense(address(this)).maxTokenCount()) {\\n            return false;\\n        }\\n        return block.timestamp >= _auctionStartTime(tokenId);\\n    }\\n\\n    /**\\n     * @notice Is token ready for transfer\\n     */\\n    function _isReadyForTransfer(uint256 tokenId) internal view returns (bool) {\\n        if (tokenId >= IStewardLicense(address(this)).maxTokenCount()) {\\n            return false;\\n        }\\n        return block.timestamp >= _auctionEndTime(tokenId);\\n    }\\n\\n    /**\\n     * @notice Get current auction round\\n     */\\n    function _currentAuctionRound(\\n        uint256 tokenId\\n    ) internal view returns (uint256) {\\n        return\\n            EnglishPeriodicAuctionStorage.layout().currentAuctionRound[tokenId];\\n    }\\n\\n    /**\\n     * @notice Get available collateral\\n     */\\n    function _availableCollateral(\\n        address bidder\\n    ) internal view returns (uint256) {\\n        return\\n            EnglishPeriodicAuctionStorage.layout().availableCollateral[bidder];\\n    }\\n\\n    /**\\n     * @notice Place a bid\\n     */\\n    function _placeBid(\\n        uint256 tokenId,\\n        address bidder,\\n        uint256 bidAmount,\\n        uint256 collateralAmount\\n    ) internal {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        uint256 currentAuctionRound = l.currentAuctionRound[tokenId];\\n\\n        Bid storage bid = l.bids[tokenId][currentAuctionRound][bidder];\\n\\n        // Check if higher than starting bid\\n        require(\\n            bidAmount >= l.startingBid,\\n            'EnglishPeriodicAuction: Bid amount must be greater than or equal to starting bid'\\n        );\\n\\n        // Check if highest bid\\n        require(\\n            bidAmount >=\\n                l.highestBids[tokenId][currentAuctionRound].bidAmount +\\n                    l.minBidIncrement,\\n            'EnglishPeriodicAuction: Bid amount must be greater than highest outstanding bid'\\n        );\\n\\n        uint256 totalCollateralAmount = bid.collateralAmount + collateralAmount;\\n\\n        uint256 feeAmount;\\n        address currentBidder;\\n        if (IStewardLicense(address(this)).exists(tokenId)) {\\n            currentBidder = IStewardLicense(address(this)).ownerOf(tokenId);\\n        } else {\\n            currentBidder = l.initialBidder;\\n        }\\n\\n        if (bidder == currentBidder) {\\n            // If current bidder, collateral is entire fee amount\\n            feeAmount = totalCollateralAmount;\\n        } else {\\n            require(\\n                totalCollateralAmount > bidAmount,\\n                'EnglishPeriodicAuction: Collateral must be greater than current bid'\\n            );\\n            // If new bidder, collateral is bidAmount + fee\\n            feeAmount = totalCollateralAmount - bidAmount;\\n        }\\n\\n        require(\\n            _checkBidAmount(bidAmount, feeAmount),\\n            'EnglishPeriodicAuction: Incorrect bid amount'\\n        );\\n\\n        // Save bid\\n        bid.bidder = bidder;\\n        bid.bidAmount = bidAmount;\\n        bid.feeAmount = feeAmount;\\n        bid.collateralAmount = totalCollateralAmount;\\n\\n        l.highestBids[tokenId][currentAuctionRound] = bid;\\n\\n        emit BidPlaced(tokenId, currentAuctionRound, bid.bidder, bid.bidAmount);\\n\\n        // Check if auction should extend\\n        uint256 auctionEndTime = _auctionEndTime(tokenId);\\n\\n        if (\\n            auctionEndTime >= block.timestamp &&\\n            auctionEndTime - block.timestamp <\\n            _bidExtensionWindowLengthSeconds()\\n        ) {\\n            uint256 auctionLengthSeconds;\\n            if (l.currentAuctionLength[tokenId] == 0) {\\n                auctionLengthSeconds = _auctionLengthSeconds();\\n            } else {\\n                auctionLengthSeconds = l.currentAuctionLength[tokenId];\\n            }\\n            // Extend auction\\n            l.currentAuctionLength[tokenId] =\\n                auctionLengthSeconds +\\n                _bidExtensionSeconds();\\n        }\\n    }\\n\\n    /**\\n     * @notice Cancel bid for current round if not highest bidder\\n     */\\n    function _cancelBid(\\n        uint256 tokenId,\\n        uint256 round,\\n        address bidder\\n    ) internal {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        address currentBidder;\\n        if (IStewardLicense(address(this)).exists(tokenId)) {\\n            currentBidder = IStewardLicense(address(this)).ownerOf(tokenId);\\n        } else {\\n            currentBidder = l.initialBidder;\\n        }\\n\\n        require(\\n            bidder != l.highestBids[tokenId][round].bidder,\\n            'EnglishPeriodicAuction: Cannot cancel bid if highest bidder'\\n        );\\n\\n        Bid storage bid = l.bids[tokenId][round][bidder];\\n\\n        require(\\n            bid.collateralAmount > 0,\\n            'EnglishPeriodicAuction: No bid to cancel'\\n        );\\n\\n        // Make collateral available to withdraw\\n        l.availableCollateral[bidder] += bid.collateralAmount;\\n\\n        // Reset collateral and bid\\n        bid.collateralAmount = 0;\\n        bid.bidAmount = 0;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral\\n     */\\n    function _withdrawCollateral(address bidder) internal {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        uint256 collateralAmount = l.availableCollateral[bidder];\\n\\n        require(\\n            collateralAmount > 0,\\n            'EnglishPeriodicAuction: No collateral to withdraw'\\n        );\\n\\n        // Make collateral unavailable to withdraw\\n        l.availableCollateral[bidder] = 0;\\n\\n        // Transfer collateral back to bidder\\n        (bool success, ) = bidder.call{ value: collateralAmount }('');\\n        require(\\n            success,\\n            'EnglishPeriodicAuction: Failed to withdraw collateral'\\n        );\\n    }\\n\\n    /**\\n     * @notice Close auction and trigger a transfer to the highest bidder\\n     */\\n    function _closeAuction(uint256 tokenId) internal {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        uint256 currentAuctionRound = l.currentAuctionRound[tokenId];\\n\\n        address oldBidder;\\n        if (IStewardLicense(address(this)).exists(tokenId)) {\\n            oldBidder = IStewardLicense(address(this)).ownerOf(tokenId);\\n        } else {\\n            oldBidder = l.initialBidder;\\n        }\\n\\n        // Set lastPeriodEndTime to the end of the current auction period\\n        l.lastPeriodEndTime[tokenId] = block.timestamp;\\n\\n        if (l.highestBids[tokenId][currentAuctionRound].bidder == address(0)) {\\n            // No bids were placed, transfer to repossessor\\n            Bid storage repossessorBid = l.bids[tokenId][currentAuctionRound][\\n                l.repossessor\\n            ];\\n            repossessorBid.bidAmount = 0;\\n            repossessorBid.feeAmount = 0;\\n            repossessorBid.collateralAmount = 0;\\n            repossessorBid.bidder = l.repossessor;\\n\\n            l.highestBids[tokenId][currentAuctionRound] = repossessorBid;\\n        } else if (\\n            l.highestBids[tokenId][currentAuctionRound].bidder != oldBidder\\n        ) {\\n            // Transfer bid to previous bidder's collateral\\n            l.availableCollateral[oldBidder] += l\\n            .highestBids[tokenId][currentAuctionRound].bidAmount;\\n        }\\n\\n        emit AuctionClosed(\\n            tokenId,\\n            currentAuctionRound,\\n            l.highestBids[tokenId][currentAuctionRound].bidder,\\n            oldBidder,\\n            l.highestBids[tokenId][currentAuctionRound].bidAmount\\n        );\\n\\n        // Reset auction\\n        l.currentAuctionLength[tokenId] = l.auctionLengthSeconds;\\n        l.currentAuctionRound[tokenId] = l.currentAuctionRound[tokenId] + 1;\\n\\n        // Transfer to highest bidder\\n        IStewardLicense(address(this)).triggerTransfer(\\n            oldBidder,\\n            l.highestBids[tokenId][currentAuctionRound].bidder,\\n            tokenId\\n        );\\n\\n        // Distribute fee to beneficiary\\n        if (l.highestBids[tokenId][currentAuctionRound].feeAmount > 0) {\\n            IBeneficiary(address(this)).distribute{\\n                value: l.highestBids[tokenId][currentAuctionRound].feeAmount\\n            }();\\n        }\\n    }\\n\\n    /**\\n     * @notice Get auction start time\\n     */\\n    function _auctionStartTime(\\n        uint256 tokenId\\n    ) internal view returns (uint256 auctionStartTime) {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        uint256 licensePeriod = IPeriodicPCOParamsReadable(address(this))\\n            .licensePeriod();\\n\\n        if (l.lastPeriodEndTime[tokenId] > l.initialPeriodStartTime) {\\n            // Auction starts after licensePeriod has elapsed\\n            auctionStartTime = l.lastPeriodEndTime[tokenId] + licensePeriod;\\n        } else {\\n            // Auction starts at initial time\\n            auctionStartTime =\\n                l.initialPeriodStartTime +\\n                (tokenId * l.initialPeriodStartTimeOffset);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get auction end time\\n     */\\n    function _auctionEndTime(\\n        uint256 tokenId\\n    ) internal view returns (uint256 auctionEndTime) {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        uint256 auctionLengthSeconds;\\n        if (l.currentAuctionLength[tokenId] == 0) {\\n            auctionLengthSeconds = _auctionLengthSeconds();\\n        } else {\\n            auctionLengthSeconds = l.currentAuctionLength[tokenId];\\n        }\\n\\n        auctionEndTime = _auctionStartTime(tokenId) + auctionLengthSeconds;\\n    }\\n\\n    /**\\n     * @notice Calculate fee from bid\\n     */\\n    function _calculateFeeFromBid(\\n        uint256 bidAmount\\n    ) internal view returns (uint256) {\\n        uint256 feeNumerator = IPeriodicPCOParamsReadable(address(this))\\n            .feeNumerator();\\n        uint256 feeDenominator = IPeriodicPCOParamsReadable(address(this))\\n            .feeDenominator();\\n\\n        return (bidAmount * feeNumerator) / feeDenominator;\\n    }\\n\\n    /**\\n     * @notice Check that fee is within rounding error of bid amount\\n     */\\n    function _checkBidAmount(\\n        uint256 bidAmount,\\n        uint256 feeAmount\\n    ) internal view returns (bool) {\\n        uint256 calculatedFeeAmount = _calculateFeeFromBid(bidAmount);\\n\\n        return calculatedFeeAmount == feeAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x0163f9148483e6432e7e8cbe7d951f755a48ff6f9056081f99372009463ffdf6\",\"license\":\"MIT\"},\"contracts/auction/EnglishPeriodicAuctionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IEnglishPeriodicAuctionInternal } from './IEnglishPeriodicAuctionInternal.sol';\\n\\nlibrary EnglishPeriodicAuctionStorage {\\n    struct Layout {\\n        bool isInitialized;\\n        // Same for all tokens\\n        address initialBidder;\\n        uint256 startingBid;\\n        address repossessor;\\n        uint256 initialPeriodStartTime;\\n        uint256 initialPeriodStartTimeOffset;\\n        uint256 auctionLengthSeconds;\\n        uint256 minBidIncrement;\\n        uint256 bidExtensionWindowLengthSeconds;\\n        uint256 bidExtensionSeconds;\\n        // Per token config\\n        mapping(uint256 => uint256) lastPeriodEndTime;\\n        mapping(uint256 => uint256) currentAuctionRound;\\n        mapping(uint256 => uint256) currentAuctionLength;\\n        mapping(uint256 => mapping(uint256 => mapping(address => IEnglishPeriodicAuctionInternal.Bid))) bids;\\n        mapping(uint256 => mapping(uint256 => IEnglishPeriodicAuctionInternal.Bid)) highestBids;\\n        mapping(address => uint256) availableCollateral;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256('pcoart.contracts.storage.EnglishPeriodicAuctionStorage');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf4881787d6578237c20100f2300b8ba1cd1216ff3720c7b31ebd64517e72035b\",\"license\":\"MIT\"},\"contracts/auction/IEnglishPeriodicAuctionInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IEnglishPeriodicAuctionInternal\\n */\\ninterface IEnglishPeriodicAuctionInternal {\\n    struct Bid {\\n        address bidder;\\n        uint256 bidAmount;\\n        uint256 feeAmount;\\n        uint256 collateralAmount;\\n    }\\n\\n    event InitialPeriodStartTimeSet(uint256 initialPeriodStartTime);\\n    event RepossessorSet(address repossessor);\\n    event AuctionLengthSet(uint256 auctionLengthSeconds);\\n    event MinBidIncrementSet(uint256 minBidIncrement);\\n    event BidExtensionWindowLengthSet(uint256 bidExtensionWindowLengthSeconds);\\n    event BidExtensionSet(uint256 bidExtensionSeconds);\\n    event StartingBidSet(uint256 startingBid);\\n\\n    event BidPlaced(\\n        uint256 indexed tokenId,\\n        uint256 indexed round,\\n        address indexed bidder,\\n        uint256 bidAmount\\n    );\\n    event AuctionClosed(\\n        uint256 indexed tokenId,\\n        uint256 indexed round,\\n        address indexed winningBidder,\\n        address previousOwner,\\n        uint256 bidAmount\\n    );\\n}\\n\",\"keccak256\":\"0x4ce3e8c3935b8ec0669abe6df6fcd1502dfc403974886c3237a6e3a33f5a7015\",\"license\":\"MIT\"},\"contracts/auction/IPeriodicAuctionReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IPeriodicAuctionReadable\\n */\\ninterface IPeriodicAuctionReadable {\\n    /**\\n     * @notice Get is auction period\\n     */\\n    function isAuctionPeriod(uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Get initial period start time\\n     */\\n    function initialPeriodStartTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Get initial bidder\\n     */\\n    function initialBidder() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbee90dfb18090c21241a02d52168d7926e95f4948af6547d0ab42a6ae429d295\",\"license\":\"MIT\"},\"contracts/auction/IPeriodicAuctionWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IPeriodicAuctionWritable\\n */\\ninterface IPeriodicAuctionWritable {\\n    /**\\n     * @notice Set repossessor\\n     */\\n    function setRepossessor(address _repossessor) external;\\n\\n    /**\\n     * @notice Set auction length\\n     */\\n    function setAuctionLengthSeconds(uint256 _auctionLengthSeconds) external;\\n\\n    /**\\n     * @notice Set minimum bid increment\\n     */\\n    function setMinBidIncrement(uint256 _minBidIncrement) external;\\n\\n    /**\\n     * @notice Set bid extension window length\\n     */\\n    function setBidExtensionWindowLengthSeconds(\\n        uint256 _bidExtensionWindowLengthSeconds\\n    ) external;\\n\\n    /**\\n     *  @notice Set bid extension seconds\\n     */\\n    function setBidExtensionSeconds(uint256 _bidExtensionSeconds) external;\\n}\\n\",\"keccak256\":\"0x9a93d7cb55bab5c399603883e66e1228efe2e68ca6b967d64dd446a431ff182e\",\"license\":\"MIT\"},\"contracts/auction/facets/EnglishPeriodicAuctionFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { EnglishPeriodicAuctionInternal } from '../EnglishPeriodicAuctionInternal.sol';\\nimport { IPeriodicAuctionReadable } from '../IPeriodicAuctionReadable.sol';\\nimport { IPeriodicAuctionWritable } from '../IPeriodicAuctionWritable.sol';\\nimport { IAllowlistReadable } from '../../allowlist/IAllowlistReadable.sol';\\nimport { ERC165BaseInternal } from '@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol';\\nimport { AccessControlInternal } from '@solidstate/contracts/access/access_control/AccessControlInternal.sol';\\n\\n/**\\n * @title EnglishPeriodicAuctionFacet\\n */\\ncontract EnglishPeriodicAuctionFacet is\\n    IPeriodicAuctionReadable,\\n    IPeriodicAuctionWritable,\\n    EnglishPeriodicAuctionInternal,\\n    AccessControlInternal,\\n    ERC165BaseInternal\\n{\\n    // Component role\\n    bytes32 internal constant COMPONENT_ROLE =\\n        keccak256('EnglishPeriodicAuctionFacet.COMPONENT_ROLE');\\n\\n    /**\\n     * @notice Initialize auction parameters\\n     */\\n    function initializeAuction(\\n        address _repossessor,\\n        address _initialBidder,\\n        uint256 _initialPeriodStartTime,\\n        uint256 _initialPeriodStartTimeOffset,\\n        uint256 _startingBid,\\n        uint256 _auctionLengthSeconds,\\n        uint256 _minBidIncrement,\\n        uint256 _bidExtensionWindowLengthSeconds,\\n        uint256 _bidExtensionSeconds\\n    ) external {\\n        require(\\n            _isInitialized() == false,\\n            'EnglishPeriodicAuctionFacet: already initialized'\\n        );\\n\\n        _setSupportsInterface(type(IPeriodicAuctionReadable).interfaceId, true);\\n        _initializeAuction(\\n            _repossessor,\\n            _initialBidder,\\n            _initialPeriodStartTime,\\n            _initialPeriodStartTimeOffset,\\n            _startingBid,\\n            _auctionLengthSeconds,\\n            _minBidIncrement,\\n            _bidExtensionWindowLengthSeconds,\\n            _bidExtensionSeconds\\n        );\\n    }\\n\\n    /**\\n     * @notice Initialize auction parameters with owner\\n     */\\n    function initializeAuction(\\n        address _owner,\\n        address _repossessor,\\n        address _initialBidder,\\n        uint256 _initialPeriodStartTime,\\n        uint256 _initialPeriodStartTimeOffset,\\n        uint256 _startingBid,\\n        uint256 _auctionLengthSeconds,\\n        uint256 _minBidIncrement,\\n        uint256 _bidExtensionWindowLengthSeconds,\\n        uint256 _bidExtensionSeconds\\n    ) external {\\n        require(\\n            _isInitialized() == false,\\n            'EnglishPeriodicAuctionFacet: already initialized'\\n        );\\n\\n        _setSupportsInterface(type(IPeriodicAuctionReadable).interfaceId, true);\\n        _setSupportsInterface(type(IPeriodicAuctionWritable).interfaceId, true);\\n        _grantRole(COMPONENT_ROLE, _owner);\\n        _setRoleAdmin(COMPONENT_ROLE, COMPONENT_ROLE);\\n        _initializeAuction(\\n            _repossessor,\\n            _initialBidder,\\n            _initialPeriodStartTime,\\n            _initialPeriodStartTimeOffset,\\n            _startingBid,\\n            _auctionLengthSeconds,\\n            _minBidIncrement,\\n            _bidExtensionWindowLengthSeconds,\\n            _bidExtensionSeconds\\n        );\\n    }\\n\\n    /**\\n     * @notice Set auction parameters\\n     */\\n    function setAuctionParameters(\\n        address _repossessor,\\n        uint256 _auctionLengthSeconds,\\n        uint256 _minBidIncrement,\\n        uint256 _bidExtensionWindowLengthSeconds,\\n        uint256 _bidExtensionSeconds,\\n        uint256 _startingBid\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setAuctionParameters(\\n            _repossessor,\\n            _auctionLengthSeconds,\\n            _minBidIncrement,\\n            _bidExtensionWindowLengthSeconds,\\n            _bidExtensionSeconds,\\n            _startingBid\\n        );\\n    }\\n\\n    /**\\n     * @notice Get starting bid\\n     */\\n    function startingBid() external view returns (uint256) {\\n        return _startingBid();\\n    }\\n\\n    /**\\n     * @notice Get is auction period\\n     */\\n    function isAuctionPeriod(uint256 tokenId) external view returns (bool) {\\n        return _isAuctionPeriod(tokenId);\\n    }\\n\\n    /**\\n     * @notice Get initial period start time\\n     */\\n    function initialPeriodStartTime() external view returns (uint256) {\\n        return _initialPeriodStartTime();\\n    }\\n\\n    /**\\n     * @notice Get initial bidder\\n     */\\n    function initialBidder() external view returns (address) {\\n        return _initialBidder();\\n    }\\n\\n    /**\\n     * @notice Is token ready for transfer\\n     */\\n    function isReadyForTransfer(uint256 tokenId) external view returns (bool) {\\n        return _isReadyForTransfer(tokenId);\\n    }\\n\\n    /**\\n     * @notice Place a bid\\n     */\\n    function placeBid(uint256 tokenId, uint256 bidAmount) external payable {\\n        require(\\n            _isAuctionPeriod(tokenId),\\n            'EnglishPeriodicAuction: can only place bid in auction period'\\n        );\\n        require(\\n            _isReadyForTransfer(tokenId) == false,\\n            'EnglishPeriodicAuction: auction is over and awaiting transfer'\\n        );\\n        require(\\n            IAllowlistReadable(address(this)).isAllowed(msg.sender),\\n            'EnglishPeriodicAuction: sender is not allowed to place bid'\\n        );\\n\\n        _placeBid(tokenId, msg.sender, bidAmount, msg.value);\\n    }\\n\\n    /**\\n     * @notice Cancel bid for current round\\n     */\\n    function cancelBid(uint256 tokenId, uint256 round) external {\\n        _cancelBid(tokenId, round, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral\\n     */\\n    function withdrawCollateral() external {\\n        _withdrawCollateral(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Cancel bid for current round and withdraw collateral\\n     */\\n    function cancelBidAndWithdrawCollateral(\\n        uint256 tokenId,\\n        uint256 round\\n    ) external {\\n        _cancelBid(tokenId, round, msg.sender);\\n        _withdrawCollateral(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Get available collateral\\n     */\\n    function availableCollateral(\\n        address bidder\\n    ) external view returns (uint256) {\\n        return _availableCollateral(bidder);\\n    }\\n\\n    /**\\n     * @notice Close auction and trigger a transfer to the highest bidder\\n     */\\n    function closeAuction(uint256 tokenId) external {\\n        require(\\n            _isReadyForTransfer(tokenId),\\n            'EnglishPeriodicAuction: auction is not over'\\n        );\\n\\n        _closeAuction(tokenId);\\n    }\\n\\n    /**\\n     * @notice Calculate fee from bid\\n     */\\n    function calculateFeeFromBid(\\n        uint256 bidAmount\\n    ) external view returns (uint256) {\\n        return _calculateFeeFromBid(bidAmount);\\n    }\\n\\n    /**\\n     * @notice Get auction start time\\n     */\\n    function auctionStartTime(uint256 tokenId) external view returns (uint256) {\\n        return _auctionStartTime(tokenId);\\n    }\\n\\n    /**\\n     * @notice Get auction end time\\n     */\\n    function auctionEndTime(uint256 tokenId) external view returns (uint256) {\\n        return _auctionEndTime(tokenId);\\n    }\\n\\n    /**\\n     * @notice Get repossessor\\n     */\\n    function repossessor() external view returns (address) {\\n        return _repossessor();\\n    }\\n\\n    /**\\n     * @notice Set starting bid\\n     */\\n    function setStartingBid(\\n        uint256 _startingBid\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setStartingBid(_startingBid);\\n    }\\n\\n    /**\\n     * @notice Set repossessor\\n     */\\n    function setRepossessor(\\n        address _repossessor\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setRepossessor(_repossessor);\\n    }\\n\\n    /**\\n     * @notice Get auction length\\n     */\\n    function auctionLengthSeconds() external view returns (uint256) {\\n        return _auctionLengthSeconds();\\n    }\\n\\n    /**\\n     * @notice Set auction length\\n     */\\n    function setAuctionLengthSeconds(\\n        uint256 _auctionLengthSeconds\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setAuctionLengthSeconds(_auctionLengthSeconds);\\n    }\\n\\n    /**\\n     * @notice Get minimum bid increment\\n     */\\n    function minBidIncrement() external view returns (uint256) {\\n        return _minBidIncrement();\\n    }\\n\\n    /**\\n     * @notice Set minimum bid increment\\n     */\\n    function setMinBidIncrement(\\n        uint256 _minBidIncrement\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setMinBidIncrement(_minBidIncrement);\\n    }\\n\\n    /**\\n     * @notice Get bid extension window length\\n     */\\n    function bidExtensionWindowLengthSeconds() external view returns (uint256) {\\n        return _bidExtensionWindowLengthSeconds();\\n    }\\n\\n    /**\\n     * @notice Set bid extension window length\\n     */\\n    function setBidExtensionWindowLengthSeconds(\\n        uint256 _bidExtensionWindowLengthSeconds\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setBidExtensionWindowLengthSeconds(_bidExtensionWindowLengthSeconds);\\n    }\\n\\n    /**\\n     *  @notice Get bid extension seconds\\n     */\\n    function bidExtensionSeconds() external view returns (uint256) {\\n        return _bidExtensionSeconds();\\n    }\\n\\n    /**\\n     *  @notice Set bid extension seconds\\n     */\\n    function setBidExtensionSeconds(\\n        uint256 _bidExtensionSeconds\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setBidExtensionSeconds(_bidExtensionSeconds);\\n    }\\n\\n    /**\\n     * @notice Get highest outstanding bid\\n     */\\n    function highestBid(uint256 tokenId) external view returns (Bid memory) {\\n        return _highestBid(tokenId, _currentAuctionRound(tokenId));\\n    }\\n\\n    /**\\n     * @notice Get highest outstanding bid for a particular round\\n     */\\n    function highestBid(\\n        uint256 tokenId,\\n        uint256 round\\n    ) external view returns (Bid memory) {\\n        return _highestBid(tokenId, round);\\n    }\\n\\n    /**\\n     * @notice Get bid for address\\n     */\\n    function bidOf(\\n        uint256 tokenId,\\n        address bidder\\n    ) external view returns (Bid memory) {\\n        return _bidOf(tokenId, _currentAuctionRound(tokenId), bidder);\\n    }\\n\\n    /**\\n     * @notice Get bid for address for particular round\\n     */\\n    function bidOf(\\n        uint256 tokenId,\\n        uint256 round,\\n        address bidder\\n    ) external view returns (Bid memory) {\\n        return _bidOf(tokenId, round, bidder);\\n    }\\n\\n    /**\\n     * @notice Get current auction round\\n     */\\n    function currentAuctionRound(\\n        uint256 tokenId\\n    ) external view returns (uint256) {\\n        return _currentAuctionRound(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x63c5dcc6ee7ff46cdd64e4adc5b93c4f1c9121d5ad845bf6c635d82321a1ec92\",\"license\":\"MIT\"},\"contracts/beneficiary/IBeneficiary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IBeneficiary\\n */\\ninterface IBeneficiary {\\n    /**\\n     * @notice Distribute to beneficiaries\\n     */\\n    function distribute() external payable;\\n}\\n\",\"keccak256\":\"0x2d88d42a46846bb1b6b48357b41de7e51d2facae84dfea7079cf434c5c3f718b\",\"license\":\"MIT\"},\"contracts/license/IStewardLicense.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IERC721 } from '@solidstate/contracts/interfaces/IERC721.sol';\\nimport { IERC721Metadata } from '@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol';\\n\\n/**\\n * @title IStewardLicense\\n */\\ninterface IStewardLicense is IERC721, IERC721Metadata {\\n    /**\\n     * @notice Trigger transfer of license\\n     */\\n    function triggerTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @notice Check if token exists\\n     */\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Get max token count\\n     */\\n    function maxTokenCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbec39166e294d67bfb1de12cc3126f408671b77cf311bb68464a73ec54ac90a4\",\"license\":\"MIT\"},\"contracts/pco/IPeriodicPCOParamsReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IPeriodicPCOParamsReadable\\n */\\ninterface IPeriodicPCOParamsReadable {\\n    /**\\n     * @notice Get license period\\n     */\\n    function licensePeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Get fee numerator\\n     */\\n    function feeNumerator() external view returns (uint256);\\n\\n    /**\\n     * @notice Get fee denominator\\n     */\\n    function feeDenominator() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xde96c17a825e6c25f5e18fe6d2307537d0fb67e5fa50dac3ff48a53216318a6e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612909806100206000396000f3fe6080604052600436106101ee5760003560e01c806357c90de51161010d578063b14c63c5116100a0578063c3bab6461161006f578063c3bab6461461058b578063d529acd6146105a0578063dba85ccb146105c0578063df1a65d5146105e0578063df6ba5c61461060057600080fd5b8063b14c63c51461052c578063b9fdd5691461054c578063be6a2a6d14610561578063bff821981461057657600080fd5b806371c65bde116100dc57806371c65bde146104a7578063777de704146104bc578063868c5466146104dc578063a7c12c11146104fc57600080fd5b806357c90de51461043f57806359c153be14610452578063609e46fb1461046757806361a7a2261461048757600080fd5b8063335b115e116101855780633882ce8e116101545780633882ce8e146103bd5780634b393605146103ea57806355cc19ea1461040a57806355ee09d71461041f57600080fd5b8063335b115e14610348578063355337441461035d578063358498a31461037d578063376a06981461039d57600080fd5b8063236ed8f3116101c1578063236ed8f3146102ba57806324db4190146102da57806328e05bf1146102fa57806333465c5f1461031a57600080fd5b80630556e9b9146101f3578063077bbc6d146102155780630842a0b21461023557806317a6836a1461029a575b600080fd5b3480156101ff57600080fd5b5061021361020e36600461247d565b610620565b005b34801561022157600080fd5b506102136102303660046124ab565b610645565b34801561024157600080fd5b50610255610250366004612520565b6106a1565b604051610291919081516001600160a01b0316815260208083015190820152604080830151908201526060918201519181019190915260800190565b60405180910390f35b3480156102a657600080fd5b506102136102b5366004612542565b6106f4565b3480156102c657600080fd5b506102136102d536600461247d565b610723565b3480156102e657600080fd5b506102136102f536600461258e565b610798565b34801561030657600080fd5b506102556103153660046125ab565b6107b9565b34801561032657600080fd5b5061033a61033536600461247d565b6107d4565b604051908152602001610291565b34801561035457600080fd5b5061033a6107df565b34801561036957600080fd5b5061033a61037836600461247d565b6107ee565b34801561038957600080fd5b506102136103983660046125db565b6107f9565b3480156103a957600080fd5b506102556103b8366004612665565b61088f565b3480156103c957600080fd5b506103d26108e2565b6040516001600160a01b039091168152602001610291565b3480156103f657600080fd5b50610213610405366004612520565b6108ec565b34801561041657600080fd5b5061033a6108f7565b34801561042b57600080fd5b5061021361043a36600461247d565b610901565b61021361044d366004612520565b610922565b34801561045e57600080fd5b50610213610af6565b34801561047357600080fd5b5061021361048236600461247d565b610b01565b34801561049357600080fd5b506102136104a236600461247d565b610b22565b3480156104b357600080fd5b506103d2610b43565b3480156104c857600080fd5b5061033a6104d736600461247d565b610b4d565b3480156104e857600080fd5b5061033a6104f736600461247d565b610b58565b34801561050857600080fd5b5061051c61051736600461247d565b610b63565b6040519015158152602001610291565b34801561053857600080fd5b5061025561054736600461247d565b610b6e565b34801561055857600080fd5b5061033a610bc6565b34801561056d57600080fd5b5061033a610bd0565b34801561058257600080fd5b5061033a610bda565b34801561059757600080fd5b5061033a610be4565b3480156105ac57600080fd5b5061033a6105bb36600461258e565b610bee565b3480156105cc57600080fd5b506102136105db36600461247d565b610bf9565b3480156105ec57600080fd5b506102136105fb366004612520565b610c1a565b34801561060c57600080fd5b5061051c61061b36600461247d565b610c2e565b6000805160206128b483398151915261063881610c39565b61064182610c43565b5050565b61064d610c87565b156106735760405162461bcd60e51b815260040161066a9061269e565b60405180910390fd5b610685631094e47960e11b6001610c9a565b610696898989898989898989610d10565b505050505050505050565b6106a961244c565b6106b38383610d82565b6040805160808101825282546001600160a01b0316815260018301546020820152600283015491810191909152600390910154606082015290505b92915050565b6000805160206128b483398151915261070c81610c39565b61071a878787878787610daa565b50505050505050565b61072c81610de8565b61078c5760405162461bcd60e51b815260206004820152602b60248201527f456e676c697368506572696f64696341756374696f6e3a2061756374696f6e2060448201526a34b9903737ba1037bb32b960a91b606482015260840161066a565b61079581610e6c565b50565b6000805160206128b48339815191526107b081610c39565b61064182611272565b6107c161244c565b6106b3836107ce856112ca565b846112e8565b60006106ee82611325565b60006107e9611400565b905090565b60006106ee826112ca565b610801610c87565b1561081e5760405162461bcd60e51b815260040161066a9061269e565b610830631094e47960e11b6001610c9a565b61084263aba4f05160e01b6001610c9a565b61085a6000805160206128b48339815191528b611413565b6108726000805160206128b483398151915280611487565b610883898989898989898989610d10565b50505050505050505050565b61089761244c565b6108a28484846112e8565b6040805160808101825282546001600160a01b03168152600183015460208201526002830154918101919091526003909101546060820152949350505050565b60006107e96114f1565b61064182823361150f565b60006107e9611772565b6000805160206128b483398151915261091981610c39565b61064182611785565b61092b826117c2565b61099d5760405162461bcd60e51b815260206004820152603c60248201527f456e676c697368506572696f64696341756374696f6e3a2063616e206f6e6c7960448201527f20706c6163652062696420696e2061756374696f6e20706572696f6400000000606482015260840161066a565b6109a682610de8565b15610a195760405162461bcd60e51b815260206004820152603d60248201527f456e676c697368506572696f64696341756374696f6e3a2061756374696f6e2060448201527f6973206f76657220616e64206177616974696e67207472616e73666572000000606482015260840161066a565b60405163babcc53960e01b8152336004820152309063babcc53990602401602060405180830381865afa158015610a54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7891906126ee565b610aea5760405162461bcd60e51b815260206004820152603a60248201527f456e676c697368506572696f64696341756374696f6e3a2073656e646572206960448201527f73206e6f7420616c6c6f77656420746f20706c61636520626964000000000000606482015260840161066a565b6106418233833461183d565b610aff33611dab565b565b6000805160206128b4833981519152610b1981610c39565b61064182611f0a565b6000805160206128b4833981519152610b3a81610c39565b61064182611f47565b60006107e9611f84565b60006106ee82611fa0565b60006106ee82611ffc565b60006106ee826117c2565b610b7661244c565b610b8882610b83846112ca565b610d82565b6040805160808101825282546001600160a01b0316815260018301546020820152600283015491810191909152600390910154606082015292915050565b60006107e96120de565b60006107e96120f1565b60006107e9612104565b60006107e9612117565b60006106ee8261212a565b6000805160206128b4833981519152610c1181610c39565b61064182612156565b610c2582823361150f565b61064133611dab565b60006106ee82610de8565b6107958133612193565b80610c4c6121f5565b600101556040518181527f1063dc5e6f2d1c9d1cdcddf0f8ce9f8984ff1afd2df93f864e28056f5da6b01c906020015b60405180910390a150565b6000610c916121f5565b5460ff16919050565b6001600160e01b03198083169003610cc55760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b6000610d1a6121f5565b80546001600160a01b038b16610100026001600160a81b031990911617600117815560048101889055600381018990559050610d5586610c43565b610d5e8a611272565b610d6785611f47565b610d7084611785565b610d7983612156565b61088382611f0a565b6000610d8c6121f5565b6000938452600d016020908152604080852093855292905250902090565b610db386611272565b610dbc85611f47565b610dc584611785565b610dce83612156565b610dd782611f0a565b610de081610c43565b505050505050565b6000306001600160a01b031663c4e627c26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4c9190612710565b8210610e5a57506000919050565b610e6382611fa0565b42101592915050565b6000610e766121f5565b6000838152600a82016020526040808220549051634f558e7960e01b815260048101869052929350913090634f558e7990602401602060405180830381865afa158015610ec7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eeb91906126ee565b15610f57576040516331a9108f60e11b8152600481018590523090636352211e90602401602060405180830381865afa158015610f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f509190612729565b9050610f69565b50815461010090046001600160a01b03165b60008481526009840160209081526040808320429055600d860182528083208584529091529020546001600160a01b031661103c576000848152600c8401602090815260408083208584528252808320600280880180546001600160a01b039081168752928552838620600180820188815582850189815560038085018b81559554855498166001600160a01b031998891681179095558e8b52600d8e018a52888b208d8c52909952969098208054909516909117845595549583019590955591549181019190915591549101556110b5565b6000848152600d8401602090815260408083208584529091529020546001600160a01b038281169116146110b5576000848152600d8401602090815260408083208584528252808320600101546001600160a01b0385168452600e870190925282208054919290916110af90849061275c565b90915550505b6000848152600d840160209081526040808320858452825291829020805460019091015483516001600160a01b03868116825293810191909152911691849187917fdae3b66c823bbdbd53155f9bb3e7693f818e957f816fe910b303fdbe7fa37dab910160405180910390a460058301546000858152600b85016020908152604080832093909355600a86019052205461115090600161275c565b6000858152600a85016020908152604080832093909355600d86018152828220858352905281902054905163e31a7c0160e01b81526001600160a01b038084166004830152909116602482015260448101859052309063e31a7c0190606401600060405180830381600087803b1580156111c957600080fd5b505af11580156111dd573d6000803e3d6000fd5b5050506000858152600d85016020908152604080832086845290915290206002015415905061126c576000848152600d84016020908152604080832085845290915280822060020154815163e4fc6b6d60e01b81529151309363e4fc6b6d936004808201939182900301818588803b15801561125857600080fd5b505af1158015610696573d6000803e3d6000fd5b50505050565b8061127b6121f5565b60020180546001600160a01b0319166001600160a01b0392831617905560405190821681527f03bb52851d1b668acbe31ec6258d6de44a14c1dc0d9db84ab95e8071f5aa989d90602001610c7c565b60006112d46121f5565b6000928352600a0160205250604090205490565b60006112f26121f5565b6000948552600c01602090815260408086209486529381528385206001600160a01b039390931685529190915250902090565b6000806113306121f5565b90506000306001600160a01b031663fd8e6f286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113969190612710565b6003830154600086815260098501602052604090205491925010156113d85760008481526009830160205260409020546113d190829061275c565b92506113f9565b60048201546113e7908561276f565b82600301546113f6919061275c565b92505b5050919050565b600061140a6121f5565b60060154905090565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040902061144a9082612219565b5060405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040808220600201805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006114fb6121f5565b5461010090046001600160a01b0316919050565b60006115196121f5565b604051634f558e7960e01b8152600481018690529091506000903090634f558e7990602401602060405180830381865afa15801561155b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157f91906126ee565b156115eb576040516331a9108f60e11b8152600481018690523090636352211e90602401602060405180830381865afa1580156115c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e49190612729565b90506115fd565b50805461010090046001600160a01b03165b6000858152600d8301602090815260408083208784529091529020546001600160a01b039081169084160361169a5760405162461bcd60e51b815260206004820152603b60248201527f456e676c697368506572696f64696341756374696f6e3a2043616e6e6f74206360448201527f616e63656c206269642069662068696768657374206269646465720000000000606482015260840161066a565b6000858152600c83016020908152604080832087845282528083206001600160a01b0387168452909152902060038101546117285760405162461bcd60e51b815260206004820152602860248201527f456e676c697368506572696f64696341756374696f6e3a204e6f2062696420746044820152671bc818d85b98d95b60c21b606482015260840161066a565b60038101546001600160a01b0385166000908152600e850160205260408120805490919061175790849061275c565b90915550506000600382018190556001909101555050505050565b600061177c6121f5565b60070154905090565b8061178e6121f5565b600601556040518181527f8092df692524f6b78c4746150cae83effcfd6b470cc0038f09a603d42a32388e90602001610c7c565b6000306001600160a01b031663c4e627c26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611802573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118269190612710565b821061183457506000919050565b610e6382611325565b60006118476121f5565b6000868152600a82016020908152604080832054600c8501835281842081855283528184206001600160a01b038a168552909252909120600183015492935090918510156119165760405162461bcd60e51b815260206004820152605060248201527f456e676c697368506572696f64696341756374696f6e3a2042696420616d6f7560448201527f6e74206d7573742062652067726561746572207468616e206f7220657175616c60648201526f081d1bc81cdd185c9d1a5b99c8189a5960821b608482015260a40161066a565b60068301546000888152600d850160209081526040808320868452909152902060010154611944919061275c565b8510156119d15760405162461bcd60e51b815260206004820152604f60248201527f456e676c697368506572696f64696341756374696f6e3a2042696420616d6f7560448201527f6e74206d7573742062652067726561746572207468616e20686967686573742060648201526e1bdd5d1cdd185b991a5b99c8189a59608a1b608482015260a40161066a565b60008482600301546119e3919061275c565b604051634f558e7960e01b8152600481018a905290915060009081903090634f558e7990602401602060405180830381865afa158015611a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4b91906126ee565b15611ab7576040516331a9108f60e11b8152600481018b90523090636352211e90602401602060405180830381865afa158015611a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab09190612729565b9050611ac9565b50845461010090046001600160a01b03165b806001600160a01b0316896001600160a01b031603611aea57829150611b78565b878311611b6b5760405162461bcd60e51b815260206004820152604360248201527f456e676c697368506572696f64696341756374696f6e3a20436f6c6c6174657260448201527f616c206d7573742062652067726561746572207468616e2063757272656e7420606482015262189a5960ea1b608482015260a40161066a565b611b758884612786565b91505b611b828883612235565b611be35760405162461bcd60e51b815260206004820152602c60248201527f456e676c697368506572696f64696341756374696f6e3a20496e636f7272656360448201526b1d08189a5908185b5bdd5b9d60a21b606482015260840161066a565b888460000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508784600101819055508184600201819055508284600301819055508386600d0160008c815260200190815260200160002060008781526020019081526020016000206000820160009054906101000a90046001600160a01b03168160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506001820154816001015560028201548160020155600382015481600301559050508360000160009054906101000a90046001600160a01b03166001600160a01b0316858b7f6f7e354ea3ab5c288aea37fce29c603f9a98a3b040f6d8f32f10e192ec47ff6a8760010154604051611d0791815260200190565b60405180910390a46000611d1a8b611fa0565b9050428110158015611d3b5750611d2f611772565b611d394283612786565b105b15611d9e5760008b8152600b880160205260408120548103611d6657611d5f612117565b9050611d79565b5060008b8152600b880160205260409020545b611d81612104565b611d8b908261275c565b60008d8152600b8a016020526040902055505b5050505050505050505050565b6000611db56121f5565b6001600160a01b0383166000908152600e8201602052604090205490915080611e3a5760405162461bcd60e51b815260206004820152603160248201527f456e676c697368506572696f64696341756374696f6e3a204e6f20636f6c6c61604482015270746572616c20746f20776974686472617760781b606482015260840161066a565b6001600160a01b0383166000818152600e840160205260408082208290555190919083908381818185875af1925050503d8060008114611e96576040519150601f19603f3d011682016040523d82523d6000602084013e611e9b565b606091505b505090508061126c5760405162461bcd60e51b815260206004820152603560248201527f456e676c697368506572696f64696341756374696f6e3a204661696c656420746044820152741bc81dda5d1a191c985dc818dbdb1b185d195c985b605a1b606482015260840161066a565b80611f136121f5565b600801556040518181527f33178f49ae33ce72b1c9e38d72f4ae326b490e4e7c9e02b8735a9ceacf770dee90602001610c7c565b80611f506121f5565b600501556040518181527f99578d7fe3e20e279feceaa076eb8032d475ca1a49391ec0a740445152a5971390602001610c7c565b6000611f8e6121f5565b600201546001600160a01b0316919050565b600080611fab6121f5565b6000848152600b82016020526040812054919250908103611fd557611fce612117565b9050611fe8565b506000838152600b820160205260409020545b80611ff285611325565b6113f6919061275c565b600080306001600160a01b031663e86dea4a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561203d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120619190612710565b90506000306001600160a01b031663180b0d7e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c79190612710565b9050806120d4838661276f565b6113f69190612799565b60006120e86121f5565b60010154905090565b60006120fb6121f5565b60030154905090565b600061210e6121f5565b60080154905090565b60006121216121f5565b60050154905090565b60006121346121f5565b6001600160a01b039092166000908152600e9290920160205250604090205490565b8061215f6121f5565b600701556040518181527f19ba737fa8db769049b6dafc98d3391bdead47e7f6617113c775efbed1efc6f990602001610c7c565b61219d828261224b565b610641576121b3816001600160a01b03166122a4565b6121be8360206122b6565b6040516020016121cf9291906127df565b60408051601f198184030181529082905262461bcd60e51b825261066a91600401612854565b7fc7ed1b841b2d3c7f16d15642e7b013e89732e44006608d59c7547b8e331a7ce090565b600061222e836001600160a01b038416612409565b9392505050565b60008061224184611ffc565b9092149392505050565b600061222e827fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811600086815260209190915260409020906001600160a01b0381166000908152600183016020526040812054151561222e565b60606106ee6001600160a01b03831660145b606060006122c583600261276f565b6122d090600261275c565b67ffffffffffffffff8111156122e8576122e8612887565b6040519080825280601f01601f191660200182016040528015612312576020820181803683370190505b509050600360fc1b8160008151811061232d5761232d61289d565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061235c5761235c61289d565b60200101906001600160f81b031916908160001a905350600160028402015b60018111156123e9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106123ac576123ac61289d565b1a60f81b8282815181106123c2576123c261289d565b60200101906001600160f81b031916908160001a90535060049490941c936000190161237b565b50831561222e5760405163c913478560e01b815260040160405180910390fd5b60008181526001830160205260408120546106ee575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b60006020828403121561248f57600080fd5b5035919050565b6001600160a01b038116811461079557600080fd5b60008060008060008060008060006101208a8c0312156124ca57600080fd5b89356124d581612496565b985060208a01356124e581612496565b989b989a505050506040870135966060810135966080820135965060a0820135955060c0820135945060e08201359350610100909101359150565b6000806040838503121561253357600080fd5b50508035926020909101359150565b60008060008060008060c0878903121561255b57600080fd5b863561256681612496565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b6000602082840312156125a057600080fd5b813561222e81612496565b600080604083850312156125be57600080fd5b8235915060208301356125d081612496565b809150509250929050565b6000806000806000806000806000806101408b8d0312156125fb57600080fd5b8a3561260681612496565b995060208b013561261681612496565b985060408b013561262681612496565b999c989b5098996060810135995060808101359860a0820135985060c0820135975060e082013596506101008201359550610120909101359350915050565b60008060006060848603121561267a57600080fd5b8335925060208401359150604084013561269381612496565b809150509250925092565b60208082526030908201527f456e676c697368506572696f64696341756374696f6e46616365743a20616c7260408201526f1958591e481a5b9a5d1a585b1a5e995960821b606082015260800190565b60006020828403121561270057600080fd5b8151801515811461222e57600080fd5b60006020828403121561272257600080fd5b5051919050565b60006020828403121561273b57600080fd5b815161222e81612496565b634e487b7160e01b600052601160045260246000fd5b808201808211156106ee576106ee612746565b80820281158282048414176106ee576106ee612746565b818103818111156106ee576106ee612746565b6000826127b657634e487b7160e01b600052601260045260246000fd5b500490565b60005b838110156127d65781810151838201526020016127be565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516128178160178501602088016127bb565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516128488160288401602088016127bb565b01602801949350505050565b60208152600082518060208401526128738160408501602087016127bb565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfe27d47e2aa570d0f5aa1d72abbe4d60032a12e3514b8c2bc8a49a9968779054c2a26469706673582212205100d72ee6314a7fdd96525b21c3a4b5ff1c7afd7697b86bde693e9c3c96c4f964736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c806357c90de51161010d578063b14c63c5116100a0578063c3bab6461161006f578063c3bab6461461058b578063d529acd6146105a0578063dba85ccb146105c0578063df1a65d5146105e0578063df6ba5c61461060057600080fd5b8063b14c63c51461052c578063b9fdd5691461054c578063be6a2a6d14610561578063bff821981461057657600080fd5b806371c65bde116100dc57806371c65bde146104a7578063777de704146104bc578063868c5466146104dc578063a7c12c11146104fc57600080fd5b806357c90de51461043f57806359c153be14610452578063609e46fb1461046757806361a7a2261461048757600080fd5b8063335b115e116101855780633882ce8e116101545780633882ce8e146103bd5780634b393605146103ea57806355cc19ea1461040a57806355ee09d71461041f57600080fd5b8063335b115e14610348578063355337441461035d578063358498a31461037d578063376a06981461039d57600080fd5b8063236ed8f3116101c1578063236ed8f3146102ba57806324db4190146102da57806328e05bf1146102fa57806333465c5f1461031a57600080fd5b80630556e9b9146101f3578063077bbc6d146102155780630842a0b21461023557806317a6836a1461029a575b600080fd5b3480156101ff57600080fd5b5061021361020e36600461247d565b610620565b005b34801561022157600080fd5b506102136102303660046124ab565b610645565b34801561024157600080fd5b50610255610250366004612520565b6106a1565b604051610291919081516001600160a01b0316815260208083015190820152604080830151908201526060918201519181019190915260800190565b60405180910390f35b3480156102a657600080fd5b506102136102b5366004612542565b6106f4565b3480156102c657600080fd5b506102136102d536600461247d565b610723565b3480156102e657600080fd5b506102136102f536600461258e565b610798565b34801561030657600080fd5b506102556103153660046125ab565b6107b9565b34801561032657600080fd5b5061033a61033536600461247d565b6107d4565b604051908152602001610291565b34801561035457600080fd5b5061033a6107df565b34801561036957600080fd5b5061033a61037836600461247d565b6107ee565b34801561038957600080fd5b506102136103983660046125db565b6107f9565b3480156103a957600080fd5b506102556103b8366004612665565b61088f565b3480156103c957600080fd5b506103d26108e2565b6040516001600160a01b039091168152602001610291565b3480156103f657600080fd5b50610213610405366004612520565b6108ec565b34801561041657600080fd5b5061033a6108f7565b34801561042b57600080fd5b5061021361043a36600461247d565b610901565b61021361044d366004612520565b610922565b34801561045e57600080fd5b50610213610af6565b34801561047357600080fd5b5061021361048236600461247d565b610b01565b34801561049357600080fd5b506102136104a236600461247d565b610b22565b3480156104b357600080fd5b506103d2610b43565b3480156104c857600080fd5b5061033a6104d736600461247d565b610b4d565b3480156104e857600080fd5b5061033a6104f736600461247d565b610b58565b34801561050857600080fd5b5061051c61051736600461247d565b610b63565b6040519015158152602001610291565b34801561053857600080fd5b5061025561054736600461247d565b610b6e565b34801561055857600080fd5b5061033a610bc6565b34801561056d57600080fd5b5061033a610bd0565b34801561058257600080fd5b5061033a610bda565b34801561059757600080fd5b5061033a610be4565b3480156105ac57600080fd5b5061033a6105bb36600461258e565b610bee565b3480156105cc57600080fd5b506102136105db36600461247d565b610bf9565b3480156105ec57600080fd5b506102136105fb366004612520565b610c1a565b34801561060c57600080fd5b5061051c61061b36600461247d565b610c2e565b6000805160206128b483398151915261063881610c39565b61064182610c43565b5050565b61064d610c87565b156106735760405162461bcd60e51b815260040161066a9061269e565b60405180910390fd5b610685631094e47960e11b6001610c9a565b610696898989898989898989610d10565b505050505050505050565b6106a961244c565b6106b38383610d82565b6040805160808101825282546001600160a01b0316815260018301546020820152600283015491810191909152600390910154606082015290505b92915050565b6000805160206128b483398151915261070c81610c39565b61071a878787878787610daa565b50505050505050565b61072c81610de8565b61078c5760405162461bcd60e51b815260206004820152602b60248201527f456e676c697368506572696f64696341756374696f6e3a2061756374696f6e2060448201526a34b9903737ba1037bb32b960a91b606482015260840161066a565b61079581610e6c565b50565b6000805160206128b48339815191526107b081610c39565b61064182611272565b6107c161244c565b6106b3836107ce856112ca565b846112e8565b60006106ee82611325565b60006107e9611400565b905090565b60006106ee826112ca565b610801610c87565b1561081e5760405162461bcd60e51b815260040161066a9061269e565b610830631094e47960e11b6001610c9a565b61084263aba4f05160e01b6001610c9a565b61085a6000805160206128b48339815191528b611413565b6108726000805160206128b483398151915280611487565b610883898989898989898989610d10565b50505050505050505050565b61089761244c565b6108a28484846112e8565b6040805160808101825282546001600160a01b03168152600183015460208201526002830154918101919091526003909101546060820152949350505050565b60006107e96114f1565b61064182823361150f565b60006107e9611772565b6000805160206128b483398151915261091981610c39565b61064182611785565b61092b826117c2565b61099d5760405162461bcd60e51b815260206004820152603c60248201527f456e676c697368506572696f64696341756374696f6e3a2063616e206f6e6c7960448201527f20706c6163652062696420696e2061756374696f6e20706572696f6400000000606482015260840161066a565b6109a682610de8565b15610a195760405162461bcd60e51b815260206004820152603d60248201527f456e676c697368506572696f64696341756374696f6e3a2061756374696f6e2060448201527f6973206f76657220616e64206177616974696e67207472616e73666572000000606482015260840161066a565b60405163babcc53960e01b8152336004820152309063babcc53990602401602060405180830381865afa158015610a54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7891906126ee565b610aea5760405162461bcd60e51b815260206004820152603a60248201527f456e676c697368506572696f64696341756374696f6e3a2073656e646572206960448201527f73206e6f7420616c6c6f77656420746f20706c61636520626964000000000000606482015260840161066a565b6106418233833461183d565b610aff33611dab565b565b6000805160206128b4833981519152610b1981610c39565b61064182611f0a565b6000805160206128b4833981519152610b3a81610c39565b61064182611f47565b60006107e9611f84565b60006106ee82611fa0565b60006106ee82611ffc565b60006106ee826117c2565b610b7661244c565b610b8882610b83846112ca565b610d82565b6040805160808101825282546001600160a01b0316815260018301546020820152600283015491810191909152600390910154606082015292915050565b60006107e96120de565b60006107e96120f1565b60006107e9612104565b60006107e9612117565b60006106ee8261212a565b6000805160206128b4833981519152610c1181610c39565b61064182612156565b610c2582823361150f565b61064133611dab565b60006106ee82610de8565b6107958133612193565b80610c4c6121f5565b600101556040518181527f1063dc5e6f2d1c9d1cdcddf0f8ce9f8984ff1afd2df93f864e28056f5da6b01c906020015b60405180910390a150565b6000610c916121f5565b5460ff16919050565b6001600160e01b03198083169003610cc55760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b6000610d1a6121f5565b80546001600160a01b038b16610100026001600160a81b031990911617600117815560048101889055600381018990559050610d5586610c43565b610d5e8a611272565b610d6785611f47565b610d7084611785565b610d7983612156565b61088382611f0a565b6000610d8c6121f5565b6000938452600d016020908152604080852093855292905250902090565b610db386611272565b610dbc85611f47565b610dc584611785565b610dce83612156565b610dd782611f0a565b610de081610c43565b505050505050565b6000306001600160a01b031663c4e627c26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4c9190612710565b8210610e5a57506000919050565b610e6382611fa0565b42101592915050565b6000610e766121f5565b6000838152600a82016020526040808220549051634f558e7960e01b815260048101869052929350913090634f558e7990602401602060405180830381865afa158015610ec7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eeb91906126ee565b15610f57576040516331a9108f60e11b8152600481018590523090636352211e90602401602060405180830381865afa158015610f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f509190612729565b9050610f69565b50815461010090046001600160a01b03165b60008481526009840160209081526040808320429055600d860182528083208584529091529020546001600160a01b031661103c576000848152600c8401602090815260408083208584528252808320600280880180546001600160a01b039081168752928552838620600180820188815582850189815560038085018b81559554855498166001600160a01b031998891681179095558e8b52600d8e018a52888b208d8c52909952969098208054909516909117845595549583019590955591549181019190915591549101556110b5565b6000848152600d8401602090815260408083208584529091529020546001600160a01b038281169116146110b5576000848152600d8401602090815260408083208584528252808320600101546001600160a01b0385168452600e870190925282208054919290916110af90849061275c565b90915550505b6000848152600d840160209081526040808320858452825291829020805460019091015483516001600160a01b03868116825293810191909152911691849187917fdae3b66c823bbdbd53155f9bb3e7693f818e957f816fe910b303fdbe7fa37dab910160405180910390a460058301546000858152600b85016020908152604080832093909355600a86019052205461115090600161275c565b6000858152600a85016020908152604080832093909355600d86018152828220858352905281902054905163e31a7c0160e01b81526001600160a01b038084166004830152909116602482015260448101859052309063e31a7c0190606401600060405180830381600087803b1580156111c957600080fd5b505af11580156111dd573d6000803e3d6000fd5b5050506000858152600d85016020908152604080832086845290915290206002015415905061126c576000848152600d84016020908152604080832085845290915280822060020154815163e4fc6b6d60e01b81529151309363e4fc6b6d936004808201939182900301818588803b15801561125857600080fd5b505af1158015610696573d6000803e3d6000fd5b50505050565b8061127b6121f5565b60020180546001600160a01b0319166001600160a01b0392831617905560405190821681527f03bb52851d1b668acbe31ec6258d6de44a14c1dc0d9db84ab95e8071f5aa989d90602001610c7c565b60006112d46121f5565b6000928352600a0160205250604090205490565b60006112f26121f5565b6000948552600c01602090815260408086209486529381528385206001600160a01b039390931685529190915250902090565b6000806113306121f5565b90506000306001600160a01b031663fd8e6f286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113969190612710565b6003830154600086815260098501602052604090205491925010156113d85760008481526009830160205260409020546113d190829061275c565b92506113f9565b60048201546113e7908561276f565b82600301546113f6919061275c565b92505b5050919050565b600061140a6121f5565b60060154905090565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040902061144a9082612219565b5060405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040808220600201805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006114fb6121f5565b5461010090046001600160a01b0316919050565b60006115196121f5565b604051634f558e7960e01b8152600481018690529091506000903090634f558e7990602401602060405180830381865afa15801561155b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157f91906126ee565b156115eb576040516331a9108f60e11b8152600481018690523090636352211e90602401602060405180830381865afa1580156115c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e49190612729565b90506115fd565b50805461010090046001600160a01b03165b6000858152600d8301602090815260408083208784529091529020546001600160a01b039081169084160361169a5760405162461bcd60e51b815260206004820152603b60248201527f456e676c697368506572696f64696341756374696f6e3a2043616e6e6f74206360448201527f616e63656c206269642069662068696768657374206269646465720000000000606482015260840161066a565b6000858152600c83016020908152604080832087845282528083206001600160a01b0387168452909152902060038101546117285760405162461bcd60e51b815260206004820152602860248201527f456e676c697368506572696f64696341756374696f6e3a204e6f2062696420746044820152671bc818d85b98d95b60c21b606482015260840161066a565b60038101546001600160a01b0385166000908152600e850160205260408120805490919061175790849061275c565b90915550506000600382018190556001909101555050505050565b600061177c6121f5565b60070154905090565b8061178e6121f5565b600601556040518181527f8092df692524f6b78c4746150cae83effcfd6b470cc0038f09a603d42a32388e90602001610c7c565b6000306001600160a01b031663c4e627c26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611802573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118269190612710565b821061183457506000919050565b610e6382611325565b60006118476121f5565b6000868152600a82016020908152604080832054600c8501835281842081855283528184206001600160a01b038a168552909252909120600183015492935090918510156119165760405162461bcd60e51b815260206004820152605060248201527f456e676c697368506572696f64696341756374696f6e3a2042696420616d6f7560448201527f6e74206d7573742062652067726561746572207468616e206f7220657175616c60648201526f081d1bc81cdd185c9d1a5b99c8189a5960821b608482015260a40161066a565b60068301546000888152600d850160209081526040808320868452909152902060010154611944919061275c565b8510156119d15760405162461bcd60e51b815260206004820152604f60248201527f456e676c697368506572696f64696341756374696f6e3a2042696420616d6f7560448201527f6e74206d7573742062652067726561746572207468616e20686967686573742060648201526e1bdd5d1cdd185b991a5b99c8189a59608a1b608482015260a40161066a565b60008482600301546119e3919061275c565b604051634f558e7960e01b8152600481018a905290915060009081903090634f558e7990602401602060405180830381865afa158015611a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4b91906126ee565b15611ab7576040516331a9108f60e11b8152600481018b90523090636352211e90602401602060405180830381865afa158015611a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab09190612729565b9050611ac9565b50845461010090046001600160a01b03165b806001600160a01b0316896001600160a01b031603611aea57829150611b78565b878311611b6b5760405162461bcd60e51b815260206004820152604360248201527f456e676c697368506572696f64696341756374696f6e3a20436f6c6c6174657260448201527f616c206d7573742062652067726561746572207468616e2063757272656e7420606482015262189a5960ea1b608482015260a40161066a565b611b758884612786565b91505b611b828883612235565b611be35760405162461bcd60e51b815260206004820152602c60248201527f456e676c697368506572696f64696341756374696f6e3a20496e636f7272656360448201526b1d08189a5908185b5bdd5b9d60a21b606482015260840161066a565b888460000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508784600101819055508184600201819055508284600301819055508386600d0160008c815260200190815260200160002060008781526020019081526020016000206000820160009054906101000a90046001600160a01b03168160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506001820154816001015560028201548160020155600382015481600301559050508360000160009054906101000a90046001600160a01b03166001600160a01b0316858b7f6f7e354ea3ab5c288aea37fce29c603f9a98a3b040f6d8f32f10e192ec47ff6a8760010154604051611d0791815260200190565b60405180910390a46000611d1a8b611fa0565b9050428110158015611d3b5750611d2f611772565b611d394283612786565b105b15611d9e5760008b8152600b880160205260408120548103611d6657611d5f612117565b9050611d79565b5060008b8152600b880160205260409020545b611d81612104565b611d8b908261275c565b60008d8152600b8a016020526040902055505b5050505050505050505050565b6000611db56121f5565b6001600160a01b0383166000908152600e8201602052604090205490915080611e3a5760405162461bcd60e51b815260206004820152603160248201527f456e676c697368506572696f64696341756374696f6e3a204e6f20636f6c6c61604482015270746572616c20746f20776974686472617760781b606482015260840161066a565b6001600160a01b0383166000818152600e840160205260408082208290555190919083908381818185875af1925050503d8060008114611e96576040519150601f19603f3d011682016040523d82523d6000602084013e611e9b565b606091505b505090508061126c5760405162461bcd60e51b815260206004820152603560248201527f456e676c697368506572696f64696341756374696f6e3a204661696c656420746044820152741bc81dda5d1a191c985dc818dbdb1b185d195c985b605a1b606482015260840161066a565b80611f136121f5565b600801556040518181527f33178f49ae33ce72b1c9e38d72f4ae326b490e4e7c9e02b8735a9ceacf770dee90602001610c7c565b80611f506121f5565b600501556040518181527f99578d7fe3e20e279feceaa076eb8032d475ca1a49391ec0a740445152a5971390602001610c7c565b6000611f8e6121f5565b600201546001600160a01b0316919050565b600080611fab6121f5565b6000848152600b82016020526040812054919250908103611fd557611fce612117565b9050611fe8565b506000838152600b820160205260409020545b80611ff285611325565b6113f6919061275c565b600080306001600160a01b031663e86dea4a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561203d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120619190612710565b90506000306001600160a01b031663180b0d7e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c79190612710565b9050806120d4838661276f565b6113f69190612799565b60006120e86121f5565b60010154905090565b60006120fb6121f5565b60030154905090565b600061210e6121f5565b60080154905090565b60006121216121f5565b60050154905090565b60006121346121f5565b6001600160a01b039092166000908152600e9290920160205250604090205490565b8061215f6121f5565b600701556040518181527f19ba737fa8db769049b6dafc98d3391bdead47e7f6617113c775efbed1efc6f990602001610c7c565b61219d828261224b565b610641576121b3816001600160a01b03166122a4565b6121be8360206122b6565b6040516020016121cf9291906127df565b60408051601f198184030181529082905262461bcd60e51b825261066a91600401612854565b7fc7ed1b841b2d3c7f16d15642e7b013e89732e44006608d59c7547b8e331a7ce090565b600061222e836001600160a01b038416612409565b9392505050565b60008061224184611ffc565b9092149392505050565b600061222e827fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811600086815260209190915260409020906001600160a01b0381166000908152600183016020526040812054151561222e565b60606106ee6001600160a01b03831660145b606060006122c583600261276f565b6122d090600261275c565b67ffffffffffffffff8111156122e8576122e8612887565b6040519080825280601f01601f191660200182016040528015612312576020820181803683370190505b509050600360fc1b8160008151811061232d5761232d61289d565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061235c5761235c61289d565b60200101906001600160f81b031916908160001a905350600160028402015b60018111156123e9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106123ac576123ac61289d565b1a60f81b8282815181106123c2576123c261289d565b60200101906001600160f81b031916908160001a90535060049490941c936000190161237b565b50831561222e5760405163c913478560e01b815260040160405180910390fd5b60008181526001830160205260408120546106ee575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b60006020828403121561248f57600080fd5b5035919050565b6001600160a01b038116811461079557600080fd5b60008060008060008060008060006101208a8c0312156124ca57600080fd5b89356124d581612496565b985060208a01356124e581612496565b989b989a505050506040870135966060810135966080820135965060a0820135955060c0820135945060e08201359350610100909101359150565b6000806040838503121561253357600080fd5b50508035926020909101359150565b60008060008060008060c0878903121561255b57600080fd5b863561256681612496565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b6000602082840312156125a057600080fd5b813561222e81612496565b600080604083850312156125be57600080fd5b8235915060208301356125d081612496565b809150509250929050565b6000806000806000806000806000806101408b8d0312156125fb57600080fd5b8a3561260681612496565b995060208b013561261681612496565b985060408b013561262681612496565b999c989b5098996060810135995060808101359860a0820135985060c0820135975060e082013596506101008201359550610120909101359350915050565b60008060006060848603121561267a57600080fd5b8335925060208401359150604084013561269381612496565b809150509250925092565b60208082526030908201527f456e676c697368506572696f64696341756374696f6e46616365743a20616c7260408201526f1958591e481a5b9a5d1a585b1a5e995960821b606082015260800190565b60006020828403121561270057600080fd5b8151801515811461222e57600080fd5b60006020828403121561272257600080fd5b5051919050565b60006020828403121561273b57600080fd5b815161222e81612496565b634e487b7160e01b600052601160045260246000fd5b808201808211156106ee576106ee612746565b80820281158282048414176106ee576106ee612746565b818103818111156106ee576106ee612746565b6000826127b657634e487b7160e01b600052601260045260246000fd5b500490565b60005b838110156127d65781810151838201526020016127be565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516128178160178501602088016127bb565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516128488160288401602088016127bb565b01602801949350505050565b60208152600082518060208401526128738160408501602087016127bb565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfe27d47e2aa570d0f5aa1d72abbe4d60032a12e3514b8c2bc8a49a9968779054c2a26469706673582212205100d72ee6314a7fdd96525b21c3a4b5ff1c7afd7697b86bde693e9c3c96c4f964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "EnglishPeriodicAuctionFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "auctionEndTime(uint256)": {
        "notice": "Get auction end time"
      },
      "auctionLengthSeconds()": {
        "notice": "Get auction length"
      },
      "auctionStartTime(uint256)": {
        "notice": "Get auction start time"
      },
      "availableCollateral(address)": {
        "notice": "Get available collateral"
      },
      "bidExtensionSeconds()": {
        "notice": "Get bid extension seconds"
      },
      "bidExtensionWindowLengthSeconds()": {
        "notice": "Get bid extension window length"
      },
      "bidOf(uint256,address)": {
        "notice": "Get bid for address"
      },
      "bidOf(uint256,uint256,address)": {
        "notice": "Get bid for address for particular round"
      },
      "calculateFeeFromBid(uint256)": {
        "notice": "Calculate fee from bid"
      },
      "cancelBid(uint256,uint256)": {
        "notice": "Cancel bid for current round"
      },
      "cancelBidAndWithdrawCollateral(uint256,uint256)": {
        "notice": "Cancel bid for current round and withdraw collateral"
      },
      "closeAuction(uint256)": {
        "notice": "Close auction and trigger a transfer to the highest bidder"
      },
      "currentAuctionRound(uint256)": {
        "notice": "Get current auction round"
      },
      "highestBid(uint256)": {
        "notice": "Get highest outstanding bid"
      },
      "highestBid(uint256,uint256)": {
        "notice": "Get highest outstanding bid for a particular round"
      },
      "initialBidder()": {
        "notice": "Get initial bidder"
      },
      "initialPeriodStartTime()": {
        "notice": "Get initial period start time"
      },
      "initializeAuction(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Initialize auction parameters with owner"
      },
      "initializeAuction(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Initialize auction parameters"
      },
      "isAuctionPeriod(uint256)": {
        "notice": "Get is auction period"
      },
      "isReadyForTransfer(uint256)": {
        "notice": "Is token ready for transfer"
      },
      "minBidIncrement()": {
        "notice": "Get minimum bid increment"
      },
      "placeBid(uint256,uint256)": {
        "notice": "Place a bid"
      },
      "repossessor()": {
        "notice": "Get repossessor"
      },
      "setAuctionLengthSeconds(uint256)": {
        "notice": "Set auction length"
      },
      "setAuctionParameters(address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Set auction parameters"
      },
      "setBidExtensionSeconds(uint256)": {
        "notice": "Set bid extension seconds"
      },
      "setBidExtensionWindowLengthSeconds(uint256)": {
        "notice": "Set bid extension window length"
      },
      "setMinBidIncrement(uint256)": {
        "notice": "Set minimum bid increment"
      },
      "setRepossessor(address)": {
        "notice": "Set repossessor"
      },
      "setStartingBid(uint256)": {
        "notice": "Set starting bid"
      },
      "startingBid()": {
        "notice": "Get starting bid"
      },
      "withdrawCollateral()": {
        "notice": "Withdraw collateral"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
