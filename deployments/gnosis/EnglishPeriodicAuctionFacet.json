{
  "address": "0xF4088860C03763B9b0B6e5C80D07530dE225D66f",
  "abi": [
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintUtils__InsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winningBidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "AuctionClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionLengthSeconds",
          "type": "uint256"
        }
      ],
      "name": "AuctionLengthSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidExtensionSeconds",
          "type": "uint256"
        }
      ],
      "name": "BidExtensionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidExtensionWindowLengthSeconds",
          "type": "uint256"
        }
      ],
      "name": "BidExtensionWindowLengthSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPeriodStartTime",
          "type": "uint256"
        }
      ],
      "name": "InitialPeriodStartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBidIncrement",
          "type": "uint256"
        }
      ],
      "name": "MinBidIncrementSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "repossessor",
          "type": "address"
        }
      ],
      "name": "RepossessorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "auctionEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionLengthSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "auctionStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bidExtensionSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bidExtensionWindowLengthSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "bidOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEnglishPeriodicAuctionInternal.Bid",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateFeeFromBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "closeAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "currentBid",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEnglishPeriodicAuctionInternal.Bid",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "highestBid",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEnglishPeriodicAuctionInternal.Bid",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialPeriodStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_repossessor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialBidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialPeriodStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialPeriodStartTimeOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startingBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionLengthSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBidIncrement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidExtensionWindowLengthSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidExtensionSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokenCount",
          "type": "uint256"
        }
      ],
      "name": "initializeAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_repossessor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialBidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialPeriodStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialPeriodStartTimeOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startingBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionLengthSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBidIncrement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidExtensionWindowLengthSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidExtensionSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokenCount",
          "type": "uint256"
        }
      ],
      "name": "initializeAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isAuctionPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isReadyForTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBidIncrement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mintToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repossessor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionLengthSeconds",
          "type": "uint256"
        }
      ],
      "name": "setAuctionLengthSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_repossessor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_auctionLengthSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBidIncrement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidExtensionWindowLengthSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidExtensionSeconds",
          "type": "uint256"
        }
      ],
      "name": "setAuctionParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidExtensionSeconds",
          "type": "uint256"
        }
      ],
      "name": "setBidExtensionSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidExtensionWindowLengthSeconds",
          "type": "uint256"
        }
      ],
      "name": "setBidExtensionWindowLengthSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBidIncrement",
          "type": "uint256"
        }
      ],
      "name": "setMinBidIncrement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_repossessor",
          "type": "address"
        }
      ],
      "name": "setRepossessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf1d9cd73d5789192f2aad007098e4c010077d7fc2d8f4c7a031592bb41b8d9ee",
  "receipt": {
    "to": null,
    "from": "0xfF5Be16460704eFd0263dB1444Eaa216b77477c5",
    "contractAddress": "0xF4088860C03763B9b0B6e5C80D07530dE225D66f",
    "transactionIndex": 7,
    "gasUsed": "2256295",
    "logsBloom": "0x
    "blockHash": "0xd1922b7afd3d824a7ee93c2de5358a10b611d93a5b0dbbae4b5feeec11b09926",
    "transactionHash": "0xf1d9cd73d5789192f2aad007098e4c010077d7fc2d8f4c7a031592bb41b8d9ee",
    "logs": [],
    "blockNumber": 29068146,
    "cumulativeGasUsed": "3464739",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "af64c17cfc77993eb6c0348792079092",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winningBidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"AuctionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionLengthSeconds\",\"type\":\"uint256\"}],\"name\":\"AuctionLengthSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidExtensionSeconds\",\"type\":\"uint256\"}],\"name\":\"BidExtensionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidExtensionWindowLengthSeconds\",\"type\":\"uint256\"}],\"name\":\"BidExtensionWindowLengthSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPeriodStartTime\",\"type\":\"uint256\"}],\"name\":\"InitialPeriodStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidIncrement\",\"type\":\"uint256\"}],\"name\":\"MinBidIncrementSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"repossessor\",\"type\":\"address\"}],\"name\":\"RepossessorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"auctionEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionLengthSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"auctionStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidExtensionSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidExtensionWindowLengthSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"bidOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IEnglishPeriodicAuctionInternal.Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"calculateFeeFromBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"closeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"currentBid\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IEnglishPeriodicAuctionInternal.Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"highestBid\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IEnglishPeriodicAuctionInternal.Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialPeriodStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_repossessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialPeriodStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialPeriodStartTimeOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionLengthSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidExtensionWindowLengthSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidExtensionSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokenCount\",\"type\":\"uint256\"}],\"name\":\"initializeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_repossessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialPeriodStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialPeriodStartTimeOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionLengthSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidExtensionWindowLengthSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidExtensionSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokenCount\",\"type\":\"uint256\"}],\"name\":\"initializeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isAuctionPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isReadyForTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repossessor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionLengthSeconds\",\"type\":\"uint256\"}],\"name\":\"setAuctionLengthSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_repossessor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_auctionLengthSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidExtensionWindowLengthSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidExtensionSeconds\",\"type\":\"uint256\"}],\"name\":\"setAuctionParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidExtensionSeconds\",\"type\":\"uint256\"}],\"name\":\"setBidExtensionSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidExtensionWindowLengthSeconds\",\"type\":\"uint256\"}],\"name\":\"setBidExtensionWindowLengthSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBidIncrement\",\"type\":\"uint256\"}],\"name\":\"setMinBidIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_repossessor\",\"type\":\"address\"}],\"name\":\"setRepossessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"EnglishPeriodicAuctionFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"auctionEndTime(uint256)\":{\"notice\":\"Get auction end time\"},\"auctionLengthSeconds()\":{\"notice\":\"Get auction length\"},\"auctionStartTime(uint256)\":{\"notice\":\"Get auction start time\"},\"bidExtensionSeconds()\":{\"notice\":\"Get bid extension seconds\"},\"bidExtensionWindowLengthSeconds()\":{\"notice\":\"Get bid extension window length\"},\"bidOf(uint256,address)\":{\"notice\":\"Get bid for address\"},\"calculateFeeFromBid(uint256)\":{\"notice\":\"Calculate fee from bid\"},\"closeAuction(uint256)\":{\"notice\":\"Close auction and trigger a transfer to the highest bidder\"},\"currentBid(uint256)\":{\"notice\":\"Get current bid\"},\"highestBid(uint256)\":{\"notice\":\"Get highest outstanding bid\"},\"initialPeriodStartTime()\":{\"notice\":\"Get initial period start time\"},\"initializeAuction(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize auction parameters with owner\"},\"initializeAuction(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize auction parameters\"},\"isAuctionPeriod(uint256)\":{\"notice\":\"Get is auction period\"},\"isReadyForTransfer(uint256)\":{\"notice\":\"Is token ready for transfer\"},\"maxTokenCount()\":{\"notice\":\"Get max token count\"},\"minBidIncrement()\":{\"notice\":\"Get minimum bid increment\"},\"mintToken(address,uint256)\":{\"notice\":\"Initial bidder can mint token if it doesn't exist\"},\"placeBid(uint256,uint256)\":{\"notice\":\"Place a bid\"},\"repossessor()\":{\"notice\":\"Get repossessor\"},\"setAuctionLengthSeconds(uint256)\":{\"notice\":\"Set auction length\"},\"setAuctionParameters(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Set auction parameters\"},\"setBidExtensionSeconds(uint256)\":{\"notice\":\"Set bid extension seconds\"},\"setBidExtensionWindowLengthSeconds(uint256)\":{\"notice\":\"Set bid extension window length\"},\"setMinBidIncrement(uint256)\":{\"notice\":\"Set minimum bid increment\"},\"setRepossessor(address)\":{\"notice\":\"Set repossessor\"},\"withdrawBid(uint256)\":{\"notice\":\"Withdraw bid collateral\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/auction/facets/EnglishPeriodicAuctionFacet.sol\":\"EnglishPeriodicAuctionFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC721Internal } from './IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721 is IERC721Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given address\\n     * @return balance quantity of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice query the owner of given token\\n     * @param tokenId token to query\\n     * @return owner token owner\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice grant approval to given account to spend token\\n     * @param operator address to be approved\\n     * @param tokenId token to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external payable;\\n\\n    /**\\n     * @notice get approval status for given token\\n     * @param tokenId token to query\\n     * @return operator address approved to spend token\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given account to spend all tokens held by sender\\n     * @param operator address to be approved\\n     * @param status approval status\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return status whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool status);\\n}\\n\",\"keccak256\":\"0xa14655a5bdee327bc019b583b04480e8542fa6b0788e5569077ec54805d1463a\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC721 interface needed by internal functions\\n */\\ninterface IERC721Internal {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed operator,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x8d46d596fa0e48cdcbf8bb8d6a42120351c4d1b002156bf647f95523178cbe08\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xba7b4d73d42dfc9f8083ce36aed0fa2c56c73878d8bda7d64f2fb908d5e04636\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Internal } from '../../../interfaces/IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721BaseInternal is IERC721Internal {\\n    error ERC721Base__NotOwnerOrApproved();\\n    error ERC721Base__SelfApproval();\\n    error ERC721Base__BalanceQueryZeroAddress();\\n    error ERC721Base__ERC721ReceiverNotImplemented();\\n    error ERC721Base__InvalidOwner();\\n    error ERC721Base__MintToZeroAddress();\\n    error ERC721Base__NonExistentToken();\\n    error ERC721Base__NotTokenOwner();\\n    error ERC721Base__TokenAlreadyMinted();\\n    error ERC721Base__TransferToZeroAddress();\\n}\\n\",\"keccak256\":\"0x3118e4b75bc32c0c5b1f7aca49d30bf618966260179d848171b2ce3e3e0b5373\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata interface\\n */\\ninterface IERC721Metadata is IERC721MetadataInternal {\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x281dd4dbf81c3acf12bf43bc6e0f77ae68cb2764450cce8121a53c061bf87960\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721BaseInternal } from '../base/IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal interface\\n */\\ninterface IERC721MetadataInternal is IERC721BaseInternal {\\n    error ERC721Metadata__NonExistentToken();\\n}\\n\",\"keccak256\":\"0xd420b4227db773f26b0e40cb6ea4819d340d0ee5ea59d6321c27e79ae7ecca86\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/allowlist/IAllowlistReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IAllowlistReadable\\n */\\ninterface IAllowlistReadable {\\n    /**\\n     * @notice Check if address is allowed\\n     */\\n    function isAllowed(address _address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6e8241b3bfa7a83ab1111191d049cd41cc672df0d4dea0581696efdc20aefd82\",\"license\":\"MIT\"},\"contracts/auction/EnglishPeriodicAuctionInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { EnglishPeriodicAuctionStorage } from './EnglishPeriodicAuctionStorage.sol';\\nimport { IPeriodicPCOParamsReadable } from '../pco/IPeriodicPCOParamsReadable.sol';\\nimport { IStewardLicense } from '../license/IStewardLicense.sol';\\nimport { IBeneficiary } from '../beneficiary/IBeneficiary.sol';\\nimport { IEnglishPeriodicAuctionInternal } from './IEnglishPeriodicAuctionInternal.sol';\\n\\n/**\\n * @title EnglishPeriodicAuctionInternal\\n */\\nabstract contract EnglishPeriodicAuctionInternal is\\n    IEnglishPeriodicAuctionInternal\\n{\\n    /**\\n     * @notice Initialize parameters\\n     */\\n    function _initializeAuction(\\n        address repossessor,\\n        address initialBidder,\\n        uint256 initialPeriodStartTime,\\n        uint256 initialPeriodStartTimeOffset,\\n        uint256 startingBid,\\n        uint256 auctionLengthSeconds,\\n        uint256 minBidIncrement,\\n        uint256 bidExtensionWindowLengthSeconds,\\n        uint256 bidExtensionSeconds,\\n        uint256 maxTokenCount\\n    ) internal {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        l.isInitialized = true;\\n        l.maxTokenCount = maxTokenCount;\\n        l.initialBidder = initialBidder;\\n        l.startingBid = startingBid;\\n        l.initialPeriodStartTimeOffset = initialPeriodStartTimeOffset;\\n        l.initialPeriodStartTime = initialPeriodStartTime;\\n        _setRepossessor(repossessor);\\n        _setAuctionLengthSeconds(auctionLengthSeconds);\\n        _setMinBidIncrement(minBidIncrement);\\n        _setBidExtensionWindowLengthSeconds(bidExtensionWindowLengthSeconds);\\n        _setBidExtensionSeconds(bidExtensionSeconds);\\n    }\\n\\n    /**\\n     * @notice Set auction parameters\\n     */\\n    function _setAuctionParameters(\\n        address repossessor,\\n        uint256 auctionLengthSeconds,\\n        uint256 minBidIncrement,\\n        uint256 bidExtensionWindowLengthSeconds,\\n        uint256 bidExtensionSeconds\\n    ) internal {\\n        _setRepossessor(repossessor);\\n        _setAuctionLengthSeconds(auctionLengthSeconds);\\n        _setMinBidIncrement(minBidIncrement);\\n        _setBidExtensionWindowLengthSeconds(bidExtensionWindowLengthSeconds);\\n        _setBidExtensionSeconds(bidExtensionSeconds);\\n    }\\n\\n    /**\\n     * @notice Check if initialized\\n     */\\n    function _isInitialized() internal view returns (bool) {\\n        return EnglishPeriodicAuctionStorage.layout().isInitialized;\\n    }\\n\\n    /**\\n     * @notice Get max token count\\n     */\\n    function _maxTokenCount() internal view returns (uint256) {\\n        return EnglishPeriodicAuctionStorage.layout().maxTokenCount;\\n    }\\n\\n    /**\\n     * @notice Get repossessor\\n     */\\n    function _repossessor() internal view returns (address) {\\n        return EnglishPeriodicAuctionStorage.layout().repossessor;\\n    }\\n\\n    /**\\n     * @notice Set repossessor\\n     */\\n    function _setRepossessor(address repossessor) internal {\\n        EnglishPeriodicAuctionStorage.layout().repossessor = repossessor;\\n\\n        emit RepossessorSet(repossessor);\\n    }\\n\\n    /**\\n     * @notice Get initial period start time\\n     */\\n    function _initialPeriodStartTime() internal view returns (uint256) {\\n        return EnglishPeriodicAuctionStorage.layout().initialPeriodStartTime;\\n    }\\n\\n    /**\\n     * @notice Get auction length\\n     */\\n    function _auctionLengthSeconds() internal view returns (uint256) {\\n        return EnglishPeriodicAuctionStorage.layout().auctionLengthSeconds;\\n    }\\n\\n    /**\\n     * @notice Set auction length\\n     */\\n    function _setAuctionLengthSeconds(uint256 auctionLengthSeconds) internal {\\n        EnglishPeriodicAuctionStorage\\n            .layout()\\n            .auctionLengthSeconds = auctionLengthSeconds;\\n\\n        emit AuctionLengthSet(auctionLengthSeconds);\\n    }\\n\\n    /**\\n     * @notice Get minimum bid increment\\n     */\\n    function _minBidIncrement() internal view returns (uint256) {\\n        return EnglishPeriodicAuctionStorage.layout().minBidIncrement;\\n    }\\n\\n    /**\\n     * @notice Set minimum bid increment\\n     */\\n    function _setMinBidIncrement(uint256 minBidIncrement) internal {\\n        EnglishPeriodicAuctionStorage\\n            .layout()\\n            .minBidIncrement = minBidIncrement;\\n\\n        emit MinBidIncrementSet(minBidIncrement);\\n    }\\n\\n    /**\\n     * @notice Get bid extension window length\\n     */\\n    function _bidExtensionWindowLengthSeconds()\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            EnglishPeriodicAuctionStorage\\n                .layout()\\n                .bidExtensionWindowLengthSeconds;\\n    }\\n\\n    /**\\n     * @notice Set bid extension window length\\n     */\\n    function _setBidExtensionWindowLengthSeconds(\\n        uint256 bidExtensionWindowLengthSeconds\\n    ) internal {\\n        EnglishPeriodicAuctionStorage\\n            .layout()\\n            .bidExtensionWindowLengthSeconds = bidExtensionWindowLengthSeconds;\\n\\n        emit BidExtensionWindowLengthSet(bidExtensionWindowLengthSeconds);\\n    }\\n\\n    /**\\n     * @notice Get bid extension\\n     */\\n    function _bidExtensionSeconds() internal view returns (uint256) {\\n        return EnglishPeriodicAuctionStorage.layout().bidExtensionSeconds;\\n    }\\n\\n    /**\\n     * @notice Set bid extension\\n     */\\n    function _setBidExtensionSeconds(uint256 bidExtensionSeconds) internal {\\n        EnglishPeriodicAuctionStorage\\n            .layout()\\n            .bidExtensionSeconds = bidExtensionSeconds;\\n\\n        emit BidExtensionSet(bidExtensionSeconds);\\n    }\\n\\n    /**\\n     * @notice Get initial bidder\\n     */\\n    function _initialBidder() internal view returns (address) {\\n        return EnglishPeriodicAuctionStorage.layout().initialBidder;\\n    }\\n\\n    /**\\n     * @notice Get highest outstanding bid\\n     */\\n    function _highestBid(uint256 tokenId) internal view returns (Bid storage) {\\n        return EnglishPeriodicAuctionStorage.layout().highestBids[tokenId];\\n    }\\n\\n    /**\\n     * @notice Get current bid\\n     */\\n    function _currentBid(uint256 tokenId) internal view returns (Bid storage) {\\n        return EnglishPeriodicAuctionStorage.layout().currentBids[tokenId];\\n    }\\n\\n    /**\\n     * @notice Get bid for address\\n     */\\n    function _bidOf(\\n        uint256 tokenId,\\n        address bidder\\n    ) internal view returns (Bid storage) {\\n        return EnglishPeriodicAuctionStorage.layout().bids[tokenId][bidder];\\n    }\\n\\n    /**\\n     * @notice Get is auction period\\n     */\\n    function _isAuctionPeriod(uint256 tokenId) internal view returns (bool) {\\n        return block.timestamp >= _auctionStartTime(tokenId);\\n    }\\n\\n    /**\\n     * @notice Is token ready for transfer\\n     */\\n    function _isReadyForTransfer(uint256 tokenId) internal view returns (bool) {\\n        return block.timestamp >= _auctionEndTime(tokenId);\\n    }\\n\\n    /**\\n     * @notice Place a bid\\n     */\\n    function _placeBid(\\n        uint256 tokenId,\\n        address bidder,\\n        uint256 bidAmount,\\n        uint256 collateralAmount\\n    ) internal {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        Bid storage bid = l.bids[tokenId][bidder];\\n\\n        if (l.highestBids[tokenId].round == l.currentAuctionRound[tokenId]) {\\n            // Check if highest bid\\n            require(\\n                bidAmount >=\\n                    l.highestBids[tokenId].bidAmount + l.minBidIncrement,\\n                'EnglishPeriodicAuction: Bid amount must be greater than highest outstanding bid'\\n            );\\n        }\\n\\n        uint256 totalCollateralAmount;\\n        if (bid.round == l.currentAuctionRound[tokenId]) {\\n            // If bidder has bid for round, add to existing bid\\n            totalCollateralAmount = bid.collateralAmount + collateralAmount;\\n        } else {\\n            totalCollateralAmount = collateralAmount;\\n        }\\n\\n        uint256 feeAmount;\\n        address currentBidder;\\n        if (IStewardLicense(address(this)).exists(tokenId)) {\\n            currentBidder = IStewardLicense(address(this)).ownerOf(tokenId);\\n        } else {\\n            currentBidder = l.initialBidder;\\n        }\\n\\n        if (bidder == currentBidder) {\\n            // If current bidder, collateral is entire fee amount\\n            feeAmount = totalCollateralAmount;\\n        } else {\\n            require(\\n                totalCollateralAmount > bidAmount,\\n                'EnglishPeriodicAuction: Collateral must be greater than current bid'\\n            );\\n            // If new bidder, collateral is bidAmount + fee\\n            feeAmount = totalCollateralAmount - bidAmount;\\n        }\\n\\n        require(\\n            _checkBidAmount(bidAmount, feeAmount),\\n            'EnglishPeriodicAuction: Incorrect bid amount'\\n        );\\n\\n        // Save bid\\n        bid.bidder = bidder;\\n        bid.bidAmount = bidAmount;\\n        bid.round = l.currentAuctionRound[tokenId];\\n        bid.feeAmount = feeAmount;\\n        bid.collateralAmount = totalCollateralAmount;\\n\\n        l.highestBids[tokenId] = bid;\\n\\n        emit BidPlaced(tokenId, bid.round, bid.bidder, bid.bidAmount);\\n\\n        // Check if auction should extend\\n        uint256 auctionEndTime = _auctionEndTime(tokenId);\\n\\n        if (\\n            auctionEndTime >= block.timestamp &&\\n            auctionEndTime - block.timestamp <\\n            _bidExtensionWindowLengthSeconds()\\n        ) {\\n            uint256 auctionLengthSeconds;\\n            if (l.currentAuctionLength[tokenId] == 0) {\\n                auctionLengthSeconds = _auctionLengthSeconds();\\n            } else {\\n                auctionLengthSeconds = l.currentAuctionLength[tokenId];\\n            }\\n            // Extend auction\\n            l.currentAuctionLength[tokenId] =\\n                auctionLengthSeconds +\\n                _bidExtensionSeconds();\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw bid collateral if not highest bidder\\n     */\\n    function _withdrawBid(uint256 tokenId, address bidder) internal {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        address currentBidder;\\n        if (IStewardLicense(address(this)).exists(tokenId)) {\\n            currentBidder = IStewardLicense(address(this)).ownerOf(tokenId);\\n        } else {\\n            currentBidder = l.initialBidder;\\n        }\\n\\n        require(\\n            bidder != currentBidder,\\n            'EnglishPeriodicAuction: Cannot withdraw bid if current bidder'\\n        );\\n        require(\\n            bidder != l.highestBids[tokenId].bidder,\\n            'EnglishPeriodicAuction: Cannot withdraw bid if highest bidder'\\n        );\\n\\n        Bid storage bid = l.bids[tokenId][bidder];\\n\\n        require(\\n            bid.collateralAmount > 0,\\n            'EnglishPeriodicAuction: No collateral to withdraw'\\n        );\\n\\n        // Reset collateral and bid\\n        uint256 collateralAmount = bid.collateralAmount;\\n        bid.collateralAmount = 0;\\n        bid.bidAmount = 0;\\n\\n        // Transfer collateral back to bidder\\n        (bool success, ) = bidder.call{ value: collateralAmount }('');\\n        require(\\n            success,\\n            'EnglishPeriodicAuction: Failed to withdraw collateral'\\n        );\\n    }\\n\\n    /**\\n     * @notice Close auction and trigger a transfer to the highest bidder\\n     */\\n    function _closeAuction(uint256 tokenId) internal {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        address oldBidder;\\n        if (IStewardLicense(address(this)).exists(tokenId)) {\\n            oldBidder = IStewardLicense(address(this)).ownerOf(tokenId);\\n        } else {\\n            oldBidder = l.initialBidder;\\n        }\\n\\n        // Set lastPeriodEndTime to the end of the current auction period\\n        l.lastPeriodEndTime[tokenId] = block.timestamp;\\n\\n        if (l.highestBids[tokenId].bidder == address(0)) {\\n            // No bids were placed, transfer to reposssessor\\n            Bid storage repossessorBid = l.bids[tokenId][l.repossessor];\\n            repossessorBid.round = l.currentAuctionRound[tokenId];\\n            repossessorBid.bidAmount = 0;\\n            repossessorBid.collateralAmount = 0;\\n            repossessorBid.feeAmount = 0;\\n            repossessorBid.bidder = l.repossessor;\\n\\n            l.highestBids[tokenId] = repossessorBid;\\n        } else {\\n            // Transfer bid to previous bidder's collateral\\n            l.bids[tokenId][oldBidder].collateralAmount = l\\n                .highestBids[tokenId]\\n                .bidAmount;\\n        }\\n\\n        emit AuctionClosed(\\n            tokenId,\\n            l.currentAuctionRound[tokenId],\\n            l.highestBids[tokenId].bidder,\\n            oldBidder,\\n            l.highestBids[tokenId].bidAmount\\n        );\\n\\n        // Reset auction\\n        l.currentBids[tokenId] = l.highestBids[tokenId];\\n        l.bids[tokenId][l.highestBids[tokenId].bidder].collateralAmount = 0;\\n        l.currentBids[tokenId].collateralAmount = 0;\\n        l.currentAuctionLength[tokenId] = l.auctionLengthSeconds;\\n        l.currentAuctionRound[tokenId] = l.currentAuctionRound[tokenId] + 1;\\n\\n        // Transfer to highest bidder\\n        IStewardLicense(address(this)).triggerTransfer(\\n            oldBidder,\\n            l.highestBids[tokenId].bidder,\\n            tokenId\\n        );\\n\\n        // Distribute fee to beneficiary\\n        if (l.highestBids[tokenId].feeAmount > 0) {\\n            IBeneficiary(address(this)).distribute{\\n                value: l.highestBids[tokenId].feeAmount\\n            }();\\n        }\\n    }\\n\\n    /**\\n     * @notice Mint token if it doesn't exist\\n     */\\n    function _mintToken(address to, uint256 tokenId) internal {\\n        require(\\n            IStewardLicense(address(this)).exists(tokenId) == false,\\n            'EnglishPeriodicAuction: Token already exists'\\n        );\\n\\n        IStewardLicense(address(this)).triggerTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Get auction start time\\n     */\\n    function _auctionStartTime(\\n        uint256 tokenId\\n    ) internal view returns (uint256 auctionStartTime) {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        uint256 licensePeriod = IPeriodicPCOParamsReadable(address(this))\\n            .licensePeriod();\\n\\n        if (l.lastPeriodEndTime[tokenId] > l.initialPeriodStartTime) {\\n            // Auction starts after licensePeriod has elapsed\\n            auctionStartTime = l.lastPeriodEndTime[tokenId] + licensePeriod;\\n        } else {\\n            // Auction starts at initial time\\n            auctionStartTime =\\n                l.initialPeriodStartTime +\\n                (tokenId * l.initialPeriodStartTimeOffset);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get auction end time\\n     */\\n    function _auctionEndTime(\\n        uint256 tokenId\\n    ) internal view returns (uint256 auctionEndTime) {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        uint256 auctionLengthSeconds;\\n        if (l.currentAuctionLength[tokenId] == 0) {\\n            auctionLengthSeconds = _auctionLengthSeconds();\\n        } else {\\n            auctionLengthSeconds = l.currentAuctionLength[tokenId];\\n        }\\n\\n        auctionEndTime = _auctionStartTime(tokenId) + auctionLengthSeconds;\\n    }\\n\\n    /**\\n     * @notice Calculate fee from bid\\n     */\\n    function _calculateFeeFromBid(\\n        uint256 bidAmount\\n    ) internal view returns (uint256) {\\n        uint256 feeNumerator = IPeriodicPCOParamsReadable(address(this))\\n            .feeNumerator();\\n        uint256 feeDenominator = IPeriodicPCOParamsReadable(address(this))\\n            .feeDenominator();\\n\\n        return (bidAmount * feeNumerator) / feeDenominator;\\n    }\\n\\n    /**\\n     * @notice Check that fee is within rounding error of bid amount\\n     */\\n    function _checkBidAmount(\\n        uint256 bidAmount,\\n        uint256 feeAmount\\n    ) internal view returns (bool) {\\n        uint256 calculatedFeeAmount = _calculateFeeFromBid(bidAmount);\\n\\n        return calculatedFeeAmount == feeAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xe997cfb730839401c5ddfff2981298bc229e8b69f20f61485e041159328d6371\",\"license\":\"MIT\"},\"contracts/auction/EnglishPeriodicAuctionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IEnglishPeriodicAuctionInternal } from './IEnglishPeriodicAuctionInternal.sol';\\n\\nlibrary EnglishPeriodicAuctionStorage {\\n    struct Layout {\\n        bool isInitialized;\\n        // Same for all tokens\\n        address initialBidder;\\n        uint256 startingBid;\\n        address repossessor;\\n        uint256 initialPeriodStartTime;\\n        uint256 initialPeriodStartTimeOffset;\\n        uint256 auctionLengthSeconds;\\n        uint256 minBidIncrement;\\n        uint256 bidExtensionWindowLengthSeconds;\\n        uint256 bidExtensionSeconds;\\n        uint256 maxTokenCount;\\n        // Per token config\\n        mapping(uint256 => uint256) lastPeriodEndTime;\\n        mapping(uint256 => uint256) currentAuctionRound;\\n        mapping(uint256 => uint256) currentAuctionLength;\\n        mapping(uint256 => mapping(address => IEnglishPeriodicAuctionInternal.Bid)) bids;\\n        mapping(uint256 => IEnglishPeriodicAuctionInternal.Bid) currentBids;\\n        mapping(uint256 => IEnglishPeriodicAuctionInternal.Bid) highestBids;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256('pcoart.contracts.storage.EnglishPeriodicAuctionStorage');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3bc0d249f955551835ffaaeaeb00f48ffeb51dec2201c6f612543be82f3a44c8\",\"license\":\"MIT\"},\"contracts/auction/IEnglishPeriodicAuctionInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IEnglishPeriodicAuctionInternal\\n */\\ninterface IEnglishPeriodicAuctionInternal {\\n    struct Bid {\\n        uint256 round;\\n        address bidder;\\n        uint256 bidAmount;\\n        uint256 feeAmount;\\n        uint256 collateralAmount;\\n    }\\n\\n    event InitialPeriodStartTimeSet(uint256 initialPeriodStartTime);\\n    event RepossessorSet(address repossessor);\\n    event AuctionLengthSet(uint256 auctionLengthSeconds);\\n    event MinBidIncrementSet(uint256 minBidIncrement);\\n    event BidExtensionWindowLengthSet(uint256 bidExtensionWindowLengthSeconds);\\n    event BidExtensionSet(uint256 bidExtensionSeconds);\\n\\n    event BidPlaced(\\n        uint256 indexed tokenId,\\n        uint256 indexed round,\\n        address indexed bidder,\\n        uint256 bidAmount\\n    );\\n    event AuctionClosed(\\n        uint256 indexed tokenId,\\n        uint256 indexed round,\\n        address indexed winningBidder,\\n        address previousOwner,\\n        uint256 bidAmount\\n    );\\n}\\n\",\"keccak256\":\"0xf69bf9199c28961ec657ce4b1b15803bcd7c4961f969b41fd3d9da4339326fc8\",\"license\":\"MIT\"},\"contracts/auction/IPeriodicAuctionReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IPeriodicAuctionReadable\\n */\\ninterface IPeriodicAuctionReadable {\\n    /**\\n     * @notice Get is auction period\\n     */\\n    function isAuctionPeriod(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfbd8252cd641238b88562d7edaa5ee50678642951575f4debef948286d4e1ff2\",\"license\":\"MIT\"},\"contracts/auction/IPeriodicAuctionWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IPeriodicAuctionWritable\\n */\\ninterface IPeriodicAuctionWritable {\\n    /**\\n     * @notice Set repossessor\\n     */\\n    function setRepossessor(address _repossessor) external;\\n\\n    /**\\n     * @notice Set auction length\\n     */\\n    function setAuctionLengthSeconds(uint256 _auctionLengthSeconds) external;\\n\\n    /**\\n     * @notice Set minimum bid increment\\n     */\\n    function setMinBidIncrement(uint256 _minBidIncrement) external;\\n\\n    /**\\n     * @notice Set bid extension window length\\n     */\\n    function setBidExtensionWindowLengthSeconds(\\n        uint256 _bidExtensionWindowLengthSeconds\\n    ) external;\\n\\n    /**\\n     *  @notice Set bid extension seconds\\n     */\\n    function setBidExtensionSeconds(uint256 _bidExtensionSeconds) external;\\n}\\n\",\"keccak256\":\"0x9a93d7cb55bab5c399603883e66e1228efe2e68ca6b967d64dd446a431ff182e\",\"license\":\"MIT\"},\"contracts/auction/facets/EnglishPeriodicAuctionFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { EnglishPeriodicAuctionInternal } from '../EnglishPeriodicAuctionInternal.sol';\\nimport { IPeriodicAuctionReadable } from '../IPeriodicAuctionReadable.sol';\\nimport { IPeriodicAuctionWritable } from '../IPeriodicAuctionWritable.sol';\\nimport { IAllowlistReadable } from '../../allowlist/IAllowlistReadable.sol';\\nimport { ERC165BaseInternal } from '@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol';\\nimport { AccessControlInternal } from '@solidstate/contracts/access/access_control/AccessControlInternal.sol';\\n\\n/**\\n * @title EnglishPeriodicAuctionFacet\\n */\\ncontract EnglishPeriodicAuctionFacet is\\n    IPeriodicAuctionReadable,\\n    IPeriodicAuctionWritable,\\n    EnglishPeriodicAuctionInternal,\\n    AccessControlInternal,\\n    ERC165BaseInternal\\n{\\n    // Component role\\n    bytes32 internal constant COMPONENT_ROLE =\\n        keccak256('EnglishPeriodicAuctionFacet.COMPONENT_ROLE');\\n\\n    /**\\n     * @notice Initialize auction parameters\\n     */\\n    function initializeAuction(\\n        address _repossessor,\\n        address initialBidder,\\n        uint256 _initialPeriodStartTime,\\n        uint256 _initialPeriodStartTimeOffset,\\n        uint256 startingBid,\\n        uint256 _auctionLengthSeconds,\\n        uint256 _minBidIncrement,\\n        uint256 _bidExtensionWindowLengthSeconds,\\n        uint256 _bidExtensionSeconds,\\n        uint256 _maxTokenCount\\n    ) external {\\n        require(\\n            _isInitialized() == false,\\n            'EnglishPeriodicAuctionFacet: already initialized'\\n        );\\n\\n        _setSupportsInterface(type(IPeriodicAuctionReadable).interfaceId, true);\\n        _initializeAuction(\\n            _repossessor,\\n            initialBidder,\\n            _initialPeriodStartTime,\\n            _initialPeriodStartTimeOffset,\\n            startingBid,\\n            _auctionLengthSeconds,\\n            _minBidIncrement,\\n            _bidExtensionWindowLengthSeconds,\\n            _bidExtensionSeconds,\\n            _maxTokenCount\\n        );\\n    }\\n\\n    /**\\n     * @notice Initialize auction parameters with owner\\n     */\\n    function initializeAuction(\\n        address _owner,\\n        address _repossessor,\\n        address initialBidder,\\n        uint256 _initialPeriodStartTime,\\n        uint256 _initialPeriodStartTimeOffset,\\n        uint256 startingBid,\\n        uint256 _auctionLengthSeconds,\\n        uint256 _minBidIncrement,\\n        uint256 _bidExtensionWindowLengthSeconds,\\n        uint256 _bidExtensionSeconds,\\n        uint256 _maxTokenCount\\n    ) external {\\n        require(\\n            _isInitialized() == false,\\n            'EnglishPeriodicAuctionFacet: already initialized'\\n        );\\n\\n        _setSupportsInterface(type(IPeriodicAuctionReadable).interfaceId, true);\\n        _setSupportsInterface(type(IPeriodicAuctionWritable).interfaceId, true);\\n        _grantRole(COMPONENT_ROLE, _owner);\\n        _initializeAuction(\\n            _repossessor,\\n            initialBidder,\\n            _initialPeriodStartTime,\\n            _initialPeriodStartTimeOffset,\\n            startingBid,\\n            _auctionLengthSeconds,\\n            _minBidIncrement,\\n            _bidExtensionWindowLengthSeconds,\\n            _bidExtensionSeconds,\\n            _maxTokenCount\\n        );\\n    }\\n\\n    /**\\n     * @notice Set auction parameters\\n     */\\n    function setAuctionParameters(\\n        address _repossessor,\\n        uint256 _auctionLengthSeconds,\\n        uint256 _minBidIncrement,\\n        uint256 _bidExtensionWindowLengthSeconds,\\n        uint256 _bidExtensionSeconds\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setAuctionParameters(\\n            _repossessor,\\n            _auctionLengthSeconds,\\n            _minBidIncrement,\\n            _bidExtensionWindowLengthSeconds,\\n            _bidExtensionSeconds\\n        );\\n    }\\n\\n    /**\\n     * @notice Get max token count\\n     */\\n    function maxTokenCount() external view returns (uint256) {\\n        return _maxTokenCount();\\n    }\\n\\n    /**\\n     * @notice Get is auction period\\n     */\\n    function isAuctionPeriod(uint256 tokenId) external view returns (bool) {\\n        return _isAuctionPeriod(tokenId);\\n    }\\n\\n    /**\\n     * @notice Get initial period start time\\n     */\\n    function initialPeriodStartTime() external view returns (uint256) {\\n        return _initialPeriodStartTime();\\n    }\\n\\n    /**\\n     * @notice Is token ready for transfer\\n     */\\n    function isReadyForTransfer(uint256 tokenId) external view returns (bool) {\\n        return _isReadyForTransfer(tokenId);\\n    }\\n\\n    /**\\n     * @notice Place a bid\\n     */\\n    function placeBid(uint256 tokenId, uint256 bidAmount) external payable {\\n        require(\\n            _isAuctionPeriod(tokenId),\\n            'EnglishPeriodicAuction: can only place bid in auction period'\\n        );\\n        require(\\n            _isReadyForTransfer(tokenId) == false,\\n            'EnglishPeriodicAuction: auction is over and awaiting transfer'\\n        );\\n        require(\\n            IAllowlistReadable(address(this)).isAllowed(msg.sender),\\n            'EnglishPeriodicAuction: sender is not allowed to place bid'\\n        );\\n\\n        _placeBid(tokenId, msg.sender, bidAmount, msg.value);\\n    }\\n\\n    /**\\n     * @notice Withdraw bid collateral\\n     */\\n    function withdrawBid(uint256 tokenId) external {\\n        _withdrawBid(tokenId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Close auction and trigger a transfer to the highest bidder\\n     */\\n    function closeAuction(uint256 tokenId) external {\\n        require(\\n            _isReadyForTransfer(tokenId),\\n            'EnglishPeriodicAuction: auction is not over'\\n        );\\n\\n        _closeAuction(tokenId);\\n    }\\n\\n    /**\\n     * @notice Initial bidder can mint token if it doesn't exist\\n     */\\n    function mintToken(address to, uint256 tokenId) external {\\n        require(\\n            msg.sender == _initialBidder(),\\n            'EnglishPeriodicAuction: only initial bidder can mint token'\\n        );\\n        require(\\n            block.timestamp < _initialPeriodStartTime(),\\n            'EnglishPeriodicAuction: cannot mint after initial period start time'\\n        );\\n\\n        _mintToken(to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Calculate fee from bid\\n     */\\n    function calculateFeeFromBid(\\n        uint256 bidAmount\\n    ) external view returns (uint256) {\\n        return _calculateFeeFromBid(bidAmount);\\n    }\\n\\n    /**\\n     * @notice Get auction start time\\n     */\\n    function auctionStartTime(uint256 tokenId) external view returns (uint256) {\\n        return _auctionStartTime(tokenId);\\n    }\\n\\n    /**\\n     * @notice Get auction end time\\n     */\\n    function auctionEndTime(uint256 tokenId) external view returns (uint256) {\\n        return _auctionEndTime(tokenId);\\n    }\\n\\n    /**\\n     * @notice Get repossessor\\n     */\\n    function repossessor() external view returns (address) {\\n        return _repossessor();\\n    }\\n\\n    /**\\n     * @notice Set repossessor\\n     */\\n    function setRepossessor(\\n        address _repossessor\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setRepossessor(_repossessor);\\n    }\\n\\n    /**\\n     * @notice Get auction length\\n     */\\n    function auctionLengthSeconds() external view returns (uint256) {\\n        return _auctionLengthSeconds();\\n    }\\n\\n    /**\\n     * @notice Set auction length\\n     */\\n    function setAuctionLengthSeconds(\\n        uint256 _auctionLengthSeconds\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setAuctionLengthSeconds(_auctionLengthSeconds);\\n    }\\n\\n    /**\\n     * @notice Get minimum bid increment\\n     */\\n    function minBidIncrement() external view returns (uint256) {\\n        return _minBidIncrement();\\n    }\\n\\n    /**\\n     * @notice Set minimum bid increment\\n     */\\n    function setMinBidIncrement(\\n        uint256 _minBidIncrement\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setMinBidIncrement(_minBidIncrement);\\n    }\\n\\n    /**\\n     * @notice Get bid extension window length\\n     */\\n    function bidExtensionWindowLengthSeconds() external view returns (uint256) {\\n        return _bidExtensionWindowLengthSeconds();\\n    }\\n\\n    /**\\n     * @notice Set bid extension window length\\n     */\\n    function setBidExtensionWindowLengthSeconds(\\n        uint256 _bidExtensionWindowLengthSeconds\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setBidExtensionWindowLengthSeconds(_bidExtensionWindowLengthSeconds);\\n    }\\n\\n    /**\\n     *  @notice Get bid extension seconds\\n     */\\n    function bidExtensionSeconds() external view returns (uint256) {\\n        return _bidExtensionSeconds();\\n    }\\n\\n    /**\\n     *  @notice Set bid extension seconds\\n     */\\n    function setBidExtensionSeconds(\\n        uint256 _bidExtensionSeconds\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setBidExtensionSeconds(_bidExtensionSeconds);\\n    }\\n\\n    /**\\n     * @notice Get highest outstanding bid\\n     */\\n    function highestBid(uint256 tokenId) external view returns (Bid memory) {\\n        return _highestBid(tokenId);\\n    }\\n\\n    /**\\n     * @notice Get current bid\\n     */\\n    function currentBid(uint256 tokenId) external view returns (Bid memory) {\\n        return _currentBid(tokenId);\\n    }\\n\\n    /**\\n     * @notice Get bid for address\\n     */\\n    function bidOf(\\n        uint256 tokenId,\\n        address bidder\\n    ) external view returns (Bid memory) {\\n        return _bidOf(tokenId, bidder);\\n    }\\n}\\n\",\"keccak256\":\"0xab63bee8cd0d7874d12f6c19dc06fb1a7c4ba566bf5c206fbe4ad21a32bd34a2\",\"license\":\"MIT\"},\"contracts/beneficiary/IBeneficiary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IBeneficiary\\n */\\ninterface IBeneficiary {\\n    /**\\n     * @notice Distribute to beneficiaries\\n     */\\n    function distribute() external payable;\\n}\\n\",\"keccak256\":\"0x2d88d42a46846bb1b6b48357b41de7e51d2facae84dfea7079cf434c5c3f718b\",\"license\":\"MIT\"},\"contracts/license/IStewardLicense.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IERC721 } from '@solidstate/contracts/interfaces/IERC721.sol';\\nimport { IERC721Metadata } from '@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol';\\n\\n/**\\n * @title IStewardLicense\\n */\\ninterface IStewardLicense is IERC721, IERC721Metadata {\\n    /**\\n     * @notice Trigger transfer of license\\n     */\\n    function triggerTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @notice Check if token exists\\n     */\\n    function exists(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5c759ceff65350769016c89d48067f8168b7a1e3215555d4b5ffcabd23da57b8\",\"license\":\"MIT\"},\"contracts/pco/IPeriodicPCOParamsReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IPeriodicPCOParamsReadable\\n */\\ninterface IPeriodicPCOParamsReadable {\\n    /**\\n     * @notice Get license period\\n     */\\n    function licensePeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Get fee numerator\\n     */\\n    function feeNumerator() external view returns (uint256);\\n\\n    /**\\n     * @notice Get fee denominator\\n     */\\n    function feeDenominator() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xde96c17a825e6c25f5e18fe6d2307537d0fb67e5fa50dac3ff48a53216318a6e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506127dd806100206000396000f3fe60806040526004361061019c5760003560e01c806361a7a226116100ec578063b14c63c51161008a578063c3bab64611610064578063c3bab646146104c4578063c4e627c2146104d9578063dba85ccb146104ee578063df6ba5c61461050e57600080fd5b8063b14c63c51461047a578063be6a2a6d1461049a578063bff82198146104af57600080fd5b806379c65068116100c657806379c65068146103ea578063868c54661461040a578063a7c12c111461042a578063aa084ada1461045a57600080fd5b806361a7a2261461037d57806371c65bde1461039d578063777de704146103ca57600080fd5b80633c7cfe341161015957806355ee09d71161013357806355ee09d71461030a57806357c90de51461032a5780635d01f2131461033d578063609e46fb1461035d57600080fd5b80633c7cfe34146102b55780634cc31cbc146102d557806355cc19ea146102f557600080fd5b80630eaaf4c8146101a1578063236ed8f3146101c357806324db4190146101e357806328e05bf11461020357806333465c5f14610272578063335b115e146102a0575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004612353565b61052e565b005b3480156101cf57600080fd5b506101c16101de366004612353565b61053b565b3480156101ef57600080fd5b506101c16101fe366004612381565b6105b2565b34801561020f57600080fd5b5061022361021e36600461239e565b6105d7565b6040516102699190815181526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080918201519181019190915260a00190565b60405180910390f35b34801561027e57600080fd5b5061029261028d366004612353565b610634565b604051908152602001610269565b3480156102ac57600080fd5b5061029261063f565b3480156102c157600080fd5b506102236102d0366004612353565b61064e565b3480156102e157600080fd5b506101c16102f03660046123ce565b6106a7565b34801561030157600080fd5b506102926106d4565b34801561031657600080fd5b506101c1610325366004612353565b6106de565b6101c1610338366004612412565b6106ff565b34801561034957600080fd5b506101c1610358366004612434565b6108d3565b34801561036957600080fd5b506101c1610378366004612353565b610928565b34801561038957600080fd5b506101c1610398366004612353565b610949565b3480156103a957600080fd5b506103b261096a565b6040516001600160a01b039091168152602001610269565b3480156103d657600080fd5b506102926103e5366004612353565b610974565b3480156103f657600080fd5b506101c16104053660046124b2565b61097f565b34801561041657600080fd5b50610292610425366004612353565b610a9f565b34801561043657600080fd5b5061044a610445366004612353565b610aaa565b6040519015158152602001610269565b34801561046657600080fd5b506101c16104753660046124de565b610ab5565b34801561048657600080fd5b50610223610495366004612353565b610b35565b3480156104a657600080fd5b50610292610b46565b3480156104bb57600080fd5b50610292610b50565b3480156104d057600080fd5b50610292610b5a565b3480156104e557600080fd5b50610292610b64565b3480156104fa57600080fd5b506101c1610509366004612353565b610b6e565b34801561051a57600080fd5b5061044a610529366004612353565b610b8f565b6105388133610b9a565b50565b61054481610f0e565b6105a95760405162461bcd60e51b815260206004820152602b60248201527f456e676c697368506572696f64696341756374696f6e3a2061756374696f6e2060448201526a34b9903737ba1037bb32b960a91b60648201526084015b60405180910390fd5b61053881610f22565b6000805160206127888339815191526105ca816113f1565b6105d3826113fb565b5050565b6105df61231b565b6105e9838361145a565b6040805160a0810182528254815260018301546001600160a01b0316602082015260028301549181019190915260038201546060820152600490910154608082015290505b92915050565b600061062e8261148d565b6000610649611568565b905090565b61065661231b565b61065f8261157b565b6040805160a0810182528254815260018301546001600160a01b0316602082015260028301549181019190915260038201546060820152600490910154608082015292915050565b6000805160206127888339815191526106bf816113f1565b6106cc8686868686611598565b505050505050565b60006106496115cc565b6000805160206127888339815191526106f6816113f1565b6105d3826115df565b6107088261161c565b61077a5760405162461bcd60e51b815260206004820152603c60248201527f456e676c697368506572696f64696341756374696f6e3a2063616e206f6e6c7960448201527f20706c6163652062696420696e2061756374696f6e20706572696f640000000060648201526084016105a0565b61078382610f0e565b156107f65760405162461bcd60e51b815260206004820152603d60248201527f456e676c697368506572696f64696341756374696f6e3a2061756374696f6e2060448201527f6973206f76657220616e64206177616974696e67207472616e7366657200000060648201526084016105a0565b60405163babcc53960e01b8152336004820152309063babcc53990602401602060405180830381865afa158015610831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108559190612572565b6108c75760405162461bcd60e51b815260206004820152603a60248201527f456e676c697368506572696f64696341756374696f6e3a2073656e646572206960448201527f73206e6f7420616c6c6f77656420746f20706c6163652062696400000000000060648201526084016105a0565b6105d382338334611627565b6108db611b36565b156108f85760405162461bcd60e51b81526004016105a090612594565b61090a63a7c12c1160e01b6001611b49565b61091c8a8a8a8a8a8a8a8a8a8a611bbf565b50505050505050505050565b600080516020612788833981519152610940816113f1565b6105d382611c31565b600080516020612788833981519152610961816113f1565b6105d382611c6e565b6000610649611cab565b600061062e82611cc7565b610987611d23565b6001600160a01b0316336001600160a01b031614610a0d5760405162461bcd60e51b815260206004820152603a60248201527f456e676c697368506572696f64696341756374696f6e3a206f6e6c7920696e6960448201527f7469616c206269646465722063616e206d696e7420746f6b656e00000000000060648201526084016105a0565b610a15611d41565b4210610a955760405162461bcd60e51b815260206004820152604360248201527f456e676c697368506572696f64696341756374696f6e3a2063616e6e6f74206d60448201527f696e7420616674657220696e697469616c20706572696f642073746172742074606482015262696d6560e81b608482015260a4016105a0565b6105d38282611d54565b600061062e82611e79565b600061062e8261161c565b610abd611b36565b15610ada5760405162461bcd60e51b81526004016105a090612594565b610aec63a7c12c1160e01b6001611b49565b610afe63aba4f05160e01b6001611b49565b610b166000805160206127888339815191528c611f5b565b610b288a8a8a8a8a8a8a8a8a8a611bbf565b5050505050505050505050565b610b3d61231b565b61065f82611fcf565b6000610649611d41565b6000610649611fec565b6000610649611fff565b6000610649612012565b600080516020612788833981519152610b86816113f1565b6105d382612025565b600061062e82610f0e565b6000610ba4612062565b604051634f558e7960e01b8152600481018590529091506000903090634f558e7990602401602060405180830381865afa158015610be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0a9190612572565b15610c76576040516331a9108f60e11b8152600481018590523090636352211e90602401602060405180830381865afa158015610c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6f91906125e4565b9050610c88565b50805461010090046001600160a01b03165b806001600160a01b0316836001600160a01b031603610d0f5760405162461bcd60e51b815260206004820152603d60248201527f456e676c697368506572696f64696341756374696f6e3a2043616e6e6f74207760448201527f69746864726177206269642069662063757272656e742062696464657200000060648201526084016105a0565b6000848152600f830160205260409020600101546001600160a01b0390811690841603610da45760405162461bcd60e51b815260206004820152603d60248201527f456e676c697368506572696f64696341756374696f6e3a2043616e6e6f74207760448201527f697468647261772062696420696620686967686573742062696464657200000060648201526084016105a0565b6000848152600d8301602090815260408083206001600160a01b038716845290915290206004810154610e335760405162461bcd60e51b815260206004820152603160248201527f456e676c697368506572696f64696341756374696f6e3a204e6f20636f6c6c61604482015270746572616c20746f20776974686472617760781b60648201526084016105a0565b600481018054600091829055600283018290556040519091906001600160a01b0387169083908381818185875af1925050503d8060008114610e91576040519150601f19603f3d011682016040523d82523d6000602084013e610e96565b606091505b5050905080610f055760405162461bcd60e51b815260206004820152603560248201527f456e676c697368506572696f64696341756374696f6e3a204661696c656420746044820152741bc81dda5d1a191c985dc818dbdb1b185d195c985b605a1b60648201526084016105a0565b50505050505050565b6000610f1982611cc7565b42101592915050565b6000610f2c612062565b604051634f558e7960e01b8152600481018490529091506000903090634f558e7990602401602060405180830381865afa158015610f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f929190612572565b15610ffe576040516331a9108f60e11b8152600481018490523090636352211e90602401602060405180830381865afa158015610fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff791906125e4565b9050611010565b50805461010090046001600160a01b03165b6000838152600a830160209081526040808320429055600f85019091529020600101546001600160a01b031661119657600082600d01600085815260200190815260200160002060008460020160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020905082600b0160008581526020019081526020016000205481600001819055506000816002018190555060008160040181905550600081600301819055508260020160009054906101000a90046001600160a01b03168160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508083600f016000868152602001908152602001600020600082015481600001556001820160009054906101000a90046001600160a01b03168160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600282015481600201556003820154816003015560048201548160040155905050506111cd565b6000838152600f83016020908152604080832060020154600d860183528184206001600160a01b0386168552909252909120600401555b6000838152600f8301602081815260408084206001810154600b8801845294829020549383526002015481516001600160a01b03878116825293810191909152919093169286917fdae3b66c823bbdbd53155f9bb3e7693f818e957f816fe910b303fdbe7fa37dab910160405180910390a46000838152600f830160209081526040808320600e86018352818420815481556001808301805482840180546001600160a01b0319166001600160a01b039283161790556002808601549085015560038086015490850155600494850154938501938455600d8a018752858820915416875285528386209092018590558785528490556005860154600c8701845282852055600b8601909252909120546112e591612617565b6000848152600b84016020908152604080832093909355600f8501905281902060010154905163e31a7c0160e01b81526001600160a01b038084166004830152909116602482015260448101849052309063e31a7c0190606401600060405180830381600087803b15801561135957600080fd5b505af115801561136d573d6000803e3d6000fd5b5050506000848152600f840160205260409020600301541590506113ec576000838152600f8301602052604080822060030154815163e4fc6b6d60e01b81529151309363e4fc6b6d936004808201939182900301818588803b1580156113d257600080fd5b505af11580156113e6573d6000803e3d6000fd5b50505050505b505050565b6105388133612086565b80611404612062565b60020180546001600160a01b0319166001600160a01b0392831617905560405190821681527f03bb52851d1b668acbe31ec6258d6de44a14c1dc0d9db84ab95e8071f5aa989d906020015b60405180910390a150565b6000611464612062565b6000938452600d01602090815260408085206001600160a01b0394909416855292905250902090565b600080611498612062565b90506000306001600160a01b031663fd8e6f286040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fe919061262a565b60038301546000868152600a850160205260409020549192501015611540576000848152600a83016020526040902054611539908290612617565b9250611561565b600482015461154f9085612643565b826003015461155e9190612617565b92505b5050919050565b6000611572612062565b60060154905090565b6000611585612062565b6000928352600e01602052506040902090565b6115a1856113fb565b6115aa84611c6e565b6115b3836115df565b6115bc82612025565b6115c581611c31565b5050505050565b60006115d6612062565b60070154905090565b806115e8612062565b600601556040518181527f8092df692524f6b78c4746150cae83effcfd6b470cc0038f09a603d42a32388e9060200161144f565b6000610f198261148d565b6000611631612062565b6000868152600d8201602090815260408083206001600160a01b03891684528252808320898452600b8501835281842054600f86019093529220549293509091036117265760068201546000878152600f840160205260409020600201546116999190612617565b8410156117265760405162461bcd60e51b815260206004820152604f60248201527f456e676c697368506572696f64696341756374696f6e3a2042696420616d6f7560448201527f6e74206d7573742062652067726561746572207468616e20686967686573742060648201526e1bdd5d1cdd185b991a5b99c8189a59608a1b608482015260a4016105a0565b6000868152600b830160205260408120548254036117555783826004015461174e9190612617565b9050611758565b50825b604051634f558e7960e01b81526004810188905260009081903090634f558e7990602401602060405180830381865afa158015611799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bd9190612572565b15611829576040516331a9108f60e11b8152600481018a90523090636352211e90602401602060405180830381865afa1580156117fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182291906125e4565b905061183b565b50835461010090046001600160a01b03165b806001600160a01b0316886001600160a01b03160361185c578291506118ea565b8683116118dd5760405162461bcd60e51b815260206004820152604360248201527f456e676c697368506572696f64696341756374696f6e3a20436f6c6c6174657260448201527f616c206d7573742062652067726561746572207468616e2063757272656e7420606482015262189a5960ea1b608482015260a4016105a0565b6118e7878461265a565b91505b6118f487836120e8565b6119555760405162461bcd60e51b815260206004820152602c60248201527f456e676c697368506572696f64696341756374696f6e3a20496e636f7272656360448201526b1d08189a5908185b5bdd5b9d60a21b60648201526084016105a0565b878460010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555086846002018190555084600b0160008a81526020019081526020016000205484600001819055508184600301819055508284600401819055508385600f0160008b8152602001908152602001600020600082015481600001556001820160009054906101000a90046001600160a01b03168160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506002820154816002015560038201548160030155600482015481600401559050508360010160009054906101000a90046001600160a01b03166001600160a01b031684600001548a7f6f7e354ea3ab5c288aea37fce29c603f9a98a3b040f6d8f32f10e192ec47ff6a8760020154604051611a9491815260200190565b60405180910390a46000611aa78a611cc7565b9050428110158015611ac85750611abc6115cc565b611ac6428361265a565b105b1561091c5760008a8152600c870160205260408120548103611af357611aec611fff565b9050611b06565b5060008a8152600c870160205260409020545b611b0e611fec565b611b189082612617565b60008c8152600c890160205260409020555050505050505050505050565b6000611b40612062565b5460ff16919050565b6001600160e01b03198083169003611b745760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b6000611bc9612062565b80546009820184905560016001600160a81b03199091166101006001600160a01b038e16021781178255810188905560048101899055600381018a90559050611c118b6113fb565b611c1a86611c6e565b611c23856115df565b611c2c84612025565b610b28835b80611c3a612062565b600801556040518181527f33178f49ae33ce72b1c9e38d72f4ae326b490e4e7c9e02b8735a9ceacf770dee9060200161144f565b80611c77612062565b600501556040518181527f99578d7fe3e20e279feceaa076eb8032d475ca1a49391ec0a740445152a597139060200161144f565b6000611cb5612062565b600201546001600160a01b0316919050565b600080611cd2612062565b6000848152600c82016020526040812054919250908103611cfc57611cf5611fff565b9050611d0f565b506000838152600c820160205260409020545b80611d198561148d565b61155e9190612617565b6000611d2d612062565b5461010090046001600160a01b0316919050565b6000611d4b612062565b60030154905090565b604051634f558e7960e01b8152600481018290523090634f558e7990602401602060405180830381865afa158015611d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db49190612572565b15611e165760405162461bcd60e51b815260206004820152602c60248201527f456e676c697368506572696f64696341756374696f6e3a20546f6b656e20616c60448201526b72656164792065786973747360a01b60648201526084016105a0565b60405163e31a7c0160e01b8152600060048201526001600160a01b038316602482015260448101829052309063e31a7c0190606401600060405180830381600087803b158015611e6557600080fd5b505af11580156106cc573d6000803e3d6000fd5b600080306001600160a01b031663e86dea4a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ede919061262a565b90506000306001600160a01b031663180b0d7e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f44919061262a565b905080611f518386612643565b61155e919061266d565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c62281160205260409020611f9290826120fe565b5060405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b6000611fd9612062565b6000928352600f01602052506040902090565b6000611ff6612062565b60080154905090565b6000612009612062565b60050154905090565b600061201c612062565b60090154905090565b8061202e612062565b600701556040518181527f19ba737fa8db769049b6dafc98d3391bdead47e7f6617113c775efbed1efc6f99060200161144f565b7fc7ed1b841b2d3c7f16d15642e7b013e89732e44006608d59c7547b8e331a7ce090565b612090828261211a565b6105d3576120a6816001600160a01b0316612173565b6120b1836020612185565b6040516020016120c29291906126b3565b60408051601f198184030181529082905262461bcd60e51b82526105a091600401612728565b6000806120f484611e79565b9092149392505050565b6000612113836001600160a01b0384166122d8565b9392505050565b6000612113827fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811600086815260209190915260409020906001600160a01b03811660009081526001830160205260408120541515612113565b606061062e6001600160a01b03831660145b60606000612194836002612643565b61219f906002612617565b67ffffffffffffffff8111156121b7576121b761275b565b6040519080825280601f01601f1916602001820160405280156121e1576020820181803683370190505b509050600360fc1b816000815181106121fc576121fc612771565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061222b5761222b612771565b60200101906001600160f81b031916908160001a905350600160028402015b60018111156122b8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061227b5761227b612771565b1a60f81b82828151811061229157612291612771565b60200101906001600160f81b031916908160001a90535060049490941c936000190161224a565b5083156121135760405163c913478560e01b815260040160405180910390fd5b600081815260018301602052604081205461062e575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b6040518060a001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b60006020828403121561236557600080fd5b5035919050565b6001600160a01b038116811461053857600080fd5b60006020828403121561239357600080fd5b81356121138161236c565b600080604083850312156123b157600080fd5b8235915060208301356123c38161236c565b809150509250929050565b600080600080600060a086880312156123e657600080fd5b85356123f18161236c565b97602087013597506040870135966060810135965060800135945092505050565b6000806040838503121561242557600080fd5b50508035926020909101359150565b6000806000806000806000806000806101408b8d03121561245457600080fd5b8a3561245f8161236c565b995060208b013561246f8161236c565b999c999b505050506040880135976060810135976080820135975060a0820135965060c0820135955060e082013594506101008201359350610120909101359150565b600080604083850312156124c557600080fd5b82356124d08161236c565b946020939093013593505050565b60008060008060008060008060008060006101608c8e03121561250057600080fd5b8b3561250b8161236c565b9a5060208c013561251b8161236c565b995060408c013561252b8161236c565b9a9d999c50999a60608101359a5060808101359960a0820135995060c0820135985060e0820135975061010082013596506101208201359550610140909101359350915050565b60006020828403121561258457600080fd5b8151801515811461211357600080fd5b60208082526030908201527f456e676c697368506572696f64696341756374696f6e46616365743a20616c7260408201526f1958591e481a5b9a5d1a585b1a5e995960821b606082015260800190565b6000602082840312156125f657600080fd5b81516121138161236c565b634e487b7160e01b600052601160045260246000fd5b8082018082111561062e5761062e612601565b60006020828403121561263c57600080fd5b5051919050565b808202811582820484141761062e5761062e612601565b8181038181111561062e5761062e612601565b60008261268a57634e487b7160e01b600052601260045260246000fd5b500490565b60005b838110156126aa578181015183820152602001612692565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516126eb81601785016020880161268f565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161271c81602884016020880161268f565b01602801949350505050565b602081526000825180602084015261274781604085016020870161268f565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfe27d47e2aa570d0f5aa1d72abbe4d60032a12e3514b8c2bc8a49a9968779054c2a2646970667358221220ad10329bde82ddafa5174dc5abdde2b5dc286d9abfbfa46786c9b9c0a0bddc2764736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c806361a7a226116100ec578063b14c63c51161008a578063c3bab64611610064578063c3bab646146104c4578063c4e627c2146104d9578063dba85ccb146104ee578063df6ba5c61461050e57600080fd5b8063b14c63c51461047a578063be6a2a6d1461049a578063bff82198146104af57600080fd5b806379c65068116100c657806379c65068146103ea578063868c54661461040a578063a7c12c111461042a578063aa084ada1461045a57600080fd5b806361a7a2261461037d57806371c65bde1461039d578063777de704146103ca57600080fd5b80633c7cfe341161015957806355ee09d71161013357806355ee09d71461030a57806357c90de51461032a5780635d01f2131461033d578063609e46fb1461035d57600080fd5b80633c7cfe34146102b55780634cc31cbc146102d557806355cc19ea146102f557600080fd5b80630eaaf4c8146101a1578063236ed8f3146101c357806324db4190146101e357806328e05bf11461020357806333465c5f14610272578063335b115e146102a0575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004612353565b61052e565b005b3480156101cf57600080fd5b506101c16101de366004612353565b61053b565b3480156101ef57600080fd5b506101c16101fe366004612381565b6105b2565b34801561020f57600080fd5b5061022361021e36600461239e565b6105d7565b6040516102699190815181526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080918201519181019190915260a00190565b60405180910390f35b34801561027e57600080fd5b5061029261028d366004612353565b610634565b604051908152602001610269565b3480156102ac57600080fd5b5061029261063f565b3480156102c157600080fd5b506102236102d0366004612353565b61064e565b3480156102e157600080fd5b506101c16102f03660046123ce565b6106a7565b34801561030157600080fd5b506102926106d4565b34801561031657600080fd5b506101c1610325366004612353565b6106de565b6101c1610338366004612412565b6106ff565b34801561034957600080fd5b506101c1610358366004612434565b6108d3565b34801561036957600080fd5b506101c1610378366004612353565b610928565b34801561038957600080fd5b506101c1610398366004612353565b610949565b3480156103a957600080fd5b506103b261096a565b6040516001600160a01b039091168152602001610269565b3480156103d657600080fd5b506102926103e5366004612353565b610974565b3480156103f657600080fd5b506101c16104053660046124b2565b61097f565b34801561041657600080fd5b50610292610425366004612353565b610a9f565b34801561043657600080fd5b5061044a610445366004612353565b610aaa565b6040519015158152602001610269565b34801561046657600080fd5b506101c16104753660046124de565b610ab5565b34801561048657600080fd5b50610223610495366004612353565b610b35565b3480156104a657600080fd5b50610292610b46565b3480156104bb57600080fd5b50610292610b50565b3480156104d057600080fd5b50610292610b5a565b3480156104e557600080fd5b50610292610b64565b3480156104fa57600080fd5b506101c1610509366004612353565b610b6e565b34801561051a57600080fd5b5061044a610529366004612353565b610b8f565b6105388133610b9a565b50565b61054481610f0e565b6105a95760405162461bcd60e51b815260206004820152602b60248201527f456e676c697368506572696f64696341756374696f6e3a2061756374696f6e2060448201526a34b9903737ba1037bb32b960a91b60648201526084015b60405180910390fd5b61053881610f22565b6000805160206127888339815191526105ca816113f1565b6105d3826113fb565b5050565b6105df61231b565b6105e9838361145a565b6040805160a0810182528254815260018301546001600160a01b0316602082015260028301549181019190915260038201546060820152600490910154608082015290505b92915050565b600061062e8261148d565b6000610649611568565b905090565b61065661231b565b61065f8261157b565b6040805160a0810182528254815260018301546001600160a01b0316602082015260028301549181019190915260038201546060820152600490910154608082015292915050565b6000805160206127888339815191526106bf816113f1565b6106cc8686868686611598565b505050505050565b60006106496115cc565b6000805160206127888339815191526106f6816113f1565b6105d3826115df565b6107088261161c565b61077a5760405162461bcd60e51b815260206004820152603c60248201527f456e676c697368506572696f64696341756374696f6e3a2063616e206f6e6c7960448201527f20706c6163652062696420696e2061756374696f6e20706572696f640000000060648201526084016105a0565b61078382610f0e565b156107f65760405162461bcd60e51b815260206004820152603d60248201527f456e676c697368506572696f64696341756374696f6e3a2061756374696f6e2060448201527f6973206f76657220616e64206177616974696e67207472616e7366657200000060648201526084016105a0565b60405163babcc53960e01b8152336004820152309063babcc53990602401602060405180830381865afa158015610831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108559190612572565b6108c75760405162461bcd60e51b815260206004820152603a60248201527f456e676c697368506572696f64696341756374696f6e3a2073656e646572206960448201527f73206e6f7420616c6c6f77656420746f20706c6163652062696400000000000060648201526084016105a0565b6105d382338334611627565b6108db611b36565b156108f85760405162461bcd60e51b81526004016105a090612594565b61090a63a7c12c1160e01b6001611b49565b61091c8a8a8a8a8a8a8a8a8a8a611bbf565b50505050505050505050565b600080516020612788833981519152610940816113f1565b6105d382611c31565b600080516020612788833981519152610961816113f1565b6105d382611c6e565b6000610649611cab565b600061062e82611cc7565b610987611d23565b6001600160a01b0316336001600160a01b031614610a0d5760405162461bcd60e51b815260206004820152603a60248201527f456e676c697368506572696f64696341756374696f6e3a206f6e6c7920696e6960448201527f7469616c206269646465722063616e206d696e7420746f6b656e00000000000060648201526084016105a0565b610a15611d41565b4210610a955760405162461bcd60e51b815260206004820152604360248201527f456e676c697368506572696f64696341756374696f6e3a2063616e6e6f74206d60448201527f696e7420616674657220696e697469616c20706572696f642073746172742074606482015262696d6560e81b608482015260a4016105a0565b6105d38282611d54565b600061062e82611e79565b600061062e8261161c565b610abd611b36565b15610ada5760405162461bcd60e51b81526004016105a090612594565b610aec63a7c12c1160e01b6001611b49565b610afe63aba4f05160e01b6001611b49565b610b166000805160206127888339815191528c611f5b565b610b288a8a8a8a8a8a8a8a8a8a611bbf565b5050505050505050505050565b610b3d61231b565b61065f82611fcf565b6000610649611d41565b6000610649611fec565b6000610649611fff565b6000610649612012565b600080516020612788833981519152610b86816113f1565b6105d382612025565b600061062e82610f0e565b6000610ba4612062565b604051634f558e7960e01b8152600481018590529091506000903090634f558e7990602401602060405180830381865afa158015610be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0a9190612572565b15610c76576040516331a9108f60e11b8152600481018590523090636352211e90602401602060405180830381865afa158015610c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6f91906125e4565b9050610c88565b50805461010090046001600160a01b03165b806001600160a01b0316836001600160a01b031603610d0f5760405162461bcd60e51b815260206004820152603d60248201527f456e676c697368506572696f64696341756374696f6e3a2043616e6e6f74207760448201527f69746864726177206269642069662063757272656e742062696464657200000060648201526084016105a0565b6000848152600f830160205260409020600101546001600160a01b0390811690841603610da45760405162461bcd60e51b815260206004820152603d60248201527f456e676c697368506572696f64696341756374696f6e3a2043616e6e6f74207760448201527f697468647261772062696420696620686967686573742062696464657200000060648201526084016105a0565b6000848152600d8301602090815260408083206001600160a01b038716845290915290206004810154610e335760405162461bcd60e51b815260206004820152603160248201527f456e676c697368506572696f64696341756374696f6e3a204e6f20636f6c6c61604482015270746572616c20746f20776974686472617760781b60648201526084016105a0565b600481018054600091829055600283018290556040519091906001600160a01b0387169083908381818185875af1925050503d8060008114610e91576040519150601f19603f3d011682016040523d82523d6000602084013e610e96565b606091505b5050905080610f055760405162461bcd60e51b815260206004820152603560248201527f456e676c697368506572696f64696341756374696f6e3a204661696c656420746044820152741bc81dda5d1a191c985dc818dbdb1b185d195c985b605a1b60648201526084016105a0565b50505050505050565b6000610f1982611cc7565b42101592915050565b6000610f2c612062565b604051634f558e7960e01b8152600481018490529091506000903090634f558e7990602401602060405180830381865afa158015610f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f929190612572565b15610ffe576040516331a9108f60e11b8152600481018490523090636352211e90602401602060405180830381865afa158015610fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff791906125e4565b9050611010565b50805461010090046001600160a01b03165b6000838152600a830160209081526040808320429055600f85019091529020600101546001600160a01b031661119657600082600d01600085815260200190815260200160002060008460020160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020905082600b0160008581526020019081526020016000205481600001819055506000816002018190555060008160040181905550600081600301819055508260020160009054906101000a90046001600160a01b03168160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508083600f016000868152602001908152602001600020600082015481600001556001820160009054906101000a90046001600160a01b03168160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600282015481600201556003820154816003015560048201548160040155905050506111cd565b6000838152600f83016020908152604080832060020154600d860183528184206001600160a01b0386168552909252909120600401555b6000838152600f8301602081815260408084206001810154600b8801845294829020549383526002015481516001600160a01b03878116825293810191909152919093169286917fdae3b66c823bbdbd53155f9bb3e7693f818e957f816fe910b303fdbe7fa37dab910160405180910390a46000838152600f830160209081526040808320600e86018352818420815481556001808301805482840180546001600160a01b0319166001600160a01b039283161790556002808601549085015560038086015490850155600494850154938501938455600d8a018752858820915416875285528386209092018590558785528490556005860154600c8701845282852055600b8601909252909120546112e591612617565b6000848152600b84016020908152604080832093909355600f8501905281902060010154905163e31a7c0160e01b81526001600160a01b038084166004830152909116602482015260448101849052309063e31a7c0190606401600060405180830381600087803b15801561135957600080fd5b505af115801561136d573d6000803e3d6000fd5b5050506000848152600f840160205260409020600301541590506113ec576000838152600f8301602052604080822060030154815163e4fc6b6d60e01b81529151309363e4fc6b6d936004808201939182900301818588803b1580156113d257600080fd5b505af11580156113e6573d6000803e3d6000fd5b50505050505b505050565b6105388133612086565b80611404612062565b60020180546001600160a01b0319166001600160a01b0392831617905560405190821681527f03bb52851d1b668acbe31ec6258d6de44a14c1dc0d9db84ab95e8071f5aa989d906020015b60405180910390a150565b6000611464612062565b6000938452600d01602090815260408085206001600160a01b0394909416855292905250902090565b600080611498612062565b90506000306001600160a01b031663fd8e6f286040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fe919061262a565b60038301546000868152600a850160205260409020549192501015611540576000848152600a83016020526040902054611539908290612617565b9250611561565b600482015461154f9085612643565b826003015461155e9190612617565b92505b5050919050565b6000611572612062565b60060154905090565b6000611585612062565b6000928352600e01602052506040902090565b6115a1856113fb565b6115aa84611c6e565b6115b3836115df565b6115bc82612025565b6115c581611c31565b5050505050565b60006115d6612062565b60070154905090565b806115e8612062565b600601556040518181527f8092df692524f6b78c4746150cae83effcfd6b470cc0038f09a603d42a32388e9060200161144f565b6000610f198261148d565b6000611631612062565b6000868152600d8201602090815260408083206001600160a01b03891684528252808320898452600b8501835281842054600f86019093529220549293509091036117265760068201546000878152600f840160205260409020600201546116999190612617565b8410156117265760405162461bcd60e51b815260206004820152604f60248201527f456e676c697368506572696f64696341756374696f6e3a2042696420616d6f7560448201527f6e74206d7573742062652067726561746572207468616e20686967686573742060648201526e1bdd5d1cdd185b991a5b99c8189a59608a1b608482015260a4016105a0565b6000868152600b830160205260408120548254036117555783826004015461174e9190612617565b9050611758565b50825b604051634f558e7960e01b81526004810188905260009081903090634f558e7990602401602060405180830381865afa158015611799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bd9190612572565b15611829576040516331a9108f60e11b8152600481018a90523090636352211e90602401602060405180830381865afa1580156117fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182291906125e4565b905061183b565b50835461010090046001600160a01b03165b806001600160a01b0316886001600160a01b03160361185c578291506118ea565b8683116118dd5760405162461bcd60e51b815260206004820152604360248201527f456e676c697368506572696f64696341756374696f6e3a20436f6c6c6174657260448201527f616c206d7573742062652067726561746572207468616e2063757272656e7420606482015262189a5960ea1b608482015260a4016105a0565b6118e7878461265a565b91505b6118f487836120e8565b6119555760405162461bcd60e51b815260206004820152602c60248201527f456e676c697368506572696f64696341756374696f6e3a20496e636f7272656360448201526b1d08189a5908185b5bdd5b9d60a21b60648201526084016105a0565b878460010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555086846002018190555084600b0160008a81526020019081526020016000205484600001819055508184600301819055508284600401819055508385600f0160008b8152602001908152602001600020600082015481600001556001820160009054906101000a90046001600160a01b03168160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506002820154816002015560038201548160030155600482015481600401559050508360010160009054906101000a90046001600160a01b03166001600160a01b031684600001548a7f6f7e354ea3ab5c288aea37fce29c603f9a98a3b040f6d8f32f10e192ec47ff6a8760020154604051611a9491815260200190565b60405180910390a46000611aa78a611cc7565b9050428110158015611ac85750611abc6115cc565b611ac6428361265a565b105b1561091c5760008a8152600c870160205260408120548103611af357611aec611fff565b9050611b06565b5060008a8152600c870160205260409020545b611b0e611fec565b611b189082612617565b60008c8152600c890160205260409020555050505050505050505050565b6000611b40612062565b5460ff16919050565b6001600160e01b03198083169003611b745760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b6000611bc9612062565b80546009820184905560016001600160a81b03199091166101006001600160a01b038e16021781178255810188905560048101899055600381018a90559050611c118b6113fb565b611c1a86611c6e565b611c23856115df565b611c2c84612025565b610b28835b80611c3a612062565b600801556040518181527f33178f49ae33ce72b1c9e38d72f4ae326b490e4e7c9e02b8735a9ceacf770dee9060200161144f565b80611c77612062565b600501556040518181527f99578d7fe3e20e279feceaa076eb8032d475ca1a49391ec0a740445152a597139060200161144f565b6000611cb5612062565b600201546001600160a01b0316919050565b600080611cd2612062565b6000848152600c82016020526040812054919250908103611cfc57611cf5611fff565b9050611d0f565b506000838152600c820160205260409020545b80611d198561148d565b61155e9190612617565b6000611d2d612062565b5461010090046001600160a01b0316919050565b6000611d4b612062565b60030154905090565b604051634f558e7960e01b8152600481018290523090634f558e7990602401602060405180830381865afa158015611d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db49190612572565b15611e165760405162461bcd60e51b815260206004820152602c60248201527f456e676c697368506572696f64696341756374696f6e3a20546f6b656e20616c60448201526b72656164792065786973747360a01b60648201526084016105a0565b60405163e31a7c0160e01b8152600060048201526001600160a01b038316602482015260448101829052309063e31a7c0190606401600060405180830381600087803b158015611e6557600080fd5b505af11580156106cc573d6000803e3d6000fd5b600080306001600160a01b031663e86dea4a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ede919061262a565b90506000306001600160a01b031663180b0d7e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f44919061262a565b905080611f518386612643565b61155e919061266d565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c62281160205260409020611f9290826120fe565b5060405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b6000611fd9612062565b6000928352600f01602052506040902090565b6000611ff6612062565b60080154905090565b6000612009612062565b60050154905090565b600061201c612062565b60090154905090565b8061202e612062565b600701556040518181527f19ba737fa8db769049b6dafc98d3391bdead47e7f6617113c775efbed1efc6f99060200161144f565b7fc7ed1b841b2d3c7f16d15642e7b013e89732e44006608d59c7547b8e331a7ce090565b612090828261211a565b6105d3576120a6816001600160a01b0316612173565b6120b1836020612185565b6040516020016120c29291906126b3565b60408051601f198184030181529082905262461bcd60e51b82526105a091600401612728565b6000806120f484611e79565b9092149392505050565b6000612113836001600160a01b0384166122d8565b9392505050565b6000612113827fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811600086815260209190915260409020906001600160a01b03811660009081526001830160205260408120541515612113565b606061062e6001600160a01b03831660145b60606000612194836002612643565b61219f906002612617565b67ffffffffffffffff8111156121b7576121b761275b565b6040519080825280601f01601f1916602001820160405280156121e1576020820181803683370190505b509050600360fc1b816000815181106121fc576121fc612771565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061222b5761222b612771565b60200101906001600160f81b031916908160001a905350600160028402015b60018111156122b8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061227b5761227b612771565b1a60f81b82828151811061229157612291612771565b60200101906001600160f81b031916908160001a90535060049490941c936000190161224a565b5083156121135760405163c913478560e01b815260040160405180910390fd5b600081815260018301602052604081205461062e575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b6040518060a001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b60006020828403121561236557600080fd5b5035919050565b6001600160a01b038116811461053857600080fd5b60006020828403121561239357600080fd5b81356121138161236c565b600080604083850312156123b157600080fd5b8235915060208301356123c38161236c565b809150509250929050565b600080600080600060a086880312156123e657600080fd5b85356123f18161236c565b97602087013597506040870135966060810135965060800135945092505050565b6000806040838503121561242557600080fd5b50508035926020909101359150565b6000806000806000806000806000806101408b8d03121561245457600080fd5b8a3561245f8161236c565b995060208b013561246f8161236c565b999c999b505050506040880135976060810135976080820135975060a0820135965060c0820135955060e082013594506101008201359350610120909101359150565b600080604083850312156124c557600080fd5b82356124d08161236c565b946020939093013593505050565b60008060008060008060008060008060006101608c8e03121561250057600080fd5b8b3561250b8161236c565b9a5060208c013561251b8161236c565b995060408c013561252b8161236c565b9a9d999c50999a60608101359a5060808101359960a0820135995060c0820135985060e0820135975061010082013596506101208201359550610140909101359350915050565b60006020828403121561258457600080fd5b8151801515811461211357600080fd5b60208082526030908201527f456e676c697368506572696f64696341756374696f6e46616365743a20616c7260408201526f1958591e481a5b9a5d1a585b1a5e995960821b606082015260800190565b6000602082840312156125f657600080fd5b81516121138161236c565b634e487b7160e01b600052601160045260246000fd5b8082018082111561062e5761062e612601565b60006020828403121561263c57600080fd5b5051919050565b808202811582820484141761062e5761062e612601565b8181038181111561062e5761062e612601565b60008261268a57634e487b7160e01b600052601260045260246000fd5b500490565b60005b838110156126aa578181015183820152602001612692565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516126eb81601785016020880161268f565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161271c81602884016020880161268f565b01602801949350505050565b602081526000825180602084015261274781604085016020870161268f565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfe27d47e2aa570d0f5aa1d72abbe4d60032a12e3514b8c2bc8a49a9968779054c2a2646970667358221220ad10329bde82ddafa5174dc5abdde2b5dc286d9abfbfa46786c9b9c0a0bddc2764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "EnglishPeriodicAuctionFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "auctionEndTime(uint256)": {
        "notice": "Get auction end time"
      },
      "auctionLengthSeconds()": {
        "notice": "Get auction length"
      },
      "auctionStartTime(uint256)": {
        "notice": "Get auction start time"
      },
      "bidExtensionSeconds()": {
        "notice": "Get bid extension seconds"
      },
      "bidExtensionWindowLengthSeconds()": {
        "notice": "Get bid extension window length"
      },
      "bidOf(uint256,address)": {
        "notice": "Get bid for address"
      },
      "calculateFeeFromBid(uint256)": {
        "notice": "Calculate fee from bid"
      },
      "closeAuction(uint256)": {
        "notice": "Close auction and trigger a transfer to the highest bidder"
      },
      "currentBid(uint256)": {
        "notice": "Get current bid"
      },
      "highestBid(uint256)": {
        "notice": "Get highest outstanding bid"
      },
      "initialPeriodStartTime()": {
        "notice": "Get initial period start time"
      },
      "initializeAuction(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Initialize auction parameters with owner"
      },
      "initializeAuction(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Initialize auction parameters"
      },
      "isAuctionPeriod(uint256)": {
        "notice": "Get is auction period"
      },
      "isReadyForTransfer(uint256)": {
        "notice": "Is token ready for transfer"
      },
      "maxTokenCount()": {
        "notice": "Get max token count"
      },
      "minBidIncrement()": {
        "notice": "Get minimum bid increment"
      },
      "mintToken(address,uint256)": {
        "notice": "Initial bidder can mint token if it doesn't exist"
      },
      "placeBid(uint256,uint256)": {
        "notice": "Place a bid"
      },
      "repossessor()": {
        "notice": "Get repossessor"
      },
      "setAuctionLengthSeconds(uint256)": {
        "notice": "Set auction length"
      },
      "setAuctionParameters(address,uint256,uint256,uint256,uint256)": {
        "notice": "Set auction parameters"
      },
      "setBidExtensionSeconds(uint256)": {
        "notice": "Set bid extension seconds"
      },
      "setBidExtensionWindowLengthSeconds(uint256)": {
        "notice": "Set bid extension window length"
      },
      "setMinBidIncrement(uint256)": {
        "notice": "Set minimum bid increment"
      },
      "setRepossessor(address)": {
        "notice": "Set repossessor"
      },
      "withdrawBid(uint256)": {
        "notice": "Withdraw bid collateral"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
