{
  "address": "0xE13A582214444A8707501D6c62f8C659071469d2",
  "abi": [
    {
      "inputs": [],
      "name": "AddressUtils__NotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__BalanceQueryZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__ERC721ReceiverNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NotTokenOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__SelfApproval",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__TokenAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Metadata__NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableMap__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableMap__NonExistentKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableSet__IndexOutOfBounds",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "addTokenToCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "tokenURIs",
          "type": "string[]"
        }
      ],
      "name": "addTokensToCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "tokenURIs",
          "type": "string[]"
        }
      ],
      "name": "addTokensToCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "amount",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "addTokensWithBaseURIToCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_steward",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokenCount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "initializeStewardLicense",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mintToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "triggerTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x49b0e6b1a3cd2c9f7cd728ca51f88dd5433111e863b30ad7b5af64d49622a11d",
  "receipt": {
    "to": null,
    "from": "0xfF5Be16460704eFd0263dB1444Eaa216b77477c5",
    "contractAddress": "0xE13A582214444A8707501D6c62f8C659071469d2",
    "transactionIndex": 17,
    "gasUsed": "2424106",
    "logsBloom": "0x
    "blockHash": "0xd508096b4d637ac14157ac57d00fa308ceab2b23335c65b91acece181a0ba2a0",
    "transactionHash": "0x49b0e6b1a3cd2c9f7cd728ca51f88dd5433111e863b30ad7b5af64d49622a11d",
    "logs": [],
    "blockNumber": 29164449,
    "cumulativeGasUsed": "4818955",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "f5a6faf7fccd475b8524834616b2522c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressUtils__NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__BalanceQueryZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__ERC721ReceiverNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__SelfApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__TokenAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Metadata__NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableMap__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableMap__NonExistentKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableSet__IndexOutOfBounds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"addTokenToCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"}],\"name\":\"addTokensToCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"}],\"name\":\"addTokensToCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"addTokensWithBaseURIToCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_steward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokenCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"initializeStewardLicense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC-1155 token license for Steward. Transfers are disabled during an auction\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"operator\":\"address to be approved\",\"tokenId\":\"token to approve\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"quantity of tokens held\"}},\"getApproved(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"address approved to spend token\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"token owner\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"data payload\",\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address to be approved\",\"status\":\"approval status\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"tokenByIndex(uint256)\":{\"params\":{\"index\":\"position in global token list to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"params\":{\"index\":\"position in owner's token list to query\",\"owner\":\"token holder to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"total supply\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}}},\"title\":\"NativeStewardLicenseFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addTokenToCollection(address,string)\":{\"notice\":\"Add token to collection\"},\"addTokensToCollection(address[],string[])\":{\"notice\":\"Add tokens to collection with to\"},\"addTokensToCollection(string[])\":{\"notice\":\"Add tokens to collection\"},\"addTokensWithBaseURIToCollection(uint32,string)\":{\"notice\":\"Add tokens to collection with baseURI\"},\"approve(address,uint256)\":{\"notice\":\"grant approval to given account to spend token\"},\"balanceOf(address)\":{\"notice\":\"query the balance of given address\"},\"exists(uint256)\":{\"notice\":\"Check if token exists\"},\"getApproved(uint256)\":{\"notice\":\"get approval status for given token\"},\"initializeStewardLicense(address,address,uint256,string,string,string)\":{\"notice\":\"Initialize license\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"maxTokenCount()\":{\"notice\":\"Get max token count\"},\"mintToken(address,uint256)\":{\"notice\":\"Initial bidder can mint token if it doesn't exist\"},\"minter()\":{\"notice\":\"Get minter\"},\"name()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"ownerOf(uint256)\":{\"notice\":\"query the owner of given token\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given account to spend all tokens held by sender\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"symbol()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"tokenByIndex(uint256)\":{\"notice\":\"get token at given internal storage index\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"get token of given owner at given internal storage index\"},\"tokenURI(uint256)\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"totalSupply()\":{\"notice\":\"get total token supply\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\"},\"triggerTransfer(address,address,uint256)\":{\"notice\":\"Trigger transfer of license\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/license/facets/NativeStewardLicenseFacet.sol\":\"NativeStewardLicenseFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/data/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Map implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableMap {\\n    error EnumerableMap__IndexOutOfBounds();\\n    error EnumerableMap__NonExistentKey();\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        MapEntry[] _entries;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct AddressToAddressMap {\\n        Map _inner;\\n    }\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    function at(\\n        AddressToAddressMap storage map,\\n        uint256 index\\n    ) internal view returns (address, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n\\n        return (\\n            address(uint160(uint256(key))),\\n            address(uint160(uint256(value)))\\n        );\\n    }\\n\\n    function at(\\n        UintToAddressMap storage map,\\n        uint256 index\\n    ) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    function contains(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function contains(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    function length(\\n        AddressToAddressMap storage map\\n    ) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    function length(\\n        UintToAddressMap storage map\\n    ) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    function get(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal view returns (address) {\\n        return\\n            address(\\n                uint160(\\n                    uint256(_get(map._inner, bytes32(uint256(uint160(key)))))\\n                )\\n            );\\n    }\\n\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    function set(\\n        AddressToAddressMap storage map,\\n        address key,\\n        address value\\n    ) internal returns (bool) {\\n        return\\n            _set(\\n                map._inner,\\n                bytes32(uint256(uint160(key))),\\n                bytes32(uint256(uint160(value)))\\n            );\\n    }\\n\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal returns (bool) {\\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function remove(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    function toArray(\\n        AddressToAddressMap storage map\\n    )\\n        internal\\n        view\\n        returns (address[] memory keysOut, address[] memory valuesOut)\\n    {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new address[](len);\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._key))\\n                );\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function toArray(\\n        UintToAddressMap storage map\\n    )\\n        internal\\n        view\\n        returns (uint256[] memory keysOut, address[] memory valuesOut)\\n    {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new uint256[](len);\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = uint256(map._inner._entries[i]._key);\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function keys(\\n        AddressToAddressMap storage map\\n    ) internal view returns (address[] memory keysOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._key))\\n                );\\n            }\\n        }\\n    }\\n\\n    function keys(\\n        UintToAddressMap storage map\\n    ) internal view returns (uint256[] memory keysOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new uint256[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = uint256(map._inner._entries[i]._key);\\n            }\\n        }\\n    }\\n\\n    function values(\\n        AddressToAddressMap storage map\\n    ) internal view returns (address[] memory valuesOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function values(\\n        UintToAddressMap storage map\\n    ) internal view returns (address[] memory valuesOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function _at(\\n        Map storage map,\\n        uint256 index\\n    ) private view returns (bytes32, bytes32) {\\n        if (index >= map._entries.length)\\n            revert EnumerableMap__IndexOutOfBounds();\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    function _contains(\\n        Map storage map,\\n        bytes32 key\\n    ) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) revert EnumerableMap__NonExistentKey();\\n        unchecked {\\n            return map._entries[keyIndex - 1]._value;\\n        }\\n    }\\n\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) {\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            unchecked {\\n                map._entries[keyIndex - 1]._value = value;\\n            }\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) {\\n            unchecked {\\n                MapEntry storage last = map._entries[map._entries.length - 1];\\n\\n                // move last entry to now-vacant index\\n                map._entries[keyIndex - 1] = last;\\n                map._indexes[last._key] = keyIndex;\\n            }\\n\\n            // clear last index\\n            map._entries.pop();\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1140a8669a93db82ea70d7f53e112049d42a813fe7188f50aa2f7ec5e529d38a\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC721Internal } from './IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721 is IERC721Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given address\\n     * @return balance quantity of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice query the owner of given token\\n     * @param tokenId token to query\\n     * @return owner token owner\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice grant approval to given account to spend token\\n     * @param operator address to be approved\\n     * @param tokenId token to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external payable;\\n\\n    /**\\n     * @notice get approval status for given token\\n     * @param tokenId token to query\\n     * @return operator address approved to spend token\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given account to spend all tokens held by sender\\n     * @param operator address to be approved\\n     * @param status approval status\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return status whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool status);\\n}\\n\",\"keccak256\":\"0xa14655a5bdee327bc019b583b04480e8542fa6b0788e5569077ec54805d1463a\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC721 interface needed by internal functions\\n */\\ninterface IERC721Internal {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed operator,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x8d46d596fa0e48cdcbf8bb8d6a42120351c4d1b002156bf647f95523178cbe08\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x38ca94617ab4a4cdc08d9fed753f1b17d91a9823b36f7f485cd1ed5e5324aa8f\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165Base } from './IERC165Base.sol';\\nimport { ERC165BaseInternal } from './ERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165Base is IERC165Base, ERC165BaseInternal {\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return _supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3f2268856fdd9b27946adc65010bc83992069a90034bf692ab630802a926a9c2\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xba7b4d73d42dfc9f8083ce36aed0fa2c56c73878d8bda7d64f2fb908d5e04636\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\n\\ninterface IERC165Base is IERC165, IERC165BaseInternal {}\\n\",\"keccak256\":\"0x288c50013c735cf30be90eb084589fc54bc0ee77a88ec69c3cc1efb11d7dccf4\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../../../interfaces/IERC721.sol';\\nimport { IERC721Receiver } from '../../../interfaces/IERC721Receiver.sol';\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC721Base } from './IERC721Base.sol';\\nimport { ERC721BaseStorage } from './ERC721BaseStorage.sol';\\nimport { ERC721BaseInternal } from './ERC721BaseInternal.sol';\\n\\n/**\\n * @title Base ERC721 implementation, excluding optional extensions\\n */\\nabstract contract ERC721Base is IERC721Base, ERC721BaseInternal {\\n    using AddressUtils for address;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balanceOf(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\n        return _ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function getApproved(uint256 tokenId) public view returns (address) {\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) public view returns (bool) {\\n        return _isApprovedForAll(account, operator);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public payable {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function approve(address operator, uint256 tokenId) public payable {\\n        _handleApproveMessageValue(operator, tokenId, msg.value);\\n        address owner = ownerOf(tokenId);\\n        if (operator == owner) revert ERC721Base__SelfApproval();\\n        if (msg.sender != owner && !isApprovedForAll(owner, msg.sender))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _approve(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function setApprovalForAll(address operator, bool status) public {\\n        if (operator == msg.sender) revert ERC721Base__SelfApproval();\\n        ERC721BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n}\\n\",\"keccak256\":\"0xf0e9afe4797969cae01b1be1b785d5426b153f298960ed98919b7cd10c6a0287\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Receiver } from '../../../interfaces/IERC721Receiver.sol';\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC721BaseInternal } from './IERC721BaseInternal.sol';\\nimport { ERC721BaseStorage } from './ERC721BaseStorage.sol';\\n\\n/**\\n * @title Base ERC721 internal functions\\n */\\nabstract contract ERC721BaseInternal is IERC721BaseInternal {\\n    using AddressUtils for address;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function _balanceOf(\\n        address account\\n    ) internal view virtual returns (uint256) {\\n        if (account == address(0)) revert ERC721Base__BalanceQueryZeroAddress();\\n        return ERC721BaseStorage.layout().holderTokens[account].length();\\n    }\\n\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        address owner = ERC721BaseStorage.layout().tokenOwners.get(tokenId);\\n        if (owner == address(0)) revert ERC721Base__InvalidOwner();\\n        return owner;\\n    }\\n\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return ERC721BaseStorage.layout().tokenOwners.contains(tokenId);\\n    }\\n\\n    function _getApproved(\\n        uint256 tokenId\\n    ) internal view virtual returns (address) {\\n        if (!_exists(tokenId)) revert ERC721Base__NonExistentToken();\\n\\n        return ERC721BaseStorage.layout().tokenApprovals[tokenId];\\n    }\\n\\n    function _isApprovedForAll(\\n        address account,\\n        address operator\\n    ) internal view virtual returns (bool) {\\n        return ERC721BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        if (!_exists(tokenId)) revert ERC721Base__NonExistentToken();\\n\\n        address owner = _ownerOf(tokenId);\\n\\n        return (spender == owner ||\\n            _getApproved(tokenId) == spender ||\\n            _isApprovedForAll(owner, spender));\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        if (to == address(0)) revert ERC721Base__MintToZeroAddress();\\n        if (_exists(tokenId)) revert ERC721Base__TokenAlreadyMinted();\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, '');\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        if (!_checkOnERC721Received(address(0), to, tokenId, data))\\n            revert ERC721Base__ERC721ReceiverNotImplemented();\\n    }\\n\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = _ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        _approve(address(0), tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n        l.holderTokens[owner].remove(tokenId);\\n        l.tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        if (_ownerOf(tokenId) != from) revert ERC721Base__NotTokenOwner();\\n        if (to == address(0)) revert ERC721Base__TransferToZeroAddress();\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        _approve(address(0), tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n        l.holderTokens[from].remove(tokenId);\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, data))\\n            revert ERC721Base__ERC721ReceiverNotImplemented();\\n    }\\n\\n    function _approve(address operator, uint256 tokenId) internal virtual {\\n        ERC721BaseStorage.layout().tokenApprovals[tokenId] = operator;\\n        emit Approval(_ownerOf(tokenId), operator, tokenId);\\n    }\\n\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        bytes memory returnData = to.functionCall(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                msg.sender,\\n                from,\\n                tokenId,\\n                data\\n            ),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n\\n        bytes4 returnValue = abi.decode(returnData, (bytes4));\\n        return returnValue == type(IERC721Receiver).interfaceId;\\n    }\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called approvals for processing of included message value\\n     * @param operator beneficiary of approval\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called transfers for processing of included message value\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x864b663d78acd56c731ca1328fc11835f91ceedec4eb2b16d675a0407bbe682f\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\n\\nlibrary ERC721BaseStorage {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Base');\\n\\n    struct Layout {\\n        EnumerableMap.UintToAddressMap tokenOwners;\\n        mapping(address => EnumerableSet.UintSet) holderTokens;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9570596eca4d18e1c872177aa12125fcaba1dd7db940e5affa44e6ce2231b0a1\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../../../interfaces/IERC721.sol';\\nimport { IERC721BaseInternal } from './IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721Base is IERC721BaseInternal, IERC721 {\\n\\n}\\n\",\"keccak256\":\"0x5b99ebbddcc97f5a825cb21fb377b04c9ad184c4e4b69b92685334b6d42b7636\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Internal } from '../../../interfaces/IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721BaseInternal is IERC721Internal {\\n    error ERC721Base__NotOwnerOrApproved();\\n    error ERC721Base__SelfApproval();\\n    error ERC721Base__BalanceQueryZeroAddress();\\n    error ERC721Base__ERC721ReceiverNotImplemented();\\n    error ERC721Base__InvalidOwner();\\n    error ERC721Base__MintToZeroAddress();\\n    error ERC721Base__NonExistentToken();\\n    error ERC721Base__NotTokenOwner();\\n    error ERC721Base__TokenAlreadyMinted();\\n    error ERC721Base__TransferToZeroAddress();\\n}\\n\",\"keccak256\":\"0x3118e4b75bc32c0c5b1f7aca49d30bf618966260179d848171b2ce3e3e0b5373\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { IERC721Enumerable } from './IERC721Enumerable.sol';\\nimport { ERC721EnumerableInternal } from './ERC721EnumerableInternal.sol';\\n\\nabstract contract ERC721Enumerable is\\n    IERC721Enumerable,\\n    ERC721EnumerableInternal\\n{\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) public view returns (uint256) {\\n        return _tokenOfOwnerByIndex(owner, index);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\n        return _tokenByIndex(index);\\n    }\\n}\\n\",\"keccak256\":\"0x762db931dbe79f32fa48ba2f66b23b096e9c43e89c09310a98c10ab18b6e73b6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721EnumerableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\n\\nabstract contract ERC721EnumerableInternal {\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _totalSupply() internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().tokenOwners.length();\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenByIndex(\\n        uint256 index\\n    ) internal view returns (uint256 tokenId) {\\n        (tokenId, ) = ERC721BaseStorage.layout().tokenOwners.at(index);\\n    }\\n}\\n\",\"keccak256\":\"0xcb195fe5d264a1756a67b0c9bf8ac5493c12d25f947290196f15a67d7f3e81ad\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Enumerable {\\n    /**\\n     * @notice get total token supply\\n     * @return total supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice get token of given owner at given internal storage index\\n     * @param owner token holder to query\\n     * @param index position in owner's token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @notice get token at given internal storage index\\n     * @param index position in global token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenByIndex(\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0x4dcc1d41df336f28a2ea6fa2e7ec17e3d1745938146db5385400238a7e7a1bad\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\nimport { IERC721Metadata } from './IERC721Metadata.sol';\\n\\n/**\\n * @title ERC721 metadata extensions\\n */\\nabstract contract ERC721Metadata is IERC721Metadata, ERC721MetadataInternal {\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function name() external view virtual returns (string memory) {\\n        return _name();\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function symbol() external view virtual returns (string memory) {\\n        return _symbol();\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) external view virtual returns (string memory) {\\n        return _tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721MetadataInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xc626c723aa50119564d77caa3749a728526ca8a93b385000e3d52208b6bc40c5\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { ERC721BaseInternal } from '../base/ERC721Base.sol';\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\nimport { ERC721MetadataStorage } from './ERC721MetadataStorage.sol';\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal functions\\n */\\nabstract contract ERC721MetadataInternal is\\n    IERC721MetadataInternal,\\n    ERC721BaseInternal\\n{\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function _name() internal view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().name;\\n    }\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function _symbol() internal view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().symbol;\\n    }\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function _tokenURI(\\n        uint256 tokenId\\n    ) internal view virtual returns (string memory) {\\n        if (!_exists(tokenId)) revert ERC721Metadata__NonExistentToken();\\n\\n        ERC721MetadataStorage.Layout storage l = ERC721MetadataStorage.layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC721 hook: clear per-token URI data on burn\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (to == address(0)) {\\n            delete ERC721MetadataStorage.layout().tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x087a3302cd70010787bcdb1eb2e225eff23ac2e5ab5f77d6dc26289cb8863a19\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC721MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Metadata');\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe220a86657018b0d498708b7d8c728042d9a41e8ac230e22d1a09b6bf866332e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata interface\\n */\\ninterface IERC721Metadata is IERC721MetadataInternal {\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x281dd4dbf81c3acf12bf43bc6e0f77ae68cb2764450cce8121a53c061bf87960\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721BaseInternal } from '../base/IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal interface\\n */\\ninterface IERC721MetadataInternal is IERC721BaseInternal {\\n    error ERC721Metadata__NonExistentToken();\\n}\\n\",\"keccak256\":\"0xd420b4227db773f26b0e40cb6ea4819d340d0ee5ea59d6321c27e79ae7ecca86\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/auction/IPeriodicAuctionReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IPeriodicAuctionReadable\\n */\\ninterface IPeriodicAuctionReadable {\\n    /**\\n     * @notice Get is auction period\\n     */\\n    function isAuctionPeriod(uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Get initial period start time\\n     */\\n    function initialPeriodStartTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Get initial bidder\\n     */\\n    function initialBidder() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbee90dfb18090c21241a02d52168d7926e95f4948af6547d0ab42a6ae429d295\",\"license\":\"MIT\"},\"contracts/license/IStewardLicense.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IERC721 } from '@solidstate/contracts/interfaces/IERC721.sol';\\nimport { IERC721Metadata } from '@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol';\\n\\n/**\\n * @title IStewardLicense\\n */\\ninterface IStewardLicense is IERC721, IERC721Metadata {\\n    /**\\n     * @notice Trigger transfer of license\\n     */\\n    function triggerTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @notice Check if token exists\\n     */\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Get max token count\\n     */\\n    function maxTokenCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbec39166e294d67bfb1de12cc3126f408671b77cf311bb68464a73ec54ac90a4\",\"license\":\"MIT\"},\"contracts/license/StewardLicenseBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { StewardLicenseInternal } from './StewardLicenseInternal.sol';\\nimport { IERC721 } from '@solidstate/contracts/interfaces/IERC721.sol';\\nimport { IPeriodicAuctionReadable } from '../auction/IPeriodicAuctionReadable.sol';\\n\\n/**\\n * @title StewardLicenseBase\\n */\\nabstract contract StewardLicenseBase is IERC721, StewardLicenseInternal {\\n    /**\\n     * @notice Trigger transfer of license\\n     */\\n    function triggerTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external {\\n        require(\\n            msg.sender == address(this),\\n            'NativeStewardLicense: Trigger transfer can only be called from another facet'\\n        );\\n\\n        _triggerTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Initial bidder can mint token if it doesn't exist\\n     */\\n    function mintToken(address to, uint256 tokenId) external {\\n        require(\\n            msg.sender ==\\n                IPeriodicAuctionReadable(address(this)).initialBidder(),\\n            'StewardLicenseFacet: only initial bidder can mint token'\\n        );\\n        require(\\n            block.timestamp <\\n                IPeriodicAuctionReadable(address(this))\\n                    .initialPeriodStartTime(),\\n            'StewardLicenseFacet: cannot mint after initial period start time'\\n        );\\n        require(\\n            _exists(tokenId) == false,\\n            'StewardLicenseFacet: Token already exists'\\n        );\\n\\n        _triggerTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Add token to collection\\n     */\\n    function addTokenToCollection(address to, string memory tokenURI) external {\\n        require(\\n            msg.sender ==\\n                IPeriodicAuctionReadable(address(this)).initialBidder(),\\n            'StewardLicenseFacet: only initial bidder can add token to collection'\\n        );\\n\\n        _addTokenToCollection(to, tokenURI);\\n    }\\n\\n    /**\\n     * @notice Add tokens to collection with to\\n     */\\n    function addTokensToCollection(\\n        address[] memory to,\\n        string[] memory tokenURIs\\n    ) external {\\n        require(\\n            msg.sender ==\\n                IPeriodicAuctionReadable(address(this)).initialBidder(),\\n            'StewardLicenseFacet: only initial bidder can add tokens to collection'\\n        );\\n        require(\\n            to.length == tokenURIs.length,\\n            'StewardLicenseFacet: to and tokenURIs length mismatch'\\n        );\\n\\n        for (uint256 i = 0; i < tokenURIs.length; i++) {\\n            _addTokenToCollection(to[i], tokenURIs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add tokens to collection\\n     */\\n    function addTokensToCollection(string[] memory tokenURIs) external {\\n        require(\\n            msg.sender ==\\n                IPeriodicAuctionReadable(address(this)).initialBidder(),\\n            'StewardLicenseFacet: only initial bidder can add tokens to collection'\\n        );\\n\\n        for (uint256 i = 0; i < tokenURIs.length; i++) {\\n            _addTokenToCollection(address(0), tokenURIs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add tokens to collection with baseURI\\n     */\\n    function addTokensWithBaseURIToCollection(\\n        uint32 amount,\\n        string memory baseURI\\n    ) external {\\n        require(\\n            msg.sender ==\\n                IPeriodicAuctionReadable(address(this)).initialBidder(),\\n            'StewardLicenseFacet: only initial bidder can add tokens to collection'\\n        );\\n\\n        for (uint32 i = 0; i < amount; i++) {\\n            _addTokenWithBaseURIToCollection(baseURI);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get max token count\\n     */\\n    function maxTokenCount() external view returns (uint256) {\\n        return _maxTokenCount();\\n    }\\n\\n    /**\\n     * @notice Check if token exists\\n     */\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x5a0502d615a3f2e4f27cd522864154bff67899094e51d51c875227d5d02badb5\",\"license\":\"MIT\"},\"contracts/license/StewardLicenseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { StewardLicenseStorage } from './StewardLicenseStorage.sol';\\nimport { ERC721Base, ERC721BaseInternal } from '@solidstate/contracts/token/ERC721/base/ERC721Base.sol';\\nimport { ERC721Enumerable } from '@solidstate/contracts/token/ERC721/enumerable/ERC721Enumerable.sol';\\nimport { ERC721Metadata } from '@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol';\\nimport { ERC721MetadataStorage } from '@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol';\\nimport { ERC165Base } from '@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol';\\nimport { IERC165 } from '@solidstate/contracts/interfaces/IERC165.sol';\\nimport { IERC721 } from '@solidstate/contracts/interfaces/IERC721.sol';\\nimport { IPeriodicAuctionReadable } from '../auction/IPeriodicAuctionReadable.sol';\\nimport { UintUtils } from '@solidstate/contracts/utils/UintUtils.sol';\\n\\n/**\\n * @title StewardLicenseInternal\\n */\\nabstract contract StewardLicenseInternal is\\n    ERC721Base,\\n    ERC721Enumerable,\\n    ERC721Metadata,\\n    ERC165Base\\n{\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice Initialize license\\n     */\\n    function _initializeStewardLicense(\\n        address minter,\\n        address _initialSteward,\\n        uint256 maxTokenCount,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI\\n    ) internal {\\n        StewardLicenseStorage.Layout storage l = StewardLicenseStorage.layout();\\n\\n        l.isInitialized = true;\\n        l.initialSteward = _initialSteward;\\n        l.minter = minter;\\n        l.maxTokenCount = maxTokenCount;\\n\\n        // Initialize ERC721\\n        ERC721MetadataStorage.Layout storage ls = ERC721MetadataStorage\\n            .layout();\\n        ls.name = name;\\n        ls.symbol = symbol;\\n        ls.baseURI = baseURI;\\n\\n        _setSupportsInterface(type(IERC165).interfaceId, true);\\n        _setSupportsInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /**\\n     * @notice Check if initialized\\n     */\\n    function _isInitialized() internal view returns (bool) {\\n        return StewardLicenseStorage.layout().isInitialized;\\n    }\\n\\n    /**\\n     * @notice Get minter\\n     */\\n    function _minter() internal view returns (address) {\\n        return StewardLicenseStorage.layout().minter;\\n    }\\n\\n    /**\\n     * @notice Trigger transfer\\n     */\\n    function _triggerTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        if (_exists(tokenId) == false) {\\n            // Mint token\\n            _mint(to, tokenId);\\n        } else {\\n            // Safe transfer is not needed. If receiver does not implement ERC721Receiver, next auction can still happen. This prevents a failed transfer from locking up license\\n            _transfer(from, to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get max token count\\n     */\\n    function _maxTokenCount() internal view returns (uint256) {\\n        return StewardLicenseStorage.layout().maxTokenCount;\\n    }\\n\\n    /**\\n     * @notice Add token to collection\\n     */\\n    function _addTokenToCollection(\\n        address to,\\n        string memory tokenURI\\n    ) internal {\\n        StewardLicenseStorage.Layout storage l = StewardLicenseStorage.layout();\\n\\n        uint256 newTokenId = l.maxTokenCount;\\n\\n        // Increment max token count\\n        l.maxTokenCount += 1;\\n\\n        // Override metadata\\n        ERC721MetadataStorage.layout().tokenURIs[newTokenId] = tokenURI;\\n\\n        if (to != address(0)) {\\n            // Mint token\\n            _mint(to, newTokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add token to collection\\n     */\\n    function _addTokenWithBaseURIToCollection(string memory _baseURI) internal {\\n        StewardLicenseStorage.Layout storage l = StewardLicenseStorage.layout();\\n\\n        uint256 newTokenId = l.maxTokenCount;\\n\\n        // Increment max token count\\n        l.maxTokenCount += 1;\\n\\n        // Override metadata\\n        ERC721MetadataStorage.layout().tokenURIs[newTokenId] = string(\\n            abi.encodePacked(_baseURI, newTokenId.toString())\\n        );\\n    }\\n\\n    /**\\n     * @notice Override token URI\\n     * @return token URI\\n     */\\n    function _tokenURI(\\n        uint256 tokenId\\n    ) internal view override returns (string memory) {\\n        StewardLicenseStorage.Layout storage licenseL = StewardLicenseStorage\\n            .layout();\\n\\n        if (tokenId >= licenseL.maxTokenCount)\\n            revert ERC721Metadata__NonExistentToken();\\n\\n        ERC721MetadataStorage.Layout storage metadataL = ERC721MetadataStorage\\n            .layout();\\n\\n        string memory tokenIdURI = metadataL.tokenURIs[tokenId];\\n        string memory baseURI = metadataL.baseURI;\\n\\n        if (bytes(tokenIdURI).length > 0) {\\n            return tokenIdURI;\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n\\n    /**\\n     * @notice Disable transfers if during auction period\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721BaseInternal, ERC721Metadata) {\\n        // Disable transfers if not mint\\n        if (from != address(0x0)) {\\n            bool isAuctionPeriod = IPeriodicAuctionReadable(address(this))\\n                .isAuctionPeriod(tokenId);\\n            require(\\n                isAuctionPeriod == false,\\n                'StewardLicenseFacet: Cannot transfer during auction period'\\n            );\\n        }\\n\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x383e9e69f3b9ff89be2188d1498c5e224f256630d4d8dbd0bc887aad142f0c49\",\"license\":\"MIT\"},\"contracts/license/StewardLicenseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title StewardLicenseStorage\\n */\\nlibrary StewardLicenseStorage {\\n    struct Layout {\\n        bool isInitialized;\\n        address initialSteward;\\n        address minter;\\n        uint256 maxTokenCount;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256('pcoart.contracts.storage.StewardLicenseStorage');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x53ef6c2f3018f6e1a1da0858d402fc08cf798f234643fb79b4305bfc35eaea43\",\"license\":\"MIT\"},\"contracts/license/facets/NativeStewardLicenseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { StewardLicenseInternal } from '../StewardLicenseInternal.sol';\\nimport { IStewardLicense } from '../IStewardLicense.sol';\\nimport { StewardLicenseBase } from '../StewardLicenseBase.sol';\\n\\n/**\\n * @title NativeStewardLicenseFacet\\n * @dev ERC-1155 token license for Steward. Transfers are disabled during an auction\\n */\\ncontract NativeStewardLicenseFacet is\\n    StewardLicenseInternal,\\n    StewardLicenseBase\\n{\\n    /**\\n     * @notice Initialize license\\n     */\\n    function initializeStewardLicense(\\n        address _minter,\\n        address _steward,\\n        uint256 _maxTokenCount,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI\\n    ) external {\\n        require(\\n            _isInitialized() == false,\\n            'StewardLicenseFacet: already initialized'\\n        );\\n\\n        _initializeStewardLicense(\\n            _minter,\\n            _steward,\\n            _maxTokenCount,\\n            name,\\n            symbol,\\n            baseURI\\n        );\\n    }\\n\\n    /**\\n     * @notice Get minter\\n     */\\n    function minter() external view returns (address) {\\n        return _minter();\\n    }\\n}\\n\",\"keccak256\":\"0xb37627c363f842816d7a9fa3d817c47b6a44c1f6c36bd31cfa12f4d2150cfb5d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612ae5806100206000396000f3fe6080604052600436106101815760003560e01c806350e35ef1116100d1578063a22cb4651161008a578063c87b56dd11610064578063c87b56dd14610425578063e31a7c0114610445578063e95a272f14610465578063e985e9c51461048557600080fd5b8063a22cb465146103dd578063b88d4fde146103fd578063c4e627c21461041057600080fd5b806350e35ef1146103285780636352211e146103485780636a2e019f1461036857806370a082311461038857806379c65068146103a857806395d89b41146103c857600080fd5b806323b872dd1161013e57806342842e0e1161011857806342842e0e146102b55780634a7c554f146102c85780634f558e79146102e85780634f6ccce71461030857600080fd5b806323b872dd14610262578063269aab0e146102755780632f745c591461029557600080fd5b806301ffc9a71461018657806306fdde03146101bb57806307546172146101dd578063081812fc1461020a578063095ea7b31461022a57806318160ddd1461023f575b600080fd5b34801561019257600080fd5b506101a66101a136600461209e565b6104a5565b60405190151581526020015b60405180910390f35b3480156101c757600080fd5b506101d06104e8565b6040516101b2919061210b565b3480156101e957600080fd5b506101f26104f7565b6040516001600160a01b0390911681526020016101b2565b34801561021657600080fd5b506101f261022536600461211e565b61052a565b61023d61023836600461214c565b610535565b005b34801561024b57600080fd5b506102546105c1565b6040519081526020016101b2565b61023d610270366004612178565b6105cb565b34801561028157600080fd5b5061023d61029036600461232c565b6105fd565b3480156102a157600080fd5b506102546102b036600461214c565b6106de565b61023d6102c3366004612178565b6106f1565b3480156102d457600080fd5b5061023d6102e3366004612361565b61070c565b3480156102f457600080fd5b506101a661030336600461211e565b61085a565b34801561031457600080fd5b5061025461032336600461211e565b610865565b34801561033457600080fd5b5061023d610343366004612423565b610870565b34801561035457600080fd5b506101f261036336600461211e565b6108f7565b34801561037457600080fd5b5061023d6103833660046124d9565b610902565b34801561039457600080fd5b506102546103a336600461251f565b610a02565b3480156103b457600080fd5b5061023d6103c336600461214c565b610a0d565b3480156103d457600080fd5b506101d0610c41565b3480156103e957600080fd5b5061023d6103f836600461254a565b610c4b565b61023d61040b366004612583565b610cff565b34801561041c57600080fd5b50610254610d38565b34801561043157600080fd5b506101d061044036600461211e565b610d50565b34801561045157600080fd5b5061023d610460366004612178565b610d5b565b34801561047157600080fd5b5061023d610480366004612603565b610df0565b34801561049157600080fd5b506101a66104a036600461262a565b610eb4565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b60606104f2610ec0565b905090565b60006104f27f79ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e31546001600160a01b031690565b60006104e282610f5f565b6000610540826108f7565b9050806001600160a01b0316836001600160a01b0316036105745760405163424a22cb60e01b815260040160405180910390fd5b336001600160a01b0382161480159061059457506105928133610eb4565b155b156105b257604051632f5de44f60e01b815260040160405180910390fd5b6105bc8383610fc2565b505050565b60006104f261104f565b6105d53382611068565b6105f257604051632f5de44f60e01b815260040160405180910390fd5b6105bc8383836110ee565b306001600160a01b0316633882ce8e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f9190612658565b6001600160a01b0316336001600160a01b0316146106985760405162461bcd60e51b815260040161068f90612675565b60405180910390fd5b60005b81518110156106da576106c860008383815181106106bb576106bb6126e0565b602002602001015161121d565b806106d28161270c565b91505061069b565b5050565b60006106ea83836112a3565b9392505050565b6105bc83838360405180602001604052806000815250610cff565b306001600160a01b0316633882ce8e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561074a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076e9190612658565b6001600160a01b0316336001600160a01b03161461079e5760405162461bcd60e51b815260040161068f90612675565b805182511461080d5760405162461bcd60e51b815260206004820152603560248201527f537465776172644c6963656e736546616365743a20746f20616e6420746f6b656044820152740dcaaa492e640d8cadccee8d040dad2e6dac2e8c6d605b1b606482015260840161068f565b60005b81518110156105bc5761084883828151811061082e5761082e6126e0565b60200260200101518383815181106106bb576106bb6126e0565b806108528161270c565b915050610810565b60006104e2826112d2565b60006104e2826112ec565b600080516020612a308339815191525460ff16156108e15760405162461bcd60e51b815260206004820152602860248201527f537465776172644c6963656e736546616365743a20616c726561647920696e696044820152671d1a585b1a5e995960c21b606482015260840161068f565b6108ef86868686868661130d565b505050505050565b60006104e2826113f7565b306001600160a01b0316633882ce8e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109649190612658565b6001600160a01b0316336001600160a01b0316146109f85760405162461bcd60e51b8152602060048201526044602482018190527f537465776172644c6963656e736546616365743a206f6e6c7920696e69746961908201527f6c206269646465722063616e2061646420746f6b656e20746f20636f6c6c65636064820152633a34b7b760e11b608482015260a40161068f565b6106da828261121d565b60006104e28261143b565b306001600160a01b0316633882ce8e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6f9190612658565b6001600160a01b0316336001600160a01b031614610af55760405162461bcd60e51b815260206004820152603760248201527f537465776172644c6963656e736546616365743a206f6e6c7920696e6974696160448201527f6c206269646465722063616e206d696e7420746f6b656e000000000000000000606482015260840161068f565b306001600160a01b031663be6a2a6d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b579190612725565b4210610bcd576040805162461bcd60e51b81526020600482015260248101919091527f537465776172644c6963656e736546616365743a2063616e6e6f74206d696e7460448201527f20616674657220696e697469616c20706572696f642073746172742074696d65606482015260840161068f565b610bd6816112d2565b15610c355760405162461bcd60e51b815260206004820152602960248201527f537465776172644c6963656e736546616365743a20546f6b656e20616c72656160448201526864792065786973747360b81b606482015260840161068f565b6106da60008383611492565b60606104f26114ae565b336001600160a01b03831603610c745760405163424a22cb60e01b815260040160405180910390fd5b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610d093383611068565b610d2657604051632f5de44f60e01b815260040160405180910390fd5b610d32848484846114cd565b50505050565b60006104f2600080516020612a708339815191525490565b60606104e282611501565b333014610de55760405162461bcd60e51b815260206004820152604c60248201527f4e6174697665537465776172644c6963656e73653a205472696767657220747260448201527f616e736665722063616e206f6e6c792062652063616c6c65642066726f6d206160648201526b1b9bdd1a195c88199858d95d60a21b608482015260a40161068f565b6105bc838383611492565b306001600160a01b0316633882ce8e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e529190612658565b6001600160a01b0316336001600160a01b031614610e825760405162461bcd60e51b815260040161068f90612675565b60005b8263ffffffff168163ffffffff1610156105bc57610ea2826116e5565b80610eac8161273e565b915050610e85565b60006106ea8383611777565b6060600080516020612a908339815191528054610edc90612761565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0890612761565b8015610f555780601f10610f2a57610100808354040283529160200191610f55565b820191906000526020600020905b815481529060010190602001808311610f3857829003601f168201915b5050505050905090565b6000610f6a826112d2565b610f875760405163c1b843ef60e01b815260040160405180910390fd5b5060009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a960205260409020546001600160a01b031690565b60008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a96020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611016826113f7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006104f2600080516020612a508339815191526117c4565b6000611073826112d2565b6110905760405163c1b843ef60e01b815260040160405180910390fd5b600061109b836113f7565b9050806001600160a01b0316846001600160a01b031614806110d65750836001600160a01b03166110cb84610f5f565b6001600160a01b0316145b806110e657506110e68185611777565b949350505050565b826001600160a01b0316611101826113f7565b6001600160a01b03161461112857604051630f2db4ad60e01b815260040160405180910390fd5b6001600160a01b03821661114f576040516340311a0960e01b815260040160405180910390fd5b61115a8383836117ce565b611165600082610fc2565b6001600160a01b0383166000908152600080516020612a1083398151915260205260409020600080516020612a50833981519152906111a490836118c3565b506001600160a01b038316600090815260028201602052604090206111c990836118cf565b506111d58183856118db565b5081836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b600080516020612a708339815191528054600080516020612a3083398151915291600190600061124d838561279b565b909155505060008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040902061128984826127f4565b506001600160a01b03841615610d3257610d3284826118f1565b6001600160a01b0382166000908152600080516020612a10833981519152602052604081206106ea90836119d4565b60006104e2600080516020612a50833981519152836119e0565b6000611306600080516020612a50833981519152836119f8565b5092915050565b600080516020612a3083398151915280546001600160a01b03878116610100026001600160a81b03199092169190911760011782557f79ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e3180549189166001600160a01b0319909216919091179055600080516020612a708339815191528590556000600080516020612a908339815191529050806113aa86826127f4565b50600181016113b985826127f4565b50600281016113c884826127f4565b506113db6301ffc9a760e01b6001611a14565b6113ed6380ac58cd60e01b6001611a14565b5050505050505050565b600080611412600080516020612a5083398151915284611a8a565b90506001600160a01b0381166104e257604051637e1a7d8b60e01b815260040160405180910390fd5b60006001600160a01b03821661146457604051630810ff9760e41b815260040160405180910390fd5b6001600160a01b0382166000908152600080516020612a10833981519152602052604090206104e2906117c4565b61149b816112d2565b15156000036105f2576105bc82826118f1565b6060600080516020612a908339815191526001018054610edc90612761565b6114d88484846110ee565b6114e484848484611a96565b610d3257604051639ff10cdd60e01b815260040160405180910390fd5b600080516020612a7083398151915254606090600080516020612a3083398151915290831061154257604051624705a760e71b815260040160405180910390fd5b60008381527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b4602052604081208054600080516020612a9083398151915292919061158c90612761565b80601f01602080910402602001604051908101604052809291908181526020018280546115b890612761565b80156116055780601f106115da57610100808354040283529160200191611605565b820191906000526020600020905b8154815290600101906020018083116115e857829003601f168201915b50505050509050600082600201805461161d90612761565b80601f016020809104026020016040519081016040528092919081815260200182805461164990612761565b80156116965780601f1061166b57610100808354040283529160200191611696565b820191906000526020600020905b81548152906001019060200180831161167957829003601f168201915b505050505090506000825111156116b05750949350505050565b806116ba87611b67565b6040516020016116cb9291906128b4565b604051602081830303815290604052945050505050919050565b600080516020612a708339815191528054600080516020612a30833981519152916001906000611715838561279b565b9091555083905061172582611b67565b6040516020016117369291906128b4565b60405160208183030381529060405261175a600080516020612a9083398151915290565b60008381526003919091016020526040902090610d3290826127f4565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b60006104e2825490565b6001600160a01b038316156118b85760405163a7c12c1160e01b815260048101829052600090309063a7c12c1190602401602060405180830381865afa15801561181c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184091906128e3565b905080156118b65760405162461bcd60e51b815260206004820152603a60248201527f537465776172644c6963656e736546616365743a2043616e6e6f74207472616e60448201527f7366657220647572696e672061756374696f6e20706572696f64000000000000606482015260840161068f565b505b6105bc838383611c68565b60006106ea8383611c73565b60006106ea8383611d2d565b60006110e684846001600160a01b038516611d70565b6001600160a01b038216611918576040516311f2988d60e11b815260040160405180910390fd5b611921816112d2565b1561193f57604051630d86bb7b60e31b815260040160405180910390fd5b61194b600083836117ce565b6001600160a01b0382166000908152600080516020612a1083398151915260205260409020600080516020612a508339815191529061198a90836118cf565b506119968183856118db565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b60006106ea8383611e0f565b600081815260018301602052604081205415156106ea565b6000808080611a078686611e5b565b9097909650945050505050565b6001600160e01b03198083169003611a3f5760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b60006106ea8383611ebe565b60006001600160a01b0384163b611aaf575060016110e6565b6000611b3063150b7a0260e01b33888787604051602401611ad39493929190612900565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050506040518060600160405280603281526020016129de603291396001600160a01b0388169190611f22565b9050600081806020019051810190611b48919061293d565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b606081600003611b8e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611bb85780611ba28161270c565b9150611bb19050600a83612970565b9150611b92565b60008167ffffffffffffffff811115611bd357611bd36121b9565b6040519080825280601f01601f191660200182016040528015611bfd576020820181803683370190505b5090505b84156110e657611c12600183612984565b9150611c1f600a86612997565b611c2a90603061279b565b60f81b818381518110611c3f57611c3f6126e0565b60200101906001600160f81b031916908160001a905350611c61600a86612970565b9450611c01565b6105bc838383611f31565b6000818152600183016020526040812054801561130657835460009085906000198101908110611ca557611ca56126e0565b9060005260206000200154905080856000016001840381548110611ccb57611ccb6126e0565b6000918252602080832090910192909255918252600186019052604090208190558354849080611cfd57611cfd6129ab565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b60008181526001830160205260408120546104e2575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b6000828152600184016020526040812054808203611dd75750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556106ea565b82856000016001830381548110611df057611df06126e0565b90600052602060002090600202016001018190555060009150506106ea565b81546000908210611e335760405163e637bf3b60e01b815260040160405180910390fd5b826000018281548110611e4857611e486126e0565b9060005260206000200154905092915050565b815460009081908310611e815760405163022fd82760e31b815260040160405180910390fd5b6000846000018481548110611e9857611e986126e0565b906000526020600020906002020190508060000154816001015492509250509250929050565b6000818152600183016020526040812054808203611eef57604051633d547ec560e21b815260040160405180910390fd5b836000016001820381548110611f0757611f076126e0565b90600052602060002090600202016001015491505092915050565b60606110e68484600085611f75565b6001600160a01b0382166105bc5760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b4602052604081206105bc91612032565b6060843b611f9657604051632270d6bf60e21b815260040160405180910390fd5b600080866001600160a01b03168587604051611fb291906129c1565b60006040518083038185875af1925050503d8060008114611fef576040519150601f19603f3d011682016040523d82523d6000602084013e611ff4565b606091505b509150915081156120085791506110e69050565b8051156120185780518082602001fd5b8360405162461bcd60e51b815260040161068f919061210b565b50805461203e90612761565b6000825580601f1061204e575050565b601f01602090049060005260206000209081019061206c919061206f565b50565b5b808211156120845760008155600101612070565b5090565b6001600160e01b03198116811461206c57600080fd5b6000602082840312156120b057600080fd5b81356106ea81612088565b60005b838110156120d65781810151838201526020016120be565b50506000910152565b600081518084526120f78160208601602086016120bb565b601f01601f19169290920160200192915050565b6020815260006106ea60208301846120df565b60006020828403121561213057600080fd5b5035919050565b6001600160a01b038116811461206c57600080fd5b6000806040838503121561215f57600080fd5b823561216a81612137565b946020939093013593505050565b60008060006060848603121561218d57600080fd5b833561219881612137565b925060208401356121a881612137565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156121f8576121f86121b9565b604052919050565b600067ffffffffffffffff82111561221a5761221a6121b9565b5060051b60200190565b600067ffffffffffffffff83111561223e5761223e6121b9565b612251601f8401601f19166020016121cf565b905082815283838301111561226557600080fd5b828260208301376000602084830101529392505050565b600082601f83011261228d57600080fd5b6106ea83833560208501612224565b600082601f8301126122ad57600080fd5b813560206122c26122bd83612200565b6121cf565b82815260059290921b840181019181810190868411156122e157600080fd5b8286015b8481101561232157803567ffffffffffffffff8111156123055760008081fd5b6123138986838b010161227c565b8452509183019183016122e5565b509695505050505050565b60006020828403121561233e57600080fd5b813567ffffffffffffffff81111561235557600080fd5b6110e68482850161229c565b6000806040838503121561237457600080fd5b823567ffffffffffffffff8082111561238c57600080fd5b818501915085601f8301126123a057600080fd5b813560206123b06122bd83612200565b82815260059290921b840181019181810190898411156123cf57600080fd5b948201945b838610156123f65785356123e781612137565b825294820194908201906123d4565b9650508601359250508082111561240c57600080fd5b506124198582860161229c565b9150509250929050565b60008060008060008060c0878903121561243c57600080fd5b863561244781612137565b9550602087013561245781612137565b945060408701359350606087013567ffffffffffffffff8082111561247b57600080fd5b6124878a838b0161227c565b9450608089013591508082111561249d57600080fd5b6124a98a838b0161227c565b935060a08901359150808211156124bf57600080fd5b506124cc89828a0161227c565b9150509295509295509295565b600080604083850312156124ec57600080fd5b82356124f781612137565b9150602083013567ffffffffffffffff81111561251357600080fd5b6124198582860161227c565b60006020828403121561253157600080fd5b81356106ea81612137565b801515811461206c57600080fd5b6000806040838503121561255d57600080fd5b823561256881612137565b915060208301356125788161253c565b809150509250929050565b6000806000806080858703121561259957600080fd5b84356125a481612137565b935060208501356125b481612137565b925060408501359150606085013567ffffffffffffffff8111156125d757600080fd5b8501601f810187136125e857600080fd5b6125f787823560208401612224565b91505092959194509250565b6000806040838503121561261657600080fd5b823563ffffffff811681146124f757600080fd5b6000806040838503121561263d57600080fd5b823561264881612137565b9150602083013561257881612137565b60006020828403121561266a57600080fd5b81516106ea81612137565b60208082526045908201527f537465776172644c6963656e736546616365743a206f6e6c7920696e6974696160408201527f6c206269646465722063616e2061646420746f6b656e7320746f20636f6c6c6560608201526431ba34b7b760d91b608082015260a00190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161271e5761271e6126f6565b5060010190565b60006020828403121561273757600080fd5b5051919050565b600063ffffffff808316818103612757576127576126f6565b6001019392505050565b600181811c9082168061277557607f821691505b60208210810361279557634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156104e2576104e26126f6565b601f8211156105bc57600081815260208120601f850160051c810160208610156127d55750805b601f850160051c820191505b818110156108ef578281556001016127e1565b815167ffffffffffffffff81111561280e5761280e6121b9565b6128228161281c8454612761565b846127ae565b602080601f831160018114612857576000841561283f5750858301515b600019600386901b1c1916600185901b1785556108ef565b600085815260208120601f198616915b8281101561288657888601518255948401946001909101908401612867565b50858210156128a45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600083516128c68184602088016120bb565b8351908301906128da8183602088016120bb565b01949350505050565b6000602082840312156128f557600080fd5b81516106ea8161253c565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612933908301846120df565b9695505050505050565b60006020828403121561294f57600080fd5b81516106ea81612088565b634e487b7160e01b600052601260045260246000fd5b60008261297f5761297f61295a565b500490565b818103818111156104e2576104e26126f6565b6000826129a6576129a661295a565b500690565b634e487b7160e01b600052603160045260246000fd5b600082516129d38184602087016120bb565b919091019291505056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465723c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a879ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e303c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a679ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e3299574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b1a264697066735822122068252d3ffbfd8d32315fe1748335fc0eddc0d72a896aba3bc4677c333d6c877964736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c806350e35ef1116100d1578063a22cb4651161008a578063c87b56dd11610064578063c87b56dd14610425578063e31a7c0114610445578063e95a272f14610465578063e985e9c51461048557600080fd5b8063a22cb465146103dd578063b88d4fde146103fd578063c4e627c21461041057600080fd5b806350e35ef1146103285780636352211e146103485780636a2e019f1461036857806370a082311461038857806379c65068146103a857806395d89b41146103c857600080fd5b806323b872dd1161013e57806342842e0e1161011857806342842e0e146102b55780634a7c554f146102c85780634f558e79146102e85780634f6ccce71461030857600080fd5b806323b872dd14610262578063269aab0e146102755780632f745c591461029557600080fd5b806301ffc9a71461018657806306fdde03146101bb57806307546172146101dd578063081812fc1461020a578063095ea7b31461022a57806318160ddd1461023f575b600080fd5b34801561019257600080fd5b506101a66101a136600461209e565b6104a5565b60405190151581526020015b60405180910390f35b3480156101c757600080fd5b506101d06104e8565b6040516101b2919061210b565b3480156101e957600080fd5b506101f26104f7565b6040516001600160a01b0390911681526020016101b2565b34801561021657600080fd5b506101f261022536600461211e565b61052a565b61023d61023836600461214c565b610535565b005b34801561024b57600080fd5b506102546105c1565b6040519081526020016101b2565b61023d610270366004612178565b6105cb565b34801561028157600080fd5b5061023d61029036600461232c565b6105fd565b3480156102a157600080fd5b506102546102b036600461214c565b6106de565b61023d6102c3366004612178565b6106f1565b3480156102d457600080fd5b5061023d6102e3366004612361565b61070c565b3480156102f457600080fd5b506101a661030336600461211e565b61085a565b34801561031457600080fd5b5061025461032336600461211e565b610865565b34801561033457600080fd5b5061023d610343366004612423565b610870565b34801561035457600080fd5b506101f261036336600461211e565b6108f7565b34801561037457600080fd5b5061023d6103833660046124d9565b610902565b34801561039457600080fd5b506102546103a336600461251f565b610a02565b3480156103b457600080fd5b5061023d6103c336600461214c565b610a0d565b3480156103d457600080fd5b506101d0610c41565b3480156103e957600080fd5b5061023d6103f836600461254a565b610c4b565b61023d61040b366004612583565b610cff565b34801561041c57600080fd5b50610254610d38565b34801561043157600080fd5b506101d061044036600461211e565b610d50565b34801561045157600080fd5b5061023d610460366004612178565b610d5b565b34801561047157600080fd5b5061023d610480366004612603565b610df0565b34801561049157600080fd5b506101a66104a036600461262a565b610eb4565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b60606104f2610ec0565b905090565b60006104f27f79ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e31546001600160a01b031690565b60006104e282610f5f565b6000610540826108f7565b9050806001600160a01b0316836001600160a01b0316036105745760405163424a22cb60e01b815260040160405180910390fd5b336001600160a01b0382161480159061059457506105928133610eb4565b155b156105b257604051632f5de44f60e01b815260040160405180910390fd5b6105bc8383610fc2565b505050565b60006104f261104f565b6105d53382611068565b6105f257604051632f5de44f60e01b815260040160405180910390fd5b6105bc8383836110ee565b306001600160a01b0316633882ce8e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f9190612658565b6001600160a01b0316336001600160a01b0316146106985760405162461bcd60e51b815260040161068f90612675565b60405180910390fd5b60005b81518110156106da576106c860008383815181106106bb576106bb6126e0565b602002602001015161121d565b806106d28161270c565b91505061069b565b5050565b60006106ea83836112a3565b9392505050565b6105bc83838360405180602001604052806000815250610cff565b306001600160a01b0316633882ce8e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561074a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076e9190612658565b6001600160a01b0316336001600160a01b03161461079e5760405162461bcd60e51b815260040161068f90612675565b805182511461080d5760405162461bcd60e51b815260206004820152603560248201527f537465776172644c6963656e736546616365743a20746f20616e6420746f6b656044820152740dcaaa492e640d8cadccee8d040dad2e6dac2e8c6d605b1b606482015260840161068f565b60005b81518110156105bc5761084883828151811061082e5761082e6126e0565b60200260200101518383815181106106bb576106bb6126e0565b806108528161270c565b915050610810565b60006104e2826112d2565b60006104e2826112ec565b600080516020612a308339815191525460ff16156108e15760405162461bcd60e51b815260206004820152602860248201527f537465776172644c6963656e736546616365743a20616c726561647920696e696044820152671d1a585b1a5e995960c21b606482015260840161068f565b6108ef86868686868661130d565b505050505050565b60006104e2826113f7565b306001600160a01b0316633882ce8e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109649190612658565b6001600160a01b0316336001600160a01b0316146109f85760405162461bcd60e51b8152602060048201526044602482018190527f537465776172644c6963656e736546616365743a206f6e6c7920696e69746961908201527f6c206269646465722063616e2061646420746f6b656e20746f20636f6c6c65636064820152633a34b7b760e11b608482015260a40161068f565b6106da828261121d565b60006104e28261143b565b306001600160a01b0316633882ce8e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6f9190612658565b6001600160a01b0316336001600160a01b031614610af55760405162461bcd60e51b815260206004820152603760248201527f537465776172644c6963656e736546616365743a206f6e6c7920696e6974696160448201527f6c206269646465722063616e206d696e7420746f6b656e000000000000000000606482015260840161068f565b306001600160a01b031663be6a2a6d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b579190612725565b4210610bcd576040805162461bcd60e51b81526020600482015260248101919091527f537465776172644c6963656e736546616365743a2063616e6e6f74206d696e7460448201527f20616674657220696e697469616c20706572696f642073746172742074696d65606482015260840161068f565b610bd6816112d2565b15610c355760405162461bcd60e51b815260206004820152602960248201527f537465776172644c6963656e736546616365743a20546f6b656e20616c72656160448201526864792065786973747360b81b606482015260840161068f565b6106da60008383611492565b60606104f26114ae565b336001600160a01b03831603610c745760405163424a22cb60e01b815260040160405180910390fd5b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610d093383611068565b610d2657604051632f5de44f60e01b815260040160405180910390fd5b610d32848484846114cd565b50505050565b60006104f2600080516020612a708339815191525490565b60606104e282611501565b333014610de55760405162461bcd60e51b815260206004820152604c60248201527f4e6174697665537465776172644c6963656e73653a205472696767657220747260448201527f616e736665722063616e206f6e6c792062652063616c6c65642066726f6d206160648201526b1b9bdd1a195c88199858d95d60a21b608482015260a40161068f565b6105bc838383611492565b306001600160a01b0316633882ce8e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e529190612658565b6001600160a01b0316336001600160a01b031614610e825760405162461bcd60e51b815260040161068f90612675565b60005b8263ffffffff168163ffffffff1610156105bc57610ea2826116e5565b80610eac8161273e565b915050610e85565b60006106ea8383611777565b6060600080516020612a908339815191528054610edc90612761565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0890612761565b8015610f555780601f10610f2a57610100808354040283529160200191610f55565b820191906000526020600020905b815481529060010190602001808311610f3857829003601f168201915b5050505050905090565b6000610f6a826112d2565b610f875760405163c1b843ef60e01b815260040160405180910390fd5b5060009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a960205260409020546001600160a01b031690565b60008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a96020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611016826113f7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006104f2600080516020612a508339815191526117c4565b6000611073826112d2565b6110905760405163c1b843ef60e01b815260040160405180910390fd5b600061109b836113f7565b9050806001600160a01b0316846001600160a01b031614806110d65750836001600160a01b03166110cb84610f5f565b6001600160a01b0316145b806110e657506110e68185611777565b949350505050565b826001600160a01b0316611101826113f7565b6001600160a01b03161461112857604051630f2db4ad60e01b815260040160405180910390fd5b6001600160a01b03821661114f576040516340311a0960e01b815260040160405180910390fd5b61115a8383836117ce565b611165600082610fc2565b6001600160a01b0383166000908152600080516020612a1083398151915260205260409020600080516020612a50833981519152906111a490836118c3565b506001600160a01b038316600090815260028201602052604090206111c990836118cf565b506111d58183856118db565b5081836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b600080516020612a708339815191528054600080516020612a3083398151915291600190600061124d838561279b565b909155505060008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040902061128984826127f4565b506001600160a01b03841615610d3257610d3284826118f1565b6001600160a01b0382166000908152600080516020612a10833981519152602052604081206106ea90836119d4565b60006104e2600080516020612a50833981519152836119e0565b6000611306600080516020612a50833981519152836119f8565b5092915050565b600080516020612a3083398151915280546001600160a01b03878116610100026001600160a81b03199092169190911760011782557f79ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e3180549189166001600160a01b0319909216919091179055600080516020612a708339815191528590556000600080516020612a908339815191529050806113aa86826127f4565b50600181016113b985826127f4565b50600281016113c884826127f4565b506113db6301ffc9a760e01b6001611a14565b6113ed6380ac58cd60e01b6001611a14565b5050505050505050565b600080611412600080516020612a5083398151915284611a8a565b90506001600160a01b0381166104e257604051637e1a7d8b60e01b815260040160405180910390fd5b60006001600160a01b03821661146457604051630810ff9760e41b815260040160405180910390fd5b6001600160a01b0382166000908152600080516020612a10833981519152602052604090206104e2906117c4565b61149b816112d2565b15156000036105f2576105bc82826118f1565b6060600080516020612a908339815191526001018054610edc90612761565b6114d88484846110ee565b6114e484848484611a96565b610d3257604051639ff10cdd60e01b815260040160405180910390fd5b600080516020612a7083398151915254606090600080516020612a3083398151915290831061154257604051624705a760e71b815260040160405180910390fd5b60008381527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b4602052604081208054600080516020612a9083398151915292919061158c90612761565b80601f01602080910402602001604051908101604052809291908181526020018280546115b890612761565b80156116055780601f106115da57610100808354040283529160200191611605565b820191906000526020600020905b8154815290600101906020018083116115e857829003601f168201915b50505050509050600082600201805461161d90612761565b80601f016020809104026020016040519081016040528092919081815260200182805461164990612761565b80156116965780601f1061166b57610100808354040283529160200191611696565b820191906000526020600020905b81548152906001019060200180831161167957829003601f168201915b505050505090506000825111156116b05750949350505050565b806116ba87611b67565b6040516020016116cb9291906128b4565b604051602081830303815290604052945050505050919050565b600080516020612a708339815191528054600080516020612a30833981519152916001906000611715838561279b565b9091555083905061172582611b67565b6040516020016117369291906128b4565b60405160208183030381529060405261175a600080516020612a9083398151915290565b60008381526003919091016020526040902090610d3290826127f4565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b60006104e2825490565b6001600160a01b038316156118b85760405163a7c12c1160e01b815260048101829052600090309063a7c12c1190602401602060405180830381865afa15801561181c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184091906128e3565b905080156118b65760405162461bcd60e51b815260206004820152603a60248201527f537465776172644c6963656e736546616365743a2043616e6e6f74207472616e60448201527f7366657220647572696e672061756374696f6e20706572696f64000000000000606482015260840161068f565b505b6105bc838383611c68565b60006106ea8383611c73565b60006106ea8383611d2d565b60006110e684846001600160a01b038516611d70565b6001600160a01b038216611918576040516311f2988d60e11b815260040160405180910390fd5b611921816112d2565b1561193f57604051630d86bb7b60e31b815260040160405180910390fd5b61194b600083836117ce565b6001600160a01b0382166000908152600080516020612a1083398151915260205260409020600080516020612a508339815191529061198a90836118cf565b506119968183856118db565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b60006106ea8383611e0f565b600081815260018301602052604081205415156106ea565b6000808080611a078686611e5b565b9097909650945050505050565b6001600160e01b03198083169003611a3f5760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b60006106ea8383611ebe565b60006001600160a01b0384163b611aaf575060016110e6565b6000611b3063150b7a0260e01b33888787604051602401611ad39493929190612900565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050506040518060600160405280603281526020016129de603291396001600160a01b0388169190611f22565b9050600081806020019051810190611b48919061293d565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b606081600003611b8e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611bb85780611ba28161270c565b9150611bb19050600a83612970565b9150611b92565b60008167ffffffffffffffff811115611bd357611bd36121b9565b6040519080825280601f01601f191660200182016040528015611bfd576020820181803683370190505b5090505b84156110e657611c12600183612984565b9150611c1f600a86612997565b611c2a90603061279b565b60f81b818381518110611c3f57611c3f6126e0565b60200101906001600160f81b031916908160001a905350611c61600a86612970565b9450611c01565b6105bc838383611f31565b6000818152600183016020526040812054801561130657835460009085906000198101908110611ca557611ca56126e0565b9060005260206000200154905080856000016001840381548110611ccb57611ccb6126e0565b6000918252602080832090910192909255918252600186019052604090208190558354849080611cfd57611cfd6129ab565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b60008181526001830160205260408120546104e2575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b6000828152600184016020526040812054808203611dd75750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556106ea565b82856000016001830381548110611df057611df06126e0565b90600052602060002090600202016001018190555060009150506106ea565b81546000908210611e335760405163e637bf3b60e01b815260040160405180910390fd5b826000018281548110611e4857611e486126e0565b9060005260206000200154905092915050565b815460009081908310611e815760405163022fd82760e31b815260040160405180910390fd5b6000846000018481548110611e9857611e986126e0565b906000526020600020906002020190508060000154816001015492509250509250929050565b6000818152600183016020526040812054808203611eef57604051633d547ec560e21b815260040160405180910390fd5b836000016001820381548110611f0757611f076126e0565b90600052602060002090600202016001015491505092915050565b60606110e68484600085611f75565b6001600160a01b0382166105bc5760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b4602052604081206105bc91612032565b6060843b611f9657604051632270d6bf60e21b815260040160405180910390fd5b600080866001600160a01b03168587604051611fb291906129c1565b60006040518083038185875af1925050503d8060008114611fef576040519150601f19603f3d011682016040523d82523d6000602084013e611ff4565b606091505b509150915081156120085791506110e69050565b8051156120185780518082602001fd5b8360405162461bcd60e51b815260040161068f919061210b565b50805461203e90612761565b6000825580601f1061204e575050565b601f01602090049060005260206000209081019061206c919061206f565b50565b5b808211156120845760008155600101612070565b5090565b6001600160e01b03198116811461206c57600080fd5b6000602082840312156120b057600080fd5b81356106ea81612088565b60005b838110156120d65781810151838201526020016120be565b50506000910152565b600081518084526120f78160208601602086016120bb565b601f01601f19169290920160200192915050565b6020815260006106ea60208301846120df565b60006020828403121561213057600080fd5b5035919050565b6001600160a01b038116811461206c57600080fd5b6000806040838503121561215f57600080fd5b823561216a81612137565b946020939093013593505050565b60008060006060848603121561218d57600080fd5b833561219881612137565b925060208401356121a881612137565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156121f8576121f86121b9565b604052919050565b600067ffffffffffffffff82111561221a5761221a6121b9565b5060051b60200190565b600067ffffffffffffffff83111561223e5761223e6121b9565b612251601f8401601f19166020016121cf565b905082815283838301111561226557600080fd5b828260208301376000602084830101529392505050565b600082601f83011261228d57600080fd5b6106ea83833560208501612224565b600082601f8301126122ad57600080fd5b813560206122c26122bd83612200565b6121cf565b82815260059290921b840181019181810190868411156122e157600080fd5b8286015b8481101561232157803567ffffffffffffffff8111156123055760008081fd5b6123138986838b010161227c565b8452509183019183016122e5565b509695505050505050565b60006020828403121561233e57600080fd5b813567ffffffffffffffff81111561235557600080fd5b6110e68482850161229c565b6000806040838503121561237457600080fd5b823567ffffffffffffffff8082111561238c57600080fd5b818501915085601f8301126123a057600080fd5b813560206123b06122bd83612200565b82815260059290921b840181019181810190898411156123cf57600080fd5b948201945b838610156123f65785356123e781612137565b825294820194908201906123d4565b9650508601359250508082111561240c57600080fd5b506124198582860161229c565b9150509250929050565b60008060008060008060c0878903121561243c57600080fd5b863561244781612137565b9550602087013561245781612137565b945060408701359350606087013567ffffffffffffffff8082111561247b57600080fd5b6124878a838b0161227c565b9450608089013591508082111561249d57600080fd5b6124a98a838b0161227c565b935060a08901359150808211156124bf57600080fd5b506124cc89828a0161227c565b9150509295509295509295565b600080604083850312156124ec57600080fd5b82356124f781612137565b9150602083013567ffffffffffffffff81111561251357600080fd5b6124198582860161227c565b60006020828403121561253157600080fd5b81356106ea81612137565b801515811461206c57600080fd5b6000806040838503121561255d57600080fd5b823561256881612137565b915060208301356125788161253c565b809150509250929050565b6000806000806080858703121561259957600080fd5b84356125a481612137565b935060208501356125b481612137565b925060408501359150606085013567ffffffffffffffff8111156125d757600080fd5b8501601f810187136125e857600080fd5b6125f787823560208401612224565b91505092959194509250565b6000806040838503121561261657600080fd5b823563ffffffff811681146124f757600080fd5b6000806040838503121561263d57600080fd5b823561264881612137565b9150602083013561257881612137565b60006020828403121561266a57600080fd5b81516106ea81612137565b60208082526045908201527f537465776172644c6963656e736546616365743a206f6e6c7920696e6974696160408201527f6c206269646465722063616e2061646420746f6b656e7320746f20636f6c6c6560608201526431ba34b7b760d91b608082015260a00190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161271e5761271e6126f6565b5060010190565b60006020828403121561273757600080fd5b5051919050565b600063ffffffff808316818103612757576127576126f6565b6001019392505050565b600181811c9082168061277557607f821691505b60208210810361279557634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156104e2576104e26126f6565b601f8211156105bc57600081815260208120601f850160051c810160208610156127d55750805b601f850160051c820191505b818110156108ef578281556001016127e1565b815167ffffffffffffffff81111561280e5761280e6121b9565b6128228161281c8454612761565b846127ae565b602080601f831160018114612857576000841561283f5750858301515b600019600386901b1c1916600185901b1785556108ef565b600085815260208120601f198616915b8281101561288657888601518255948401946001909101908401612867565b50858210156128a45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600083516128c68184602088016120bb565b8351908301906128da8183602088016120bb565b01949350505050565b6000602082840312156128f557600080fd5b81516106ea8161253c565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612933908301846120df565b9695505050505050565b60006020828403121561294f57600080fd5b81516106ea81612088565b634e487b7160e01b600052601260045260246000fd5b60008261297f5761297f61295a565b500490565b818103818111156104e2576104e26126f6565b6000826129a6576129a661295a565b500690565b634e487b7160e01b600052603160045260246000fd5b600082516129d38184602087016120bb565b919091019291505056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465723c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a879ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e303c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a679ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e3299574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b1a264697066735822122068252d3ffbfd8d32315fe1748335fc0eddc0d72a896aba3bc4677c333d6c877964736f6c63430008110033",
  "devdoc": {
    "details": "ERC-1155 token license for Steward. Transfers are disabled during an auction",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "operator": "address to be approved",
          "tokenId": "token to approve"
        }
      },
      "balanceOf(address)": {
        "returns": {
          "_0": "quantity of tokens held"
        }
      },
      "getApproved(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "address approved to spend token"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "token owner"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "data payload",
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address to be approved",
          "status": "approval status"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "tokenByIndex(uint256)": {
        "params": {
          "index": "position in global token list to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "params": {
          "index": "position in owner's token list to query",
          "owner": "token holder to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "total supply"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      }
    },
    "title": "NativeStewardLicenseFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addTokenToCollection(address,string)": {
        "notice": "Add token to collection"
      },
      "addTokensToCollection(address[],string[])": {
        "notice": "Add tokens to collection with to"
      },
      "addTokensToCollection(string[])": {
        "notice": "Add tokens to collection"
      },
      "addTokensWithBaseURIToCollection(uint32,string)": {
        "notice": "Add tokens to collection with baseURI"
      },
      "approve(address,uint256)": {
        "notice": "grant approval to given account to spend token"
      },
      "balanceOf(address)": {
        "notice": "query the balance of given address"
      },
      "exists(uint256)": {
        "notice": "Check if token exists"
      },
      "getApproved(uint256)": {
        "notice": "get approval status for given token"
      },
      "initializeStewardLicense(address,address,uint256,string,string,string)": {
        "notice": "Initialize license"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "maxTokenCount()": {
        "notice": "Get max token count"
      },
      "mintToken(address,uint256)": {
        "notice": "Initial bidder can mint token if it doesn't exist"
      },
      "minter()": {
        "notice": "Get minter"
      },
      "name()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "ownerOf(uint256)": {
        "notice": "query the owner of given token"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given account to spend all tokens held by sender"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "symbol()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "tokenByIndex(uint256)": {
        "notice": "get token at given internal storage index"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "get token of given owner at given internal storage index"
      },
      "tokenURI(uint256)": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "totalSupply()": {
        "notice": "get total token supply"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, without checking for ERC721Receiver implementation if applicable"
      },
      "triggerTransfer(address,address,uint256)": {
        "notice": "Trigger transfer of license"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
