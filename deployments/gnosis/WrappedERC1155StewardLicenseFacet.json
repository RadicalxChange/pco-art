{
  "address": "0xfc1b38CCa95195989E105b99Fe1C36057c51cCc0",
  "abi": [
    {
      "inputs": [],
      "name": "AddressUtils__NotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__BalanceQueryZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__ERC721ReceiverNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NotTokenOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__SelfApproval",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__TokenAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Metadata__NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableMap__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableMap__NonExistentKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableSet__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintUtils__InsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "addTokenToCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "tokenURIs",
          "type": "string[]"
        },
        {
          "internalType": "bool",
          "name": "shouldMint",
          "type": "bool"
        }
      ],
      "name": "addTokensToCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "tokenURIs",
          "type": "string[]"
        }
      ],
      "name": "addTokensToCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "amount",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "shouldMint",
          "type": "bool"
        }
      ],
      "name": "addTokensWithBaseURIToCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_addToCollectionMinter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_steward",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokenCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "shouldMint",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "initializeWrappedStewardLicense",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mintToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "triggerTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf690706673114e9b3f0a845876eaa6a1727d92028d8d5b0643ac1f2d42f6162e",
  "receipt": {
    "to": null,
    "from": "0xfF5Be16460704eFd0263dB1444Eaa216b77477c5",
    "contractAddress": "0xfc1b38CCa95195989E105b99Fe1C36057c51cCc0",
    "transactionIndex": 3,
    "gasUsed": "2896740",
    "logsBloom": "0x
    "blockHash": "0x0cfe070f99bea0b8e98cff8c1e3a59c071c9b8b80d7586808b87ad33f3da5cb8",
    "transactionHash": "0xf690706673114e9b3f0a845876eaa6a1727d92028d8d5b0643ac1f2d42f6162e",
    "logs": [],
    "blockNumber": 29299299,
    "cumulativeGasUsed": "3316967",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "6c888aa10e35a22f249b25a5efb27637",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressUtils__NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__BalanceQueryZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__ERC721ReceiverNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__SelfApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__TokenAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Metadata__NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableMap__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableMap__NonExistentKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableSet__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"addTokenToCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"shouldMint\",\"type\":\"bool\"}],\"name\":\"addTokensToCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"}],\"name\":\"addTokensToCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"shouldMint\",\"type\":\"bool\"}],\"name\":\"addTokensWithBaseURIToCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addToCollectionMinter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_steward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokenCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldMint\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"initializeWrappedStewardLicense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC-721 token license for Steward that wraps existing ERC-1155. Transfers are disabled during an auction.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"operator\":\"address to be approved\",\"tokenId\":\"token to approve\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"quantity of tokens held\"}},\"getApproved(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"address approved to spend token\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"token owner\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"data payload\",\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address to be approved\",\"status\":\"approval status\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"tokenByIndex(uint256)\":{\"params\":{\"index\":\"position in global token list to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"params\":{\"index\":\"position in owner's token list to query\",\"owner\":\"token holder to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"total supply\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}}},\"title\":\"WrappedERC1155StewardLicenseFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addTokenToCollection(address,string)\":{\"notice\":\"Add token to collection\"},\"addTokensToCollection(address[],string[])\":{\"notice\":\"Add tokens to collection with to\"},\"addTokensToCollection(string[],bool)\":{\"notice\":\"Add tokens to collection\"},\"addTokensWithBaseURIToCollection(uint32,string,bool)\":{\"notice\":\"Add tokens to collection with baseURI\"},\"approve(address,uint256)\":{\"notice\":\"grant approval to given account to spend token\"},\"balanceOf(address)\":{\"notice\":\"query the balance of given address\"},\"exists(uint256)\":{\"notice\":\"Check if token exists\"},\"getApproved(uint256)\":{\"notice\":\"get approval status for given token\"},\"initializeWrappedStewardLicense(address,uint256,address,address,uint256,bool,string,string,string)\":{\"notice\":\"Initialize license\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"maxTokenCount()\":{\"notice\":\"Get max token count\"},\"mintToken(address,uint256)\":{\"notice\":\"Initial bidder can mint token if it doesn't exist\"},\"minter()\":{\"notice\":\"Get minter\"},\"name()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"ownerOf(uint256)\":{\"notice\":\"query the owner of given token\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given account to spend all tokens held by sender\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"symbol()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"tokenByIndex(uint256)\":{\"notice\":\"get token at given internal storage index\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"get token of given owner at given internal storage index\"},\"tokenURI(uint256)\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"totalSupply()\":{\"notice\":\"get total token supply\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\"},\"triggerTransfer(address,address,uint256)\":{\"notice\":\"Trigger transfer of license\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/license/facets/WrappedERC1155StewardLicenseFacet.sol\":\"WrappedERC1155StewardLicenseFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Map implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableMap {\\n    error EnumerableMap__IndexOutOfBounds();\\n    error EnumerableMap__NonExistentKey();\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        MapEntry[] _entries;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct AddressToAddressMap {\\n        Map _inner;\\n    }\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    function at(\\n        AddressToAddressMap storage map,\\n        uint256 index\\n    ) internal view returns (address, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n\\n        return (\\n            address(uint160(uint256(key))),\\n            address(uint160(uint256(value)))\\n        );\\n    }\\n\\n    function at(\\n        UintToAddressMap storage map,\\n        uint256 index\\n    ) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    function contains(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function contains(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    function length(\\n        AddressToAddressMap storage map\\n    ) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    function length(\\n        UintToAddressMap storage map\\n    ) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    function get(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal view returns (address) {\\n        return\\n            address(\\n                uint160(\\n                    uint256(_get(map._inner, bytes32(uint256(uint160(key)))))\\n                )\\n            );\\n    }\\n\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    function set(\\n        AddressToAddressMap storage map,\\n        address key,\\n        address value\\n    ) internal returns (bool) {\\n        return\\n            _set(\\n                map._inner,\\n                bytes32(uint256(uint160(key))),\\n                bytes32(uint256(uint160(value)))\\n            );\\n    }\\n\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal returns (bool) {\\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function remove(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    function toArray(\\n        AddressToAddressMap storage map\\n    )\\n        internal\\n        view\\n        returns (address[] memory keysOut, address[] memory valuesOut)\\n    {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new address[](len);\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._key))\\n                );\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function toArray(\\n        UintToAddressMap storage map\\n    )\\n        internal\\n        view\\n        returns (uint256[] memory keysOut, address[] memory valuesOut)\\n    {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new uint256[](len);\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = uint256(map._inner._entries[i]._key);\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function keys(\\n        AddressToAddressMap storage map\\n    ) internal view returns (address[] memory keysOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._key))\\n                );\\n            }\\n        }\\n    }\\n\\n    function keys(\\n        UintToAddressMap storage map\\n    ) internal view returns (uint256[] memory keysOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new uint256[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = uint256(map._inner._entries[i]._key);\\n            }\\n        }\\n    }\\n\\n    function values(\\n        AddressToAddressMap storage map\\n    ) internal view returns (address[] memory valuesOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function values(\\n        UintToAddressMap storage map\\n    ) internal view returns (address[] memory valuesOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function _at(\\n        Map storage map,\\n        uint256 index\\n    ) private view returns (bytes32, bytes32) {\\n        if (index >= map._entries.length)\\n            revert EnumerableMap__IndexOutOfBounds();\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    function _contains(\\n        Map storage map,\\n        bytes32 key\\n    ) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) revert EnumerableMap__NonExistentKey();\\n        unchecked {\\n            return map._entries[keyIndex - 1]._value;\\n        }\\n    }\\n\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) {\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            unchecked {\\n                map._entries[keyIndex - 1]._value = value;\\n            }\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) {\\n            unchecked {\\n                MapEntry storage last = map._entries[map._entries.length - 1];\\n\\n                // move last entry to now-vacant index\\n                map._entries[keyIndex - 1] = last;\\n                map._indexes[last._key] = keyIndex;\\n            }\\n\\n            // clear last index\\n            map._entries.pop();\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1140a8669a93db82ea70d7f53e112049d42a813fe7188f50aa2f7ec5e529d38a\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5cf3350069fd4a78c6bc091ee9f23ab60b4c0ff1bf4271a1f5daaa7d411d5942\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0xe6a748757a6598745e089546b8cfa3574e6da7785a6b57b95eaffe6f172db3d3\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x8688f1b897b4ddde7ebd48ee5ce1063f56d8af8ea3aa80aa1df12ff669d133a4\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC721Internal } from './IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721 is IERC721Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given address\\n     * @return balance quantity of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice query the owner of given token\\n     * @param tokenId token to query\\n     * @return owner token owner\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice grant approval to given account to spend token\\n     * @param operator address to be approved\\n     * @param tokenId token to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external payable;\\n\\n    /**\\n     * @notice get approval status for given token\\n     * @param tokenId token to query\\n     * @return operator address approved to spend token\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given account to spend all tokens held by sender\\n     * @param operator address to be approved\\n     * @param status approval status\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return status whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool status);\\n}\\n\",\"keccak256\":\"0xa14655a5bdee327bc019b583b04480e8542fa6b0788e5569077ec54805d1463a\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC721 interface needed by internal functions\\n */\\ninterface IERC721Internal {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed operator,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x8d46d596fa0e48cdcbf8bb8d6a42120351c4d1b002156bf647f95523178cbe08\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x38ca94617ab4a4cdc08d9fed753f1b17d91a9823b36f7f485cd1ed5e5324aa8f\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165Base } from './IERC165Base.sol';\\nimport { ERC165BaseInternal } from './ERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165Base is IERC165Base, ERC165BaseInternal {\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return _supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3f2268856fdd9b27946adc65010bc83992069a90034bf692ab630802a926a9c2\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xba7b4d73d42dfc9f8083ce36aed0fa2c56c73878d8bda7d64f2fb908d5e04636\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\n\\ninterface IERC165Base is IERC165, IERC165BaseInternal {}\\n\",\"keccak256\":\"0x288c50013c735cf30be90eb084589fc54bc0ee77a88ec69c3cc1efb11d7dccf4\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/DiamondBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nlibrary DiamondBaseStorage {\\n    struct Layout {\\n        // function selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) facets;\\n        // total number of selectors registered\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n        address fallbackAddress;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.DiamondBase');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74365666c0e9917d742bbab21e174dea6bc6ccf6146153e43dd9d9fe8417a36a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155MetadataInternal } from './IERC1155MetadataInternal.sol';\\n\\n/**\\n * @title ERC1155Metadata interface\\n */\\ninterface IERC1155Metadata is IERC1155MetadataInternal {\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function uri(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x5996ccbe41ca8000926401f9172fe777853be594ca516bed5d56513f24b35798\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155Metadata interface needed by internal functions\\n */\\ninterface IERC1155MetadataInternal {\\n    event URI(string value, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0x394093a86fbfebdcda356fe9407480d81434aa162afc6a3e8efbf72a4c05b98d\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../../../interfaces/IERC721.sol';\\nimport { IERC721Receiver } from '../../../interfaces/IERC721Receiver.sol';\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC721Base } from './IERC721Base.sol';\\nimport { ERC721BaseStorage } from './ERC721BaseStorage.sol';\\nimport { ERC721BaseInternal } from './ERC721BaseInternal.sol';\\n\\n/**\\n * @title Base ERC721 implementation, excluding optional extensions\\n */\\nabstract contract ERC721Base is IERC721Base, ERC721BaseInternal {\\n    using AddressUtils for address;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balanceOf(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\n        return _ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function getApproved(uint256 tokenId) public view returns (address) {\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) public view returns (bool) {\\n        return _isApprovedForAll(account, operator);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public payable {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function approve(address operator, uint256 tokenId) public payable {\\n        _handleApproveMessageValue(operator, tokenId, msg.value);\\n        address owner = ownerOf(tokenId);\\n        if (operator == owner) revert ERC721Base__SelfApproval();\\n        if (msg.sender != owner && !isApprovedForAll(owner, msg.sender))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _approve(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function setApprovalForAll(address operator, bool status) public {\\n        if (operator == msg.sender) revert ERC721Base__SelfApproval();\\n        ERC721BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n}\\n\",\"keccak256\":\"0xf0e9afe4797969cae01b1be1b785d5426b153f298960ed98919b7cd10c6a0287\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Receiver } from '../../../interfaces/IERC721Receiver.sol';\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC721BaseInternal } from './IERC721BaseInternal.sol';\\nimport { ERC721BaseStorage } from './ERC721BaseStorage.sol';\\n\\n/**\\n * @title Base ERC721 internal functions\\n */\\nabstract contract ERC721BaseInternal is IERC721BaseInternal {\\n    using AddressUtils for address;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function _balanceOf(\\n        address account\\n    ) internal view virtual returns (uint256) {\\n        if (account == address(0)) revert ERC721Base__BalanceQueryZeroAddress();\\n        return ERC721BaseStorage.layout().holderTokens[account].length();\\n    }\\n\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        address owner = ERC721BaseStorage.layout().tokenOwners.get(tokenId);\\n        if (owner == address(0)) revert ERC721Base__InvalidOwner();\\n        return owner;\\n    }\\n\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return ERC721BaseStorage.layout().tokenOwners.contains(tokenId);\\n    }\\n\\n    function _getApproved(\\n        uint256 tokenId\\n    ) internal view virtual returns (address) {\\n        if (!_exists(tokenId)) revert ERC721Base__NonExistentToken();\\n\\n        return ERC721BaseStorage.layout().tokenApprovals[tokenId];\\n    }\\n\\n    function _isApprovedForAll(\\n        address account,\\n        address operator\\n    ) internal view virtual returns (bool) {\\n        return ERC721BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        if (!_exists(tokenId)) revert ERC721Base__NonExistentToken();\\n\\n        address owner = _ownerOf(tokenId);\\n\\n        return (spender == owner ||\\n            _getApproved(tokenId) == spender ||\\n            _isApprovedForAll(owner, spender));\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        if (to == address(0)) revert ERC721Base__MintToZeroAddress();\\n        if (_exists(tokenId)) revert ERC721Base__TokenAlreadyMinted();\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, '');\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        if (!_checkOnERC721Received(address(0), to, tokenId, data))\\n            revert ERC721Base__ERC721ReceiverNotImplemented();\\n    }\\n\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = _ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        _approve(address(0), tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n        l.holderTokens[owner].remove(tokenId);\\n        l.tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        if (_ownerOf(tokenId) != from) revert ERC721Base__NotTokenOwner();\\n        if (to == address(0)) revert ERC721Base__TransferToZeroAddress();\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        _approve(address(0), tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n        l.holderTokens[from].remove(tokenId);\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, data))\\n            revert ERC721Base__ERC721ReceiverNotImplemented();\\n    }\\n\\n    function _approve(address operator, uint256 tokenId) internal virtual {\\n        ERC721BaseStorage.layout().tokenApprovals[tokenId] = operator;\\n        emit Approval(_ownerOf(tokenId), operator, tokenId);\\n    }\\n\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        bytes memory returnData = to.functionCall(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                msg.sender,\\n                from,\\n                tokenId,\\n                data\\n            ),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n\\n        bytes4 returnValue = abi.decode(returnData, (bytes4));\\n        return returnValue == type(IERC721Receiver).interfaceId;\\n    }\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called approvals for processing of included message value\\n     * @param operator beneficiary of approval\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called transfers for processing of included message value\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x864b663d78acd56c731ca1328fc11835f91ceedec4eb2b16d675a0407bbe682f\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\n\\nlibrary ERC721BaseStorage {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Base');\\n\\n    struct Layout {\\n        EnumerableMap.UintToAddressMap tokenOwners;\\n        mapping(address => EnumerableSet.UintSet) holderTokens;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9570596eca4d18e1c872177aa12125fcaba1dd7db940e5affa44e6ce2231b0a1\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../../../interfaces/IERC721.sol';\\nimport { IERC721BaseInternal } from './IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721Base is IERC721BaseInternal, IERC721 {\\n\\n}\\n\",\"keccak256\":\"0x5b99ebbddcc97f5a825cb21fb377b04c9ad184c4e4b69b92685334b6d42b7636\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Internal } from '../../../interfaces/IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721BaseInternal is IERC721Internal {\\n    error ERC721Base__NotOwnerOrApproved();\\n    error ERC721Base__SelfApproval();\\n    error ERC721Base__BalanceQueryZeroAddress();\\n    error ERC721Base__ERC721ReceiverNotImplemented();\\n    error ERC721Base__InvalidOwner();\\n    error ERC721Base__MintToZeroAddress();\\n    error ERC721Base__NonExistentToken();\\n    error ERC721Base__NotTokenOwner();\\n    error ERC721Base__TokenAlreadyMinted();\\n    error ERC721Base__TransferToZeroAddress();\\n}\\n\",\"keccak256\":\"0x3118e4b75bc32c0c5b1f7aca49d30bf618966260179d848171b2ce3e3e0b5373\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { IERC721Enumerable } from './IERC721Enumerable.sol';\\nimport { ERC721EnumerableInternal } from './ERC721EnumerableInternal.sol';\\n\\nabstract contract ERC721Enumerable is\\n    IERC721Enumerable,\\n    ERC721EnumerableInternal\\n{\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) public view returns (uint256) {\\n        return _tokenOfOwnerByIndex(owner, index);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\n        return _tokenByIndex(index);\\n    }\\n}\\n\",\"keccak256\":\"0x762db931dbe79f32fa48ba2f66b23b096e9c43e89c09310a98c10ab18b6e73b6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721EnumerableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\n\\nabstract contract ERC721EnumerableInternal {\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _totalSupply() internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().tokenOwners.length();\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenByIndex(\\n        uint256 index\\n    ) internal view returns (uint256 tokenId) {\\n        (tokenId, ) = ERC721BaseStorage.layout().tokenOwners.at(index);\\n    }\\n}\\n\",\"keccak256\":\"0xcb195fe5d264a1756a67b0c9bf8ac5493c12d25f947290196f15a67d7f3e81ad\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Enumerable {\\n    /**\\n     * @notice get total token supply\\n     * @return total supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice get token of given owner at given internal storage index\\n     * @param owner token holder to query\\n     * @param index position in owner's token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @notice get token at given internal storage index\\n     * @param index position in global token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenByIndex(\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0x4dcc1d41df336f28a2ea6fa2e7ec17e3d1745938146db5385400238a7e7a1bad\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\nimport { IERC721Metadata } from './IERC721Metadata.sol';\\n\\n/**\\n * @title ERC721 metadata extensions\\n */\\nabstract contract ERC721Metadata is IERC721Metadata, ERC721MetadataInternal {\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function name() external view virtual returns (string memory) {\\n        return _name();\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function symbol() external view virtual returns (string memory) {\\n        return _symbol();\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) external view virtual returns (string memory) {\\n        return _tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721MetadataInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xc626c723aa50119564d77caa3749a728526ca8a93b385000e3d52208b6bc40c5\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { ERC721BaseInternal } from '../base/ERC721Base.sol';\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\nimport { ERC721MetadataStorage } from './ERC721MetadataStorage.sol';\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal functions\\n */\\nabstract contract ERC721MetadataInternal is\\n    IERC721MetadataInternal,\\n    ERC721BaseInternal\\n{\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function _name() internal view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().name;\\n    }\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function _symbol() internal view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().symbol;\\n    }\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function _tokenURI(\\n        uint256 tokenId\\n    ) internal view virtual returns (string memory) {\\n        if (!_exists(tokenId)) revert ERC721Metadata__NonExistentToken();\\n\\n        ERC721MetadataStorage.Layout storage l = ERC721MetadataStorage.layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC721 hook: clear per-token URI data on burn\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (to == address(0)) {\\n            delete ERC721MetadataStorage.layout().tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x087a3302cd70010787bcdb1eb2e225eff23ac2e5ab5f77d6dc26289cb8863a19\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC721MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Metadata');\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe220a86657018b0d498708b7d8c728042d9a41e8ac230e22d1a09b6bf866332e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata interface\\n */\\ninterface IERC721Metadata is IERC721MetadataInternal {\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x281dd4dbf81c3acf12bf43bc6e0f77ae68cb2764450cce8121a53c061bf87960\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721BaseInternal } from '../base/IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal interface\\n */\\ninterface IERC721MetadataInternal is IERC721BaseInternal {\\n    error ERC721Metadata__NonExistentToken();\\n}\\n\",\"keccak256\":\"0xd420b4227db773f26b0e40cb6ea4819d340d0ee5ea59d6321c27e79ae7ecca86\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/auction/IPeriodicAuctionReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IPeriodicAuctionReadable\\n */\\ninterface IPeriodicAuctionReadable {\\n    /**\\n     * @notice Get is auction period\\n     */\\n    function isAuctionPeriod(uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Get initial period start time\\n     */\\n    function initialPeriodStartTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Get initial bidder\\n     */\\n    function initialBidder() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbee90dfb18090c21241a02d52168d7926e95f4948af6547d0ab42a6ae429d295\",\"license\":\"MIT\"},\"contracts/license/StewardLicenseBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { StewardLicenseInternal } from './StewardLicenseInternal.sol';\\nimport { IERC721 } from '@solidstate/contracts/interfaces/IERC721.sol';\\nimport { IPeriodicAuctionReadable } from '../auction/IPeriodicAuctionReadable.sol';\\n\\n/**\\n * @title StewardLicenseBase\\n */\\nabstract contract StewardLicenseBase is IERC721, StewardLicenseInternal {\\n    /**\\n     * @notice Trigger transfer of license\\n     */\\n    function triggerTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external {\\n        require(\\n            msg.sender == address(this),\\n            'NativeStewardLicense: Trigger transfer can only be called from another facet'\\n        );\\n\\n        _triggerTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Initial bidder can mint token if it doesn't exist\\n     */\\n    function mintToken(address to, uint256 tokenId) external {\\n        require(\\n            msg.sender ==\\n                IPeriodicAuctionReadable(address(this)).initialBidder(),\\n            'StewardLicenseFacet: only initial bidder can mint token'\\n        );\\n        require(\\n            block.timestamp <\\n                IPeriodicAuctionReadable(address(this))\\n                    .initialPeriodStartTime(),\\n            'StewardLicenseFacet: cannot mint after initial period start time'\\n        );\\n        require(\\n            _exists(tokenId) == false,\\n            'StewardLicenseFacet: Token already exists'\\n        );\\n\\n        _triggerTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Add token to collection\\n     */\\n    function addTokenToCollection(\\n        address to,\\n        string memory tokenURI\\n    ) external onlyRole(ADD_TOKEN_TO_COLLECTION_ROLE) {\\n        _addTokenToCollection(to, tokenURI);\\n    }\\n\\n    /**\\n     * @notice Add tokens to collection with to\\n     */\\n    function addTokensToCollection(\\n        address[] memory to,\\n        string[] memory tokenURIs\\n    ) external onlyRole(ADD_TOKEN_TO_COLLECTION_ROLE) {\\n        require(\\n            to.length == tokenURIs.length,\\n            'StewardLicenseFacet: to and tokenURIs length mismatch'\\n        );\\n\\n        for (uint256 i = 0; i < tokenURIs.length; i++) {\\n            _addTokenToCollection(to[i], tokenURIs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add tokens to collection\\n     */\\n    function addTokensToCollection(\\n        string[] memory tokenURIs,\\n        bool shouldMint\\n    ) external onlyRole(ADD_TOKEN_TO_COLLECTION_ROLE) {\\n        for (uint256 i = 0; i < tokenURIs.length; i++) {\\n            address to;\\n            if (shouldMint) {\\n                to = _initialSteward();\\n            } else {\\n                to = address(0);\\n            }\\n            _addTokenToCollection(to, tokenURIs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add tokens to collection with baseURI\\n     */\\n    function addTokensWithBaseURIToCollection(\\n        uint32 amount,\\n        string memory baseURI,\\n        bool shouldMint\\n    ) external onlyRole(ADD_TOKEN_TO_COLLECTION_ROLE) {\\n        for (uint32 i = 0; i < amount; i++) {\\n            _addTokenWithBaseURIToCollection(baseURI, shouldMint);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get max token count\\n     */\\n    function maxTokenCount() external view returns (uint256) {\\n        return _maxTokenCount();\\n    }\\n\\n    /**\\n     * @notice Check if token exists\\n     */\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x3e72f6be1bde3814e17a9f61fef21a862c6574a13df779929495f5ca1c05d6b9\",\"license\":\"MIT\"},\"contracts/license/StewardLicenseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { StewardLicenseStorage } from './StewardLicenseStorage.sol';\\nimport { ERC721Base, ERC721BaseInternal } from '@solidstate/contracts/token/ERC721/base/ERC721Base.sol';\\nimport { ERC721Enumerable } from '@solidstate/contracts/token/ERC721/enumerable/ERC721Enumerable.sol';\\nimport { ERC721Metadata } from '@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol';\\nimport { ERC721MetadataStorage } from '@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol';\\nimport { ERC165Base } from '@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol';\\nimport { IERC165 } from '@solidstate/contracts/interfaces/IERC165.sol';\\nimport { IERC721 } from '@solidstate/contracts/interfaces/IERC721.sol';\\nimport { IPeriodicAuctionReadable } from '../auction/IPeriodicAuctionReadable.sol';\\nimport { UintUtils } from '@solidstate/contracts/utils/UintUtils.sol';\\nimport { AccessControlInternal } from '@solidstate/contracts/access/access_control/AccessControlInternal.sol';\\n\\n/**\\n * @title StewardLicenseInternal\\n */\\nabstract contract StewardLicenseInternal is\\n    ERC721Base,\\n    ERC721Enumerable,\\n    ERC721Metadata,\\n    ERC165Base,\\n    AccessControlInternal\\n{\\n    using UintUtils for uint256;\\n\\n    // Add token role\\n    bytes32 internal constant ADD_TOKEN_TO_COLLECTION_ROLE =\\n        keccak256('StewardLicenseBase.ADD_TOKEN_TO_COLLECTION_ROLE');\\n\\n    /**\\n     * @notice Initialize license\\n     */\\n    function _initializeStewardLicense(\\n        address minter,\\n        address addToCollectionMinter,\\n        address initialSteward,\\n        uint256 maxTokenCount,\\n        bool shouldMint,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI\\n    ) internal {\\n        StewardLicenseStorage.Layout storage l = StewardLicenseStorage.layout();\\n\\n        l.isInitialized = true;\\n        l.initialSteward = initialSteward;\\n        l.minter = minter;\\n        l.maxTokenCount = maxTokenCount;\\n\\n        // Initialize ERC721\\n        ERC721MetadataStorage.Layout storage ls = ERC721MetadataStorage\\n            .layout();\\n        ls.name = name;\\n        ls.symbol = symbol;\\n        ls.baseURI = baseURI;\\n\\n        _setSupportsInterface(type(IERC165).interfaceId, true);\\n        _setSupportsInterface(type(IERC721).interfaceId, true);\\n        _grantRole(ADD_TOKEN_TO_COLLECTION_ROLE, addToCollectionMinter);\\n        _setRoleAdmin(\\n            ADD_TOKEN_TO_COLLECTION_ROLE,\\n            ADD_TOKEN_TO_COLLECTION_ROLE\\n        );\\n\\n        if (shouldMint) {\\n            // Mint tokens\\n            for (uint256 i = 0; i < maxTokenCount; i++) {\\n                _mint(initialSteward, i);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if initialized\\n     */\\n    function _isInitialized() internal view returns (bool) {\\n        return StewardLicenseStorage.layout().isInitialized;\\n    }\\n\\n    /**\\n     * @notice Get minter\\n     */\\n    function _minter() internal view returns (address) {\\n        return StewardLicenseStorage.layout().minter;\\n    }\\n\\n    /**\\n     * @notice Get initial steward\\n     */\\n    function _initialSteward() internal view returns (address) {\\n        return StewardLicenseStorage.layout().initialSteward;\\n    }\\n\\n    /**\\n     * @notice Trigger transfer\\n     */\\n    function _triggerTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        if (_exists(tokenId) == false) {\\n            // Mint token\\n            _mint(to, tokenId);\\n        } else {\\n            // Safe transfer is not needed. If receiver does not implement ERC721Receiver, next auction can still happen. This prevents a failed transfer from locking up license\\n            _transfer(from, to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get max token count\\n     */\\n    function _maxTokenCount() internal view returns (uint256) {\\n        return StewardLicenseStorage.layout().maxTokenCount;\\n    }\\n\\n    /**\\n     * @notice Add token to collection\\n     */\\n    function _addTokenToCollection(\\n        address to,\\n        string memory tokenURI\\n    ) internal {\\n        StewardLicenseStorage.Layout storage l = StewardLicenseStorage.layout();\\n\\n        uint256 newTokenId = l.maxTokenCount;\\n\\n        // Increment max token count\\n        l.maxTokenCount += 1;\\n\\n        // Override metadata\\n        ERC721MetadataStorage.layout().tokenURIs[newTokenId] = tokenURI;\\n\\n        if (to != address(0)) {\\n            // Mint token\\n            _mint(to, newTokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add token to collection\\n     */\\n    function _addTokenWithBaseURIToCollection(\\n        string memory _baseURI,\\n        bool shouldMint\\n    ) internal {\\n        StewardLicenseStorage.Layout storage l = StewardLicenseStorage.layout();\\n\\n        uint256 newTokenId = l.maxTokenCount;\\n\\n        // Increment max token count\\n        l.maxTokenCount += 1;\\n\\n        // Override metadata\\n        ERC721MetadataStorage.layout().tokenURIs[newTokenId] = string(\\n            abi.encodePacked(_baseURI, newTokenId.toString())\\n        );\\n\\n        if (shouldMint) {\\n            // Mint token\\n            _mint(l.initialSteward, newTokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Override token URI\\n     * @return token URI\\n     */\\n    function _tokenURI(\\n        uint256 tokenId\\n    ) internal view override returns (string memory) {\\n        StewardLicenseStorage.Layout storage licenseL = StewardLicenseStorage\\n            .layout();\\n\\n        if (tokenId >= licenseL.maxTokenCount)\\n            revert ERC721Metadata__NonExistentToken();\\n\\n        ERC721MetadataStorage.Layout storage metadataL = ERC721MetadataStorage\\n            .layout();\\n\\n        string memory tokenIdURI = metadataL.tokenURIs[tokenId];\\n        string memory baseURI = metadataL.baseURI;\\n\\n        if (bytes(tokenIdURI).length > 0) {\\n            return tokenIdURI;\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n\\n    /**\\n     * @notice Disable transfers if during auction period\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721BaseInternal, ERC721Metadata) {\\n        // Disable transfers if not mint\\n        if (from != address(0x0)) {\\n            bool isAuctionPeriod = IPeriodicAuctionReadable(address(this))\\n                .isAuctionPeriod(tokenId);\\n            require(\\n                isAuctionPeriod == false,\\n                'StewardLicenseFacet: Cannot transfer during auction period'\\n            );\\n        }\\n\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xdf94b74ca7f0650dd852ea43706af3ced479488981febb854055ef4e48307c9c\",\"license\":\"MIT\"},\"contracts/license/StewardLicenseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title StewardLicenseStorage\\n */\\nlibrary StewardLicenseStorage {\\n    struct Layout {\\n        bool isInitialized;\\n        address initialSteward;\\n        address minter;\\n        uint256 maxTokenCount;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256('pcoart.contracts.storage.StewardLicenseStorage');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x53ef6c2f3018f6e1a1da0858d402fc08cf798f234643fb79b4305bfc35eaea43\",\"license\":\"MIT\"},\"contracts/license/WrappedStewardLicenseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { WrappedStewardLicenseStorage } from './WrappedStewardLicenseStorage.sol';\\n\\n/**\\n * @title WrappedStewardLicenseInternal\\n */\\nabstract contract WrappedStewardLicenseInternal {\\n    /**\\n     * @notice Initialize license\\n     */\\n    function _initializeWrappedLicense(\\n        address wrappedTokenAddress,\\n        uint256 wrappedTokenId\\n    ) internal {\\n        WrappedStewardLicenseStorage.Layout\\n            storage l = WrappedStewardLicenseStorage.layout();\\n\\n        l.wrappedTokenAddress = wrappedTokenAddress;\\n        l.wrappedTokenId = wrappedTokenId;\\n    }\\n\\n    /**\\n     * @notice Get wrapped token address\\n     */\\n    function _wrappedTokenAddress() internal view returns (address) {\\n        return WrappedStewardLicenseStorage.layout().wrappedTokenAddress;\\n    }\\n\\n    /**\\n     * @notice Get wrapped token ID\\n     */\\n    function _wrappedTokenId() internal view returns (uint256) {\\n        return WrappedStewardLicenseStorage.layout().wrappedTokenId;\\n    }\\n}\\n\",\"keccak256\":\"0xd80f1e53a237d7a9450de695e6181dd1e8cb38e04ed6aa0111e90873adaef130\",\"license\":\"MIT\"},\"contracts/license/WrappedStewardLicenseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title WrappedStewardLicenseStorage\\n */\\nlibrary WrappedStewardLicenseStorage {\\n    struct Layout {\\n        address wrappedTokenAddress;\\n        uint256 wrappedTokenId;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256('pcoart.contracts.storage.WrappedStewardLicenseStorage');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b8f7c093a2e9f21b03513846f5bd3ff8364c1f5cda031d70de06a0a2ca7bf5d\",\"license\":\"MIT\"},\"contracts/license/facets/WrappedERC1155StewardLicenseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { ERC165Base } from '@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol';\\nimport { IERC165 } from '@solidstate/contracts/interfaces/IERC165.sol';\\nimport { IERC1155 } from '@solidstate/contracts/interfaces/IERC1155.sol';\\nimport { IERC1155Metadata } from '@solidstate/contracts/token/ERC1155/metadata/IERC1155Metadata.sol';\\nimport { DiamondBaseStorage } from '@solidstate/contracts/proxy/diamond/base/DiamondBaseStorage.sol';\\nimport { StewardLicenseInternal } from '../StewardLicenseInternal.sol';\\nimport { StewardLicenseBase } from '../StewardLicenseBase.sol';\\nimport { IERC1155Receiver } from '@solidstate/contracts/interfaces/IERC1155Receiver.sol';\\nimport { WrappedStewardLicenseInternal } from '../WrappedStewardLicenseInternal.sol';\\n\\n/**\\n * @title WrappedERC1155StewardLicenseFacet\\n * @dev ERC-721 token license for Steward that wraps existing ERC-1155. Transfers are disabled during an auction.\\n */\\ncontract WrappedERC1155StewardLicenseFacet is\\n    StewardLicenseInternal,\\n    WrappedStewardLicenseInternal,\\n    StewardLicenseBase,\\n    IERC1155Receiver\\n{\\n    /**\\n     * @notice Initialize license\\n     */\\n    function initializeWrappedStewardLicense(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address _addToCollectionMinter,\\n        address _steward,\\n        uint256 _maxTokenCount,\\n        bool shouldMint,\\n        string memory name,\\n        string memory symbol,\\n        string memory tokenURI\\n    ) external {\\n        require(\\n            _isInitialized() == false,\\n            'WrappedERC1155StewardLicenseFacet: already initialized'\\n        );\\n\\n        _initializeWrappedLicense(tokenAddress, tokenId);\\n        _initializeStewardLicense(\\n            msg.sender,\\n            _addToCollectionMinter,\\n            _steward,\\n            _maxTokenCount,\\n            shouldMint,\\n            name,\\n            symbol,\\n            tokenURI\\n        );\\n    }\\n\\n    /**\\n     * @notice Get minter\\n     */\\n    function minter() external view returns (address) {\\n        return _minter();\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata\\n    ) external view override returns (bytes4) {\\n        require(\\n            value == 1,\\n            'WrappedERC1155StewardLicenseFacet: can only receive one token'\\n        );\\n\\n        require(\\n            _isInitialized() == true,\\n            'WrappedERC1155StewardLicenseFacet: must be initialized'\\n        );\\n\\n        require(\\n            msg.sender == _wrappedTokenAddress(),\\n            'WrappedERC1155StewardLicenseFacet: cannot accept this token address'\\n        );\\n\\n        require(\\n            id == _wrappedTokenId(),\\n            'WrappedERC1155StewardLicenseFacet: cannot accept this token ID'\\n        );\\n\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata\\n    ) external view override returns (bytes4) {\\n        require(\\n            ids.length == 1 && values.length == 1 && values[0] == 1,\\n            'WrappedERC1155StewardLicenseFacet: can only receive one token'\\n        );\\n\\n        require(\\n            _isInitialized() == true,\\n            'WrappedERC1155StewardLicenseFacet: must be initialized'\\n        );\\n\\n        require(\\n            msg.sender == _wrappedTokenAddress(),\\n            'WrappedERC1155StewardLicenseFacet: cannot accept this token address'\\n        );\\n\\n        require(\\n            ids[0] == _wrappedTokenId(),\\n            'WrappedERC1155StewardLicenseFacet: cannot accept this token ID'\\n        );\\n\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x538916849dd9a1c65759e7800570b131f72a13e1a4b5d1a4bc82a62d542897cc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061336f806100206000396000f3fe6080604052600436106101b75760003560e01c80636a2e019f116100ec578063bc197c811161008a578063d111122f11610064578063d111122f146104b4578063e31a7c01146104d4578063e985e9c5146104f4578063f23a6e611461051457600080fd5b8063bc197c8114610446578063c4e627c21461047f578063c87b56dd1461049457600080fd5b806395d89b41116100c657806395d89b41146103de578063a22cb465146103f3578063b3cd1d9c14610413578063b88d4fde1461043357600080fd5b80636a2e019f1461037e57806370a082311461039e57806379c65068146103be57600080fd5b806323b872dd116101595780634a7c554f116101335780634a7c554f146102fe5780634f558e791461031e5780634f6ccce71461033e5780636352211e1461035e57600080fd5b806323b872dd146102b85780632f745c59146102cb57806342842e0e146102eb57600080fd5b8063081812fc11610195578063081812fc14610240578063095ea7b31461026057806318160ddd146102755780632107ddfe1461029857600080fd5b806301ffc9a7146101bc57806306fdde03146101f15780630754617214610213575b600080fd5b3480156101c857600080fd5b506101dc6101d736600461253f565b610534565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b50610206610577565b6040516101e891906125ac565b34801561021f57600080fd5b50610228610586565b6040516001600160a01b0390911681526020016101e8565b34801561024c57600080fd5b5061022861025b3660046125bf565b6105b9565b61027361026e3660046125fd565b6105c4565b005b34801561028157600080fd5b5061028a610650565b6040519081526020016101e8565b3480156102a457600080fd5b506102736102b33660046127b1565b61065a565b6102736102c6366004612802565b6106eb565b3480156102d757600080fd5b5061028a6102e63660046125fd565b61071d565b6102736102f9366004612802565b610730565b34801561030a57600080fd5b50610273610319366004612843565b61074b565b34801561032a57600080fd5b506101dc6103393660046125bf565b610824565b34801561034a57600080fd5b5061028a6103593660046125bf565b61082f565b34801561036a57600080fd5b506102286103793660046125bf565b61083a565b34801561038a57600080fd5b50610273610399366004612904565b610845565b3480156103aa57600080fd5b5061028a6103b9366004612949565b610867565b3480156103ca57600080fd5b506102736103d93660046125fd565b610872565b3480156103ea57600080fd5b50610206610aaa565b3480156103ff57600080fd5b5061027361040e366004612966565b610ab4565b34801561041f57600080fd5b5061027361042e366004612994565b610b68565b610273610441366004612a72565b610c4e565b34801561045257600080fd5b50610466610461366004612b76565b610c81565b6040516001600160e01b031990911681526020016101e8565b34801561048b57600080fd5b5061028a610dbf565b3480156104a057600080fd5b506102066104af3660046125bf565b610dd7565b3480156104c057600080fd5b506102736104cf366004612c34565b610de2565b3480156104e057600080fd5b506102736104ef366004612802565b610e34565b34801561050057600080fd5b506101dc61050f366004612ca0565b610ec9565b34801561052057600080fd5b5061046661052f366004612cce565b610ed5565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b6060610581610fc7565b905090565b60006105817f79ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e31546001600160a01b031690565b600061057182611066565b60006105cf8261083a565b9050806001600160a01b0316836001600160a01b0316036106035760405163424a22cb60e01b815260040160405180910390fd5b336001600160a01b0382161480159061062357506106218133610ec9565b155b1561064157604051632f5de44f60e01b815260040160405180910390fd5b61064b83836110c9565b505050565b6000610581611156565b60008051602061331a8339815191526106728161116f565b60005b83518110156106e557600083156106ab5760008051602061327a8339815191525461010090046001600160a01b031690506106af565b5060005b6106d2818684815181106106c5576106c5612d49565b602002602001015161117c565b50806106dd81612d75565b915050610675565b50505050565b6106f53382611202565b61071257604051632f5de44f60e01b815260040160405180910390fd5b61064b838383611288565b600061072983836113b7565b9392505050565b61064b83838360405180602001604052806000815250610c4e565b60008051602061331a8339815191526107638161116f565b81518351146107d75760405162461bcd60e51b815260206004820152603560248201527f537465776172644c6963656e736546616365743a20746f20616e6420746f6b656044820152740dcaaa492e640d8cadccee8d040dad2e6dac2e8c6d605b1b60648201526084015b60405180910390fd5b60005b82518110156106e5576108128482815181106107f8576107f8612d49565b60200260200101518483815181106106c5576106c5612d49565b8061081c81612d75565b9150506107da565b6000610571826113e6565b600061057182611400565b600061057182611421565b60008051602061331a83398151915261085d8161116f565b61064b838361117c565b600061057182611465565b306001600160a01b0316633882ce8e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d49190612d8e565b6001600160a01b0316336001600160a01b03161461095a5760405162461bcd60e51b815260206004820152603760248201527f537465776172644c6963656e736546616365743a206f6e6c7920696e6974696160448201527f6c206269646465722063616e206d696e7420746f6b656e00000000000000000060648201526084016107ce565b306001600160a01b031663be6a2a6d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bc9190612dab565b4210610a32576040805162461bcd60e51b81526020600482015260248101919091527f537465776172644c6963656e736546616365743a2063616e6e6f74206d696e7460448201527f20616674657220696e697469616c20706572696f642073746172742074696d6560648201526084016107ce565b610a3b816113e6565b15610a9a5760405162461bcd60e51b815260206004820152602960248201527f537465776172644c6963656e736546616365743a20546f6b656e20616c72656160448201526864792065786973747360b81b60648201526084016107ce565b610aa6600083836114bc565b5050565b60606105816114d8565b336001600160a01b03831603610add5760405163424a22cb60e01b815260040160405180910390fd5b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60008051602061327a8339815191525460ff1615610bd55760405162461bcd60e51b815260206004820152603660248201526000805160206132fa8339815191526044820152751d0e88185b1c9958591e481a5b9a5d1a585b1a5e995960521b60648201526084016107ce565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6d80546001600160a01b0319166001600160a01b038b161790557f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6e889055610c4333888888888888886114f7565b505050505050505050565b610c583383611202565b610c7557604051632f5de44f60e01b815260040160405180910390fd5b6106e584848484611642565b6000600186148015610c935750600184145b8015610cb8575084846000818110610cad57610cad612d49565b905060200201356001145b610cd45760405162461bcd60e51b81526004016107ce90612dc4565b60008051602061327a8339815191525460ff161515600114610d085760405162461bcd60e51b81526004016107ce90612e0f565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6d546001600160a01b03163314610d515760405162461bcd60e51b81526004016107ce90612e53565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6e5487876000818110610d8657610d86612d49565b9050602002013514610daa5760405162461bcd60e51b81526004016107ce90612eaa565b5063bc197c8160e01b98975050505050505050565b60006105816000805160206132ba8339815191525490565b606061057182611676565b60008051602061331a833981519152610dfa8161116f565b60005b8463ffffffff168163ffffffff161015610e2d57610e1b848461185a565b80610e2581612ef5565b915050610dfd565b5050505050565b333014610ebe5760405162461bcd60e51b815260206004820152604c60248201527f4e6174697665537465776172644c6963656e73653a205472696767657220747260448201527f616e736665722063616e206f6e6c792062652063616c6c65642066726f6d206160648201526b1b9bdd1a195c88199858d95d60a21b608482015260a4016107ce565b61064b8383836114bc565b6000610729838361190d565b600083600114610ef75760405162461bcd60e51b81526004016107ce90612dc4565b60008051602061327a8339815191525460ff161515600114610f2b5760405162461bcd60e51b81526004016107ce90612e0f565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6d546001600160a01b03163314610f745760405162461bcd60e51b81526004016107ce90612e53565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6e548514610fb45760405162461bcd60e51b81526004016107ce90612eaa565b5063f23a6e6160e01b9695505050505050565b60606000805160206132da8339815191528054610fe390612f18565b80601f016020809104026020016040519081016040528092919081815260200182805461100f90612f18565b801561105c5780601f106110315761010080835404028352916020019161105c565b820191906000526020600020905b81548152906001019060200180831161103f57829003601f168201915b5050505050905090565b6000611071826113e6565b61108e5760405163c1b843ef60e01b815260040160405180910390fd5b5060009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a960205260409020546001600160a01b031690565b60008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a96020526040902080546001600160a01b0319166001600160a01b038416908117909155819061111d82611421565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061058160008051602061329a83398151915261195a565b6111798133611964565b50565b6000805160206132ba833981519152805460008051602061327a8339815191529160019060006111ac8385612f52565b909155505060008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b4602052604090206111e88482612fb3565b506001600160a01b038416156106e5576106e584826119c6565b600061120d826113e6565b61122a5760405163c1b843ef60e01b815260040160405180910390fd5b600061123583611421565b9050806001600160a01b0316846001600160a01b031614806112705750836001600160a01b031661126584611066565b6001600160a01b0316145b806112805750611280818561190d565b949350505050565b826001600160a01b031661129b82611421565b6001600160a01b0316146112c257604051630f2db4ad60e01b815260040160405180910390fd5b6001600160a01b0382166112e9576040516340311a0960e01b815260040160405180910390fd5b6112f4838383611aa9565b6112ff6000826110c9565b6001600160a01b038316600090815260008051602061325a8339815191526020526040902060008051602061329a8339815191529061133e9083611b9e565b506001600160a01b038316600090815260028201602052604090206113639083611baa565b5061136f818385611bb6565b5081836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6001600160a01b038216600090815260008051602061325a833981519152602052604081206107299083611bcc565b600061057160008051602061329a83398151915283611bd8565b600061141a60008051602061329a83398151915283611bf0565b5092915050565b60008061143c60008051602061329a83398151915284611c0e565b90506001600160a01b03811661057157604051637e1a7d8b60e01b815260040160405180910390fd5b60006001600160a01b03821661148e57604051630810ff9760e41b815260040160405180910390fd5b6001600160a01b038216600090815260008051602061325a833981519152602052604090206105719061195a565b6114c5816113e6565b15156000036107125761064b82826119c6565b60606000805160206132da8339815191526001018054610fe390612f18565b60008051602061327a83398151915280546001600160a01b03888116610100026001600160a81b03199092169190911760011782557f79ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e318054918b166001600160a01b03199092169190911790556000805160206132ba83398151915286905560006000805160206132da8339815191529050806115948682612fb3565b50600181016115a38582612fb3565b50600281016115b28482612fb3565b506115c56301ffc9a760e01b6001611c1a565b6115d76380ac58cd60e01b6001611c1a565b6115ef60008051602061331a8339815191528a611c90565b61160760008051602061331a83398151915280611d04565b85156116365760005b878110156116345761162289826119c6565b8061162c81612d75565b915050611610565b505b50505050505050505050565b61164d848484611288565b61165984848484611d6e565b6106e557604051639ff10cdd60e01b815260040160405180910390fd5b6000805160206132ba8339815191525460609060008051602061327a8339815191529083106116b757604051624705a760e71b815260040160405180910390fd5b60008381527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040812080546000805160206132da83398151915292919061170190612f18565b80601f016020809104026020016040519081016040528092919081815260200182805461172d90612f18565b801561177a5780601f1061174f5761010080835404028352916020019161177a565b820191906000526020600020905b81548152906001019060200180831161175d57829003601f168201915b50505050509050600082600201805461179290612f18565b80601f01602080910402602001604051908101604052809291908181526020018280546117be90612f18565b801561180b5780601f106117e05761010080835404028352916020019161180b565b820191906000526020600020905b8154815290600101906020018083116117ee57829003601f168201915b505050505090506000825111156118255750949350505050565b8061182f87611e3f565b604051602001611840929190613072565b604051602081830303815290604052945050505050919050565b6000805160206132ba833981519152805460008051602061327a83398151915291600190600061188a8385612f52565b9091555084905061189a82611e3f565b6040516020016118ab929190613072565b6040516020818303038152906040526118cf6000805160206132da83398151915290565b600083815260039190910160205260409020906118ec9082612fb3565b5082156106e55781546106e59061010090046001600160a01b0316826119c6565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b6000610571825490565b61196e8282611f3f565b610aa657611984816001600160a01b0316611f76565b61198f836020611f88565b6040516020016119a09291906130a1565b60408051601f198184030181529082905262461bcd60e51b82526107ce916004016125ac565b6001600160a01b0382166119ed576040516311f2988d60e11b815260040160405180910390fd5b6119f6816113e6565b15611a1457604051630d86bb7b60e31b815260040160405180910390fd5b611a2060008383611aa9565b6001600160a01b038216600090815260008051602061325a8339815191526020526040902060008051602061329a83398151915290611a5f9083611baa565b50611a6b818385611bb6565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b6001600160a01b03831615611b935760405163a7c12c1160e01b815260048101829052600090309063a7c12c1190602401602060405180830381865afa158015611af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1b9190613116565b90508015611b915760405162461bcd60e51b815260206004820152603a60248201527f537465776172644c6963656e736546616365743a2043616e6e6f74207472616e60448201527f7366657220647572696e672061756374696f6e20706572696f6400000000000060648201526084016107ce565b505b61064b8383836120da565b600061072983836120e5565b6000610729838361219f565b600061128084846001600160a01b0385166121e2565b60006107298383612281565b60008181526001830160205260408120541515610729565b6000808080611bff86866122cd565b909450925050505b9250929050565b60006107298383612330565b6001600160e01b03198083169003611c455760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c62281160205260409020611cc79082612394565b5060405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040808220600201805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006001600160a01b0384163b611d8757506001611280565b6000611e0863150b7a0260e01b33888787604051602401611dab9493929190613133565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001613228603291396001600160a01b03881691906123a9565b9050600081806020019051810190611e209190613170565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b606081600003611e665750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e905780611e7a81612d75565b9150611e899050600a836131a3565b9150611e6a565b6000816001600160401b03811115611eaa57611eaa612629565b6040519080825280601f01601f191660200182016040528015611ed4576020820181803683370190505b5090505b841561128057611ee96001836131b7565b9150611ef6600a866131ca565b611f01906030612f52565b60f81b818381518110611f1657611f16612d49565b60200101906001600160f81b031916908160001a905350611f38600a866131a3565b9450611ed8565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040812061072990836123b8565b60606105716001600160a01b03831660145b60606000611f978360026131de565b611fa2906002612f52565b6001600160401b03811115611fb957611fb9612629565b6040519080825280601f01601f191660200182016040528015611fe3576020820181803683370190505b509050600360fc1b81600081518110611ffe57611ffe612d49565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061202d5761202d612d49565b60200101906001600160f81b031916908160001a905350600160028402015b60018111156120ba576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061207d5761207d612d49565b1a60f81b82828151811061209357612093612d49565b60200101906001600160f81b031916908160001a90535060049490941c936000190161204c565b5083156107295760405163c913478560e01b815260040160405180910390fd5b61064b8383836123da565b6000818152600183016020526040812054801561141a5783546000908590600019810190811061211757612117612d49565b906000526020600020015490508085600001600184038154811061213d5761213d612d49565b600091825260208083209091019290925591825260018601905260409020819055835484908061216f5761216f6131f5565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b6000818152600183016020526040812054610571575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b6000828152600184016020526040812054808203612249575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055610729565b8285600001600183038154811061226257612262612d49565b9060005260206000209060020201600101819055506000915050610729565b815460009082106122a55760405163e637bf3b60e01b815260040160405180910390fd5b8260000182815481106122ba576122ba612d49565b9060005260206000200154905092915050565b8154600090819083106122f35760405163022fd82760e31b815260040160405180910390fd5b600084600001848154811061230a5761230a612d49565b906000526020600020906002020190508060000154816001015492509250509250929050565b600081815260018301602052604081205480820361236157604051633d547ec560e21b815260040160405180910390fd5b83600001600182038154811061237957612379612d49565b90600052602060002090600202016001015491505092915050565b6000610729836001600160a01b03841661219f565b6060611280848460008561241e565b6001600160a01b03811660009081526001830160205260408120541515610729565b6001600160a01b03821661064b5760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040812061064b916124db565b6060843b61243f57604051632270d6bf60e21b815260040160405180910390fd5b600080866001600160a01b0316858760405161245b919061320b565b60006040518083038185875af1925050503d8060008114612498576040519150601f19603f3d011682016040523d82523d6000602084013e61249d565b606091505b509150915081156124b15791506112809050565b8051156124c15780518082602001fd5b8360405162461bcd60e51b81526004016107ce91906125ac565b5080546124e790612f18565b6000825580601f106124f7575050565b601f01602090049060005260206000209081019061117991905b808211156125255760008155600101612511565b5090565b6001600160e01b03198116811461117957600080fd5b60006020828403121561255157600080fd5b813561072981612529565b60005b8381101561257757818101518382015260200161255f565b50506000910152565b6000815180845261259881602086016020860161255c565b601f01601f19169290920160200192915050565b6020815260006107296020830184612580565b6000602082840312156125d157600080fd5b5035919050565b6001600160a01b038116811461117957600080fd5b80356125f8816125d8565b919050565b6000806040838503121561261057600080fd5b823561261b816125d8565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561266757612667612629565b604052919050565b60006001600160401b0382111561268857612688612629565b5060051b60200190565b60006001600160401b038311156126ab576126ab612629565b6126be601f8401601f191660200161263f565b90508281528383830111156126d257600080fd5b828260208301376000602084830101529392505050565b600082601f8301126126fa57600080fd5b61072983833560208501612692565b600082601f83011261271a57600080fd5b8135602061272f61272a8361266f565b61263f565b82815260059290921b8401810191818101908684111561274e57600080fd5b8286015b8481101561278d5780356001600160401b038111156127715760008081fd5b61277f8986838b01016126e9565b845250918301918301612752565b509695505050505050565b801515811461117957600080fd5b80356125f881612798565b600080604083850312156127c457600080fd5b82356001600160401b038111156127da57600080fd5b6127e685828601612709565b92505060208301356127f781612798565b809150509250929050565b60008060006060848603121561281757600080fd5b8335612822816125d8565b92506020840135612832816125d8565b929592945050506040919091013590565b6000806040838503121561285657600080fd5b82356001600160401b038082111561286d57600080fd5b818501915085601f83011261288157600080fd5b8135602061289161272a8361266f565b82815260059290921b840181019181810190898411156128b057600080fd5b948201945b838610156128d75785356128c8816125d8565b825294820194908201906128b5565b965050860135925050808211156128ed57600080fd5b506128fa85828601612709565b9150509250929050565b6000806040838503121561291757600080fd5b8235612922816125d8565b915060208301356001600160401b0381111561293d57600080fd5b6128fa858286016126e9565b60006020828403121561295b57600080fd5b8135610729816125d8565b6000806040838503121561297957600080fd5b8235612984816125d8565b915060208301356127f781612798565b60008060008060008060008060006101208a8c0312156129b357600080fd5b6129bc8a6125ed565b985060208a013597506129d160408b016125ed565b96506129df60608b016125ed565b955060808a013594506129f460a08b016127a6565b935060c08a01356001600160401b0380821115612a1057600080fd5b612a1c8d838e016126e9565b945060e08c0135915080821115612a3257600080fd5b612a3e8d838e016126e9565b93506101008c0135915080821115612a5557600080fd5b50612a628c828d016126e9565b9150509295985092959850929598565b60008060008060808587031215612a8857600080fd5b8435612a93816125d8565b93506020850135612aa3816125d8565b92506040850135915060608501356001600160401b03811115612ac557600080fd5b8501601f81018713612ad657600080fd5b612ae587823560208401612692565b91505092959194509250565b60008083601f840112612b0357600080fd5b5081356001600160401b03811115612b1a57600080fd5b6020830191508360208260051b8501011115611c0757600080fd5b60008083601f840112612b4757600080fd5b5081356001600160401b03811115612b5e57600080fd5b602083019150836020828501011115611c0757600080fd5b60008060008060008060008060a0898b031215612b9257600080fd5b8835612b9d816125d8565b97506020890135612bad816125d8565b965060408901356001600160401b0380821115612bc957600080fd5b612bd58c838d01612af1565b909850965060608b0135915080821115612bee57600080fd5b612bfa8c838d01612af1565b909650945060808b0135915080821115612c1357600080fd5b50612c208b828c01612b35565b999c989b5096995094979396929594505050565b600080600060608486031215612c4957600080fd5b833563ffffffff81168114612c5d57600080fd5b925060208401356001600160401b03811115612c7857600080fd5b612c84868287016126e9565b9250506040840135612c9581612798565b809150509250925092565b60008060408385031215612cb357600080fd5b8235612cbe816125d8565b915060208301356127f7816125d8565b60008060008060008060a08789031215612ce757600080fd5b8635612cf2816125d8565b95506020870135612d02816125d8565b9450604087013593506060870135925060808701356001600160401b03811115612d2b57600080fd5b612d3789828a01612b35565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612d8757612d87612d5f565b5060010190565b600060208284031215612da057600080fd5b8151610729816125d8565b600060208284031215612dbd57600080fd5b5051919050565b6020808252603d908201526000805160206132fa83398151915260408201527f743a2063616e206f6e6c792072656365697665206f6e6520746f6b656e000000606082015260800190565b60208082526036908201526000805160206132fa8339815191526040820152751d0e881b5d5cdd081899481a5b9a5d1a585b1a5e995960521b606082015260800190565b60208082526043908201526000805160206132fa83398151915260408201527f743a2063616e6e6f7420616363657074207468697320746f6b656e206164647260608201526265737360e81b608082015260a00190565b6020808252603e908201526000805160206132fa83398151915260408201527f743a2063616e6e6f7420616363657074207468697320746f6b656e2049440000606082015260800190565b600063ffffffff808316818103612f0e57612f0e612d5f565b6001019392505050565b600181811c90821680612f2c57607f821691505b602082108103612f4c57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561057157610571612d5f565b601f82111561064b57600081815260208120601f850160051c81016020861015612f8c5750805b601f850160051c820191505b81811015612fab57828155600101612f98565b505050505050565b81516001600160401b03811115612fcc57612fcc612629565b612fe081612fda8454612f18565b84612f65565b602080601f8311600181146130155760008415612ffd5750858301515b600019600386901b1c1916600185901b178555612fab565b600085815260208120601f198616915b8281101561304457888601518255948401946001909101908401613025565b50858210156130625787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000835161308481846020880161255c565b83519083019061309881836020880161255c565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516130d981601785016020880161255c565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161310a81602884016020880161255c565b01602801949350505050565b60006020828403121561312857600080fd5b815161072981612798565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061316690830184612580565b9695505050505050565b60006020828403121561318257600080fd5b815161072981612529565b634e487b7160e01b600052601260045260246000fd5b6000826131b2576131b261318d565b500490565b8181038181111561057157610571612d5f565b6000826131d9576131d961318d565b500690565b808202811582820484141761057157610571612d5f565b634e487b7160e01b600052603160045260246000fd5b6000825161321d81846020870161255c565b919091019291505056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465723c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a879ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e303c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a679ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e3299574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b15772617070656445524331313535537465776172644c6963656e7365466163657b62b800d8c954aa32a34a9249066e0f8761d6c1614c95cbc05c04ab0583a14ca26469706673582212207d5e57c9393be8afeb0a4391766a418b0aafda04c58dd2ff7e99d2230d352f9a64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c80636a2e019f116100ec578063bc197c811161008a578063d111122f11610064578063d111122f146104b4578063e31a7c01146104d4578063e985e9c5146104f4578063f23a6e611461051457600080fd5b8063bc197c8114610446578063c4e627c21461047f578063c87b56dd1461049457600080fd5b806395d89b41116100c657806395d89b41146103de578063a22cb465146103f3578063b3cd1d9c14610413578063b88d4fde1461043357600080fd5b80636a2e019f1461037e57806370a082311461039e57806379c65068146103be57600080fd5b806323b872dd116101595780634a7c554f116101335780634a7c554f146102fe5780634f558e791461031e5780634f6ccce71461033e5780636352211e1461035e57600080fd5b806323b872dd146102b85780632f745c59146102cb57806342842e0e146102eb57600080fd5b8063081812fc11610195578063081812fc14610240578063095ea7b31461026057806318160ddd146102755780632107ddfe1461029857600080fd5b806301ffc9a7146101bc57806306fdde03146101f15780630754617214610213575b600080fd5b3480156101c857600080fd5b506101dc6101d736600461253f565b610534565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b50610206610577565b6040516101e891906125ac565b34801561021f57600080fd5b50610228610586565b6040516001600160a01b0390911681526020016101e8565b34801561024c57600080fd5b5061022861025b3660046125bf565b6105b9565b61027361026e3660046125fd565b6105c4565b005b34801561028157600080fd5b5061028a610650565b6040519081526020016101e8565b3480156102a457600080fd5b506102736102b33660046127b1565b61065a565b6102736102c6366004612802565b6106eb565b3480156102d757600080fd5b5061028a6102e63660046125fd565b61071d565b6102736102f9366004612802565b610730565b34801561030a57600080fd5b50610273610319366004612843565b61074b565b34801561032a57600080fd5b506101dc6103393660046125bf565b610824565b34801561034a57600080fd5b5061028a6103593660046125bf565b61082f565b34801561036a57600080fd5b506102286103793660046125bf565b61083a565b34801561038a57600080fd5b50610273610399366004612904565b610845565b3480156103aa57600080fd5b5061028a6103b9366004612949565b610867565b3480156103ca57600080fd5b506102736103d93660046125fd565b610872565b3480156103ea57600080fd5b50610206610aaa565b3480156103ff57600080fd5b5061027361040e366004612966565b610ab4565b34801561041f57600080fd5b5061027361042e366004612994565b610b68565b610273610441366004612a72565b610c4e565b34801561045257600080fd5b50610466610461366004612b76565b610c81565b6040516001600160e01b031990911681526020016101e8565b34801561048b57600080fd5b5061028a610dbf565b3480156104a057600080fd5b506102066104af3660046125bf565b610dd7565b3480156104c057600080fd5b506102736104cf366004612c34565b610de2565b3480156104e057600080fd5b506102736104ef366004612802565b610e34565b34801561050057600080fd5b506101dc61050f366004612ca0565b610ec9565b34801561052057600080fd5b5061046661052f366004612cce565b610ed5565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b6060610581610fc7565b905090565b60006105817f79ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e31546001600160a01b031690565b600061057182611066565b60006105cf8261083a565b9050806001600160a01b0316836001600160a01b0316036106035760405163424a22cb60e01b815260040160405180910390fd5b336001600160a01b0382161480159061062357506106218133610ec9565b155b1561064157604051632f5de44f60e01b815260040160405180910390fd5b61064b83836110c9565b505050565b6000610581611156565b60008051602061331a8339815191526106728161116f565b60005b83518110156106e557600083156106ab5760008051602061327a8339815191525461010090046001600160a01b031690506106af565b5060005b6106d2818684815181106106c5576106c5612d49565b602002602001015161117c565b50806106dd81612d75565b915050610675565b50505050565b6106f53382611202565b61071257604051632f5de44f60e01b815260040160405180910390fd5b61064b838383611288565b600061072983836113b7565b9392505050565b61064b83838360405180602001604052806000815250610c4e565b60008051602061331a8339815191526107638161116f565b81518351146107d75760405162461bcd60e51b815260206004820152603560248201527f537465776172644c6963656e736546616365743a20746f20616e6420746f6b656044820152740dcaaa492e640d8cadccee8d040dad2e6dac2e8c6d605b1b60648201526084015b60405180910390fd5b60005b82518110156106e5576108128482815181106107f8576107f8612d49565b60200260200101518483815181106106c5576106c5612d49565b8061081c81612d75565b9150506107da565b6000610571826113e6565b600061057182611400565b600061057182611421565b60008051602061331a83398151915261085d8161116f565b61064b838361117c565b600061057182611465565b306001600160a01b0316633882ce8e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d49190612d8e565b6001600160a01b0316336001600160a01b03161461095a5760405162461bcd60e51b815260206004820152603760248201527f537465776172644c6963656e736546616365743a206f6e6c7920696e6974696160448201527f6c206269646465722063616e206d696e7420746f6b656e00000000000000000060648201526084016107ce565b306001600160a01b031663be6a2a6d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bc9190612dab565b4210610a32576040805162461bcd60e51b81526020600482015260248101919091527f537465776172644c6963656e736546616365743a2063616e6e6f74206d696e7460448201527f20616674657220696e697469616c20706572696f642073746172742074696d6560648201526084016107ce565b610a3b816113e6565b15610a9a5760405162461bcd60e51b815260206004820152602960248201527f537465776172644c6963656e736546616365743a20546f6b656e20616c72656160448201526864792065786973747360b81b60648201526084016107ce565b610aa6600083836114bc565b5050565b60606105816114d8565b336001600160a01b03831603610add5760405163424a22cb60e01b815260040160405180910390fd5b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60008051602061327a8339815191525460ff1615610bd55760405162461bcd60e51b815260206004820152603660248201526000805160206132fa8339815191526044820152751d0e88185b1c9958591e481a5b9a5d1a585b1a5e995960521b60648201526084016107ce565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6d80546001600160a01b0319166001600160a01b038b161790557f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6e889055610c4333888888888888886114f7565b505050505050505050565b610c583383611202565b610c7557604051632f5de44f60e01b815260040160405180910390fd5b6106e584848484611642565b6000600186148015610c935750600184145b8015610cb8575084846000818110610cad57610cad612d49565b905060200201356001145b610cd45760405162461bcd60e51b81526004016107ce90612dc4565b60008051602061327a8339815191525460ff161515600114610d085760405162461bcd60e51b81526004016107ce90612e0f565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6d546001600160a01b03163314610d515760405162461bcd60e51b81526004016107ce90612e53565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6e5487876000818110610d8657610d86612d49565b9050602002013514610daa5760405162461bcd60e51b81526004016107ce90612eaa565b5063bc197c8160e01b98975050505050505050565b60006105816000805160206132ba8339815191525490565b606061057182611676565b60008051602061331a833981519152610dfa8161116f565b60005b8463ffffffff168163ffffffff161015610e2d57610e1b848461185a565b80610e2581612ef5565b915050610dfd565b5050505050565b333014610ebe5760405162461bcd60e51b815260206004820152604c60248201527f4e6174697665537465776172644c6963656e73653a205472696767657220747260448201527f616e736665722063616e206f6e6c792062652063616c6c65642066726f6d206160648201526b1b9bdd1a195c88199858d95d60a21b608482015260a4016107ce565b61064b8383836114bc565b6000610729838361190d565b600083600114610ef75760405162461bcd60e51b81526004016107ce90612dc4565b60008051602061327a8339815191525460ff161515600114610f2b5760405162461bcd60e51b81526004016107ce90612e0f565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6d546001600160a01b03163314610f745760405162461bcd60e51b81526004016107ce90612e53565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6e548514610fb45760405162461bcd60e51b81526004016107ce90612eaa565b5063f23a6e6160e01b9695505050505050565b60606000805160206132da8339815191528054610fe390612f18565b80601f016020809104026020016040519081016040528092919081815260200182805461100f90612f18565b801561105c5780601f106110315761010080835404028352916020019161105c565b820191906000526020600020905b81548152906001019060200180831161103f57829003601f168201915b5050505050905090565b6000611071826113e6565b61108e5760405163c1b843ef60e01b815260040160405180910390fd5b5060009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a960205260409020546001600160a01b031690565b60008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a96020526040902080546001600160a01b0319166001600160a01b038416908117909155819061111d82611421565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061058160008051602061329a83398151915261195a565b6111798133611964565b50565b6000805160206132ba833981519152805460008051602061327a8339815191529160019060006111ac8385612f52565b909155505060008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b4602052604090206111e88482612fb3565b506001600160a01b038416156106e5576106e584826119c6565b600061120d826113e6565b61122a5760405163c1b843ef60e01b815260040160405180910390fd5b600061123583611421565b9050806001600160a01b0316846001600160a01b031614806112705750836001600160a01b031661126584611066565b6001600160a01b0316145b806112805750611280818561190d565b949350505050565b826001600160a01b031661129b82611421565b6001600160a01b0316146112c257604051630f2db4ad60e01b815260040160405180910390fd5b6001600160a01b0382166112e9576040516340311a0960e01b815260040160405180910390fd5b6112f4838383611aa9565b6112ff6000826110c9565b6001600160a01b038316600090815260008051602061325a8339815191526020526040902060008051602061329a8339815191529061133e9083611b9e565b506001600160a01b038316600090815260028201602052604090206113639083611baa565b5061136f818385611bb6565b5081836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6001600160a01b038216600090815260008051602061325a833981519152602052604081206107299083611bcc565b600061057160008051602061329a83398151915283611bd8565b600061141a60008051602061329a83398151915283611bf0565b5092915050565b60008061143c60008051602061329a83398151915284611c0e565b90506001600160a01b03811661057157604051637e1a7d8b60e01b815260040160405180910390fd5b60006001600160a01b03821661148e57604051630810ff9760e41b815260040160405180910390fd5b6001600160a01b038216600090815260008051602061325a833981519152602052604090206105719061195a565b6114c5816113e6565b15156000036107125761064b82826119c6565b60606000805160206132da8339815191526001018054610fe390612f18565b60008051602061327a83398151915280546001600160a01b03888116610100026001600160a81b03199092169190911760011782557f79ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e318054918b166001600160a01b03199092169190911790556000805160206132ba83398151915286905560006000805160206132da8339815191529050806115948682612fb3565b50600181016115a38582612fb3565b50600281016115b28482612fb3565b506115c56301ffc9a760e01b6001611c1a565b6115d76380ac58cd60e01b6001611c1a565b6115ef60008051602061331a8339815191528a611c90565b61160760008051602061331a83398151915280611d04565b85156116365760005b878110156116345761162289826119c6565b8061162c81612d75565b915050611610565b505b50505050505050505050565b61164d848484611288565b61165984848484611d6e565b6106e557604051639ff10cdd60e01b815260040160405180910390fd5b6000805160206132ba8339815191525460609060008051602061327a8339815191529083106116b757604051624705a760e71b815260040160405180910390fd5b60008381527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040812080546000805160206132da83398151915292919061170190612f18565b80601f016020809104026020016040519081016040528092919081815260200182805461172d90612f18565b801561177a5780601f1061174f5761010080835404028352916020019161177a565b820191906000526020600020905b81548152906001019060200180831161175d57829003601f168201915b50505050509050600082600201805461179290612f18565b80601f01602080910402602001604051908101604052809291908181526020018280546117be90612f18565b801561180b5780601f106117e05761010080835404028352916020019161180b565b820191906000526020600020905b8154815290600101906020018083116117ee57829003601f168201915b505050505090506000825111156118255750949350505050565b8061182f87611e3f565b604051602001611840929190613072565b604051602081830303815290604052945050505050919050565b6000805160206132ba833981519152805460008051602061327a83398151915291600190600061188a8385612f52565b9091555084905061189a82611e3f565b6040516020016118ab929190613072565b6040516020818303038152906040526118cf6000805160206132da83398151915290565b600083815260039190910160205260409020906118ec9082612fb3565b5082156106e55781546106e59061010090046001600160a01b0316826119c6565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b6000610571825490565b61196e8282611f3f565b610aa657611984816001600160a01b0316611f76565b61198f836020611f88565b6040516020016119a09291906130a1565b60408051601f198184030181529082905262461bcd60e51b82526107ce916004016125ac565b6001600160a01b0382166119ed576040516311f2988d60e11b815260040160405180910390fd5b6119f6816113e6565b15611a1457604051630d86bb7b60e31b815260040160405180910390fd5b611a2060008383611aa9565b6001600160a01b038216600090815260008051602061325a8339815191526020526040902060008051602061329a83398151915290611a5f9083611baa565b50611a6b818385611bb6565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b6001600160a01b03831615611b935760405163a7c12c1160e01b815260048101829052600090309063a7c12c1190602401602060405180830381865afa158015611af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1b9190613116565b90508015611b915760405162461bcd60e51b815260206004820152603a60248201527f537465776172644c6963656e736546616365743a2043616e6e6f74207472616e60448201527f7366657220647572696e672061756374696f6e20706572696f6400000000000060648201526084016107ce565b505b61064b8383836120da565b600061072983836120e5565b6000610729838361219f565b600061128084846001600160a01b0385166121e2565b60006107298383612281565b60008181526001830160205260408120541515610729565b6000808080611bff86866122cd565b909450925050505b9250929050565b60006107298383612330565b6001600160e01b03198083169003611c455760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c62281160205260409020611cc79082612394565b5060405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040808220600201805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006001600160a01b0384163b611d8757506001611280565b6000611e0863150b7a0260e01b33888787604051602401611dab9493929190613133565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001613228603291396001600160a01b03881691906123a9565b9050600081806020019051810190611e209190613170565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b606081600003611e665750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e905780611e7a81612d75565b9150611e899050600a836131a3565b9150611e6a565b6000816001600160401b03811115611eaa57611eaa612629565b6040519080825280601f01601f191660200182016040528015611ed4576020820181803683370190505b5090505b841561128057611ee96001836131b7565b9150611ef6600a866131ca565b611f01906030612f52565b60f81b818381518110611f1657611f16612d49565b60200101906001600160f81b031916908160001a905350611f38600a866131a3565b9450611ed8565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040812061072990836123b8565b60606105716001600160a01b03831660145b60606000611f978360026131de565b611fa2906002612f52565b6001600160401b03811115611fb957611fb9612629565b6040519080825280601f01601f191660200182016040528015611fe3576020820181803683370190505b509050600360fc1b81600081518110611ffe57611ffe612d49565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061202d5761202d612d49565b60200101906001600160f81b031916908160001a905350600160028402015b60018111156120ba576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061207d5761207d612d49565b1a60f81b82828151811061209357612093612d49565b60200101906001600160f81b031916908160001a90535060049490941c936000190161204c565b5083156107295760405163c913478560e01b815260040160405180910390fd5b61064b8383836123da565b6000818152600183016020526040812054801561141a5783546000908590600019810190811061211757612117612d49565b906000526020600020015490508085600001600184038154811061213d5761213d612d49565b600091825260208083209091019290925591825260018601905260409020819055835484908061216f5761216f6131f5565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b6000818152600183016020526040812054610571575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b6000828152600184016020526040812054808203612249575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055610729565b8285600001600183038154811061226257612262612d49565b9060005260206000209060020201600101819055506000915050610729565b815460009082106122a55760405163e637bf3b60e01b815260040160405180910390fd5b8260000182815481106122ba576122ba612d49565b9060005260206000200154905092915050565b8154600090819083106122f35760405163022fd82760e31b815260040160405180910390fd5b600084600001848154811061230a5761230a612d49565b906000526020600020906002020190508060000154816001015492509250509250929050565b600081815260018301602052604081205480820361236157604051633d547ec560e21b815260040160405180910390fd5b83600001600182038154811061237957612379612d49565b90600052602060002090600202016001015491505092915050565b6000610729836001600160a01b03841661219f565b6060611280848460008561241e565b6001600160a01b03811660009081526001830160205260408120541515610729565b6001600160a01b03821661064b5760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040812061064b916124db565b6060843b61243f57604051632270d6bf60e21b815260040160405180910390fd5b600080866001600160a01b0316858760405161245b919061320b565b60006040518083038185875af1925050503d8060008114612498576040519150601f19603f3d011682016040523d82523d6000602084013e61249d565b606091505b509150915081156124b15791506112809050565b8051156124c15780518082602001fd5b8360405162461bcd60e51b81526004016107ce91906125ac565b5080546124e790612f18565b6000825580601f106124f7575050565b601f01602090049060005260206000209081019061117991905b808211156125255760008155600101612511565b5090565b6001600160e01b03198116811461117957600080fd5b60006020828403121561255157600080fd5b813561072981612529565b60005b8381101561257757818101518382015260200161255f565b50506000910152565b6000815180845261259881602086016020860161255c565b601f01601f19169290920160200192915050565b6020815260006107296020830184612580565b6000602082840312156125d157600080fd5b5035919050565b6001600160a01b038116811461117957600080fd5b80356125f8816125d8565b919050565b6000806040838503121561261057600080fd5b823561261b816125d8565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561266757612667612629565b604052919050565b60006001600160401b0382111561268857612688612629565b5060051b60200190565b60006001600160401b038311156126ab576126ab612629565b6126be601f8401601f191660200161263f565b90508281528383830111156126d257600080fd5b828260208301376000602084830101529392505050565b600082601f8301126126fa57600080fd5b61072983833560208501612692565b600082601f83011261271a57600080fd5b8135602061272f61272a8361266f565b61263f565b82815260059290921b8401810191818101908684111561274e57600080fd5b8286015b8481101561278d5780356001600160401b038111156127715760008081fd5b61277f8986838b01016126e9565b845250918301918301612752565b509695505050505050565b801515811461117957600080fd5b80356125f881612798565b600080604083850312156127c457600080fd5b82356001600160401b038111156127da57600080fd5b6127e685828601612709565b92505060208301356127f781612798565b809150509250929050565b60008060006060848603121561281757600080fd5b8335612822816125d8565b92506020840135612832816125d8565b929592945050506040919091013590565b6000806040838503121561285657600080fd5b82356001600160401b038082111561286d57600080fd5b818501915085601f83011261288157600080fd5b8135602061289161272a8361266f565b82815260059290921b840181019181810190898411156128b057600080fd5b948201945b838610156128d75785356128c8816125d8565b825294820194908201906128b5565b965050860135925050808211156128ed57600080fd5b506128fa85828601612709565b9150509250929050565b6000806040838503121561291757600080fd5b8235612922816125d8565b915060208301356001600160401b0381111561293d57600080fd5b6128fa858286016126e9565b60006020828403121561295b57600080fd5b8135610729816125d8565b6000806040838503121561297957600080fd5b8235612984816125d8565b915060208301356127f781612798565b60008060008060008060008060006101208a8c0312156129b357600080fd5b6129bc8a6125ed565b985060208a013597506129d160408b016125ed565b96506129df60608b016125ed565b955060808a013594506129f460a08b016127a6565b935060c08a01356001600160401b0380821115612a1057600080fd5b612a1c8d838e016126e9565b945060e08c0135915080821115612a3257600080fd5b612a3e8d838e016126e9565b93506101008c0135915080821115612a5557600080fd5b50612a628c828d016126e9565b9150509295985092959850929598565b60008060008060808587031215612a8857600080fd5b8435612a93816125d8565b93506020850135612aa3816125d8565b92506040850135915060608501356001600160401b03811115612ac557600080fd5b8501601f81018713612ad657600080fd5b612ae587823560208401612692565b91505092959194509250565b60008083601f840112612b0357600080fd5b5081356001600160401b03811115612b1a57600080fd5b6020830191508360208260051b8501011115611c0757600080fd5b60008083601f840112612b4757600080fd5b5081356001600160401b03811115612b5e57600080fd5b602083019150836020828501011115611c0757600080fd5b60008060008060008060008060a0898b031215612b9257600080fd5b8835612b9d816125d8565b97506020890135612bad816125d8565b965060408901356001600160401b0380821115612bc957600080fd5b612bd58c838d01612af1565b909850965060608b0135915080821115612bee57600080fd5b612bfa8c838d01612af1565b909650945060808b0135915080821115612c1357600080fd5b50612c208b828c01612b35565b999c989b5096995094979396929594505050565b600080600060608486031215612c4957600080fd5b833563ffffffff81168114612c5d57600080fd5b925060208401356001600160401b03811115612c7857600080fd5b612c84868287016126e9565b9250506040840135612c9581612798565b809150509250925092565b60008060408385031215612cb357600080fd5b8235612cbe816125d8565b915060208301356127f7816125d8565b60008060008060008060a08789031215612ce757600080fd5b8635612cf2816125d8565b95506020870135612d02816125d8565b9450604087013593506060870135925060808701356001600160401b03811115612d2b57600080fd5b612d3789828a01612b35565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612d8757612d87612d5f565b5060010190565b600060208284031215612da057600080fd5b8151610729816125d8565b600060208284031215612dbd57600080fd5b5051919050565b6020808252603d908201526000805160206132fa83398151915260408201527f743a2063616e206f6e6c792072656365697665206f6e6520746f6b656e000000606082015260800190565b60208082526036908201526000805160206132fa8339815191526040820152751d0e881b5d5cdd081899481a5b9a5d1a585b1a5e995960521b606082015260800190565b60208082526043908201526000805160206132fa83398151915260408201527f743a2063616e6e6f7420616363657074207468697320746f6b656e206164647260608201526265737360e81b608082015260a00190565b6020808252603e908201526000805160206132fa83398151915260408201527f743a2063616e6e6f7420616363657074207468697320746f6b656e2049440000606082015260800190565b600063ffffffff808316818103612f0e57612f0e612d5f565b6001019392505050565b600181811c90821680612f2c57607f821691505b602082108103612f4c57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561057157610571612d5f565b601f82111561064b57600081815260208120601f850160051c81016020861015612f8c5750805b601f850160051c820191505b81811015612fab57828155600101612f98565b505050505050565b81516001600160401b03811115612fcc57612fcc612629565b612fe081612fda8454612f18565b84612f65565b602080601f8311600181146130155760008415612ffd5750858301515b600019600386901b1c1916600185901b178555612fab565b600085815260208120601f198616915b8281101561304457888601518255948401946001909101908401613025565b50858210156130625787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000835161308481846020880161255c565b83519083019061309881836020880161255c565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516130d981601785016020880161255c565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161310a81602884016020880161255c565b01602801949350505050565b60006020828403121561312857600080fd5b815161072981612798565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061316690830184612580565b9695505050505050565b60006020828403121561318257600080fd5b815161072981612529565b634e487b7160e01b600052601260045260246000fd5b6000826131b2576131b261318d565b500490565b8181038181111561057157610571612d5f565b6000826131d9576131d961318d565b500690565b808202811582820484141761057157610571612d5f565b634e487b7160e01b600052603160045260246000fd5b6000825161321d81846020870161255c565b919091019291505056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465723c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a879ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e303c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a679ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e3299574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b15772617070656445524331313535537465776172644c6963656e7365466163657b62b800d8c954aa32a34a9249066e0f8761d6c1614c95cbc05c04ab0583a14ca26469706673582212207d5e57c9393be8afeb0a4391766a418b0aafda04c58dd2ff7e99d2230d352f9a64736f6c63430008110033",
  "devdoc": {
    "details": "ERC-721 token license for Steward that wraps existing ERC-1155. Transfers are disabled during an auction.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "operator": "address to be approved",
          "tokenId": "token to approve"
        }
      },
      "balanceOf(address)": {
        "returns": {
          "_0": "quantity of tokens held"
        }
      },
      "getApproved(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "address approved to spend token"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "token owner"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "data payload",
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address to be approved",
          "status": "approval status"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "tokenByIndex(uint256)": {
        "params": {
          "index": "position in global token list to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "params": {
          "index": "position in owner's token list to query",
          "owner": "token holder to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "total supply"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      }
    },
    "title": "WrappedERC1155StewardLicenseFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addTokenToCollection(address,string)": {
        "notice": "Add token to collection"
      },
      "addTokensToCollection(address[],string[])": {
        "notice": "Add tokens to collection with to"
      },
      "addTokensToCollection(string[],bool)": {
        "notice": "Add tokens to collection"
      },
      "addTokensWithBaseURIToCollection(uint32,string,bool)": {
        "notice": "Add tokens to collection with baseURI"
      },
      "approve(address,uint256)": {
        "notice": "grant approval to given account to spend token"
      },
      "balanceOf(address)": {
        "notice": "query the balance of given address"
      },
      "exists(uint256)": {
        "notice": "Check if token exists"
      },
      "getApproved(uint256)": {
        "notice": "get approval status for given token"
      },
      "initializeWrappedStewardLicense(address,uint256,address,address,uint256,bool,string,string,string)": {
        "notice": "Initialize license"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "maxTokenCount()": {
        "notice": "Get max token count"
      },
      "mintToken(address,uint256)": {
        "notice": "Initial bidder can mint token if it doesn't exist"
      },
      "minter()": {
        "notice": "Get minter"
      },
      "name()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "ownerOf(uint256)": {
        "notice": "query the owner of given token"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given account to spend all tokens held by sender"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "symbol()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "tokenByIndex(uint256)": {
        "notice": "get token at given internal storage index"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "get token of given owner at given internal storage index"
      },
      "tokenURI(uint256)": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "totalSupply()": {
        "notice": "get total token supply"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, without checking for ERC721Receiver implementation if applicable"
      },
      "triggerTransfer(address,address,uint256)": {
        "notice": "Trigger transfer of license"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
