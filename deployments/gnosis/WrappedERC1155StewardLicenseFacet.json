{
  "address": "0xD865a309A3B3f646C21426DF127EBa272410D8b9",
  "abi": [
    {
      "inputs": [],
      "name": "AddressUtils__NotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__BalanceQueryZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__ERC721ReceiverNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__NotTokenOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__SelfApproval",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__TokenAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Base__TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721Metadata__NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableMap__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableMap__NonExistentKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnumerableSet__IndexOutOfBounds",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_steward",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "initializeWrappedStewardLicense",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "triggerTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf96bd8b5257029b5027b29e0df707ad3abd7d027e9089137c72e1b9834ef5ae0",
  "receipt": {
    "to": null,
    "from": "0xfF5Be16460704eFd0263dB1444Eaa216b77477c5",
    "contractAddress": "0xD865a309A3B3f646C21426DF127EBa272410D8b9",
    "transactionIndex": 9,
    "gasUsed": "2062810",
    "logsBloom": "0x
    "blockHash": "0x1941ee86973b6de1c66d02ea45e74a6d3cccd4473ec8aa0a11af88b0b4f5858c",
    "transactionHash": "0xf96bd8b5257029b5027b29e0df707ad3abd7d027e9089137c72e1b9834ef5ae0",
    "logs": [],
    "blockNumber": 28933038,
    "cumulativeGasUsed": "3504043",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "02d2f8229a72693ac4948d5d0530585f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressUtils__NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__BalanceQueryZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__ERC721ReceiverNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__SelfApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__TokenAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Base__TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Metadata__NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableMap__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableMap__NonExistentKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnumerableSet__IndexOutOfBounds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_steward\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"initializeWrappedStewardLicense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC-721 token license for Steward that wraps existing ERC-1155. Transfers are disabled during an auction.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"operator\":\"address to be approved\",\"tokenId\":\"token to approve\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"quantity of tokens held\"}},\"getApproved(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"address approved to spend token\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"token owner\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"data payload\",\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address to be approved\",\"status\":\"approval status\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"tokenByIndex(uint256)\":{\"params\":{\"index\":\"position in global token list to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"params\":{\"index\":\"position in owner's token list to query\",\"owner\":\"token holder to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"total supply\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}}},\"title\":\"WrappedERC1155StewardLicenseFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"grant approval to given account to spend token\"},\"balanceOf(address)\":{\"notice\":\"query the balance of given address\"},\"getApproved(uint256)\":{\"notice\":\"get approval status for given token\"},\"initializeWrappedStewardLicense(address,uint256,address,string,string,string)\":{\"notice\":\"Initialize license\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"name()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"ownerOf(uint256)\":{\"notice\":\"query the owner of given token\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given account to spend all tokens held by sender\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"symbol()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"tokenByIndex(uint256)\":{\"notice\":\"get token at given internal storage index\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"get token of given owner at given internal storage index\"},\"tokenURI(uint256)\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"totalSupply()\":{\"notice\":\"get total token supply\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\"},\"triggerTransfer(address,address,uint256)\":{\"notice\":\"Trigger transfer of license\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/license/facets/WrappedERC1155StewardLicenseFacet.sol\":\"WrappedERC1155StewardLicenseFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/data/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Map implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableMap {\\n    error EnumerableMap__IndexOutOfBounds();\\n    error EnumerableMap__NonExistentKey();\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        MapEntry[] _entries;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct AddressToAddressMap {\\n        Map _inner;\\n    }\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    function at(\\n        AddressToAddressMap storage map,\\n        uint256 index\\n    ) internal view returns (address, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n\\n        return (\\n            address(uint160(uint256(key))),\\n            address(uint160(uint256(value)))\\n        );\\n    }\\n\\n    function at(\\n        UintToAddressMap storage map,\\n        uint256 index\\n    ) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    function contains(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function contains(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    function length(\\n        AddressToAddressMap storage map\\n    ) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    function length(\\n        UintToAddressMap storage map\\n    ) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    function get(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal view returns (address) {\\n        return\\n            address(\\n                uint160(\\n                    uint256(_get(map._inner, bytes32(uint256(uint160(key)))))\\n                )\\n            );\\n    }\\n\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    function set(\\n        AddressToAddressMap storage map,\\n        address key,\\n        address value\\n    ) internal returns (bool) {\\n        return\\n            _set(\\n                map._inner,\\n                bytes32(uint256(uint160(key))),\\n                bytes32(uint256(uint160(value)))\\n            );\\n    }\\n\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        AddressToAddressMap storage map,\\n        address key\\n    ) internal returns (bool) {\\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function remove(\\n        UintToAddressMap storage map,\\n        uint256 key\\n    ) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    function toArray(\\n        AddressToAddressMap storage map\\n    )\\n        internal\\n        view\\n        returns (address[] memory keysOut, address[] memory valuesOut)\\n    {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new address[](len);\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._key))\\n                );\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function toArray(\\n        UintToAddressMap storage map\\n    )\\n        internal\\n        view\\n        returns (uint256[] memory keysOut, address[] memory valuesOut)\\n    {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new uint256[](len);\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = uint256(map._inner._entries[i]._key);\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function keys(\\n        AddressToAddressMap storage map\\n    ) internal view returns (address[] memory keysOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._key))\\n                );\\n            }\\n        }\\n    }\\n\\n    function keys(\\n        UintToAddressMap storage map\\n    ) internal view returns (uint256[] memory keysOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        keysOut = new uint256[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                keysOut[i] = uint256(map._inner._entries[i]._key);\\n            }\\n        }\\n    }\\n\\n    function values(\\n        AddressToAddressMap storage map\\n    ) internal view returns (address[] memory valuesOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function values(\\n        UintToAddressMap storage map\\n    ) internal view returns (address[] memory valuesOut) {\\n        uint256 len = map._inner._entries.length;\\n\\n        valuesOut = new address[](len);\\n\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                valuesOut[i] = address(\\n                    uint160(uint256(map._inner._entries[i]._value))\\n                );\\n            }\\n        }\\n    }\\n\\n    function _at(\\n        Map storage map,\\n        uint256 index\\n    ) private view returns (bytes32, bytes32) {\\n        if (index >= map._entries.length)\\n            revert EnumerableMap__IndexOutOfBounds();\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    function _contains(\\n        Map storage map,\\n        bytes32 key\\n    ) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) revert EnumerableMap__NonExistentKey();\\n        unchecked {\\n            return map._entries[keyIndex - 1]._value;\\n        }\\n    }\\n\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) {\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            unchecked {\\n                map._entries[keyIndex - 1]._value = value;\\n            }\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) {\\n            unchecked {\\n                MapEntry storage last = map._entries[map._entries.length - 1];\\n\\n                // move last entry to now-vacant index\\n                map._entries[keyIndex - 1] = last;\\n                map._indexes[last._key] = keyIndex;\\n            }\\n\\n            // clear last index\\n            map._entries.pop();\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1140a8669a93db82ea70d7f53e112049d42a813fe7188f50aa2f7ec5e529d38a\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5cf3350069fd4a78c6bc091ee9f23ab60b4c0ff1bf4271a1f5daaa7d411d5942\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0xe6a748757a6598745e089546b8cfa3574e6da7785a6b57b95eaffe6f172db3d3\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x8688f1b897b4ddde7ebd48ee5ce1063f56d8af8ea3aa80aa1df12ff669d133a4\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC721Internal } from './IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721 is IERC721Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given address\\n     * @return balance quantity of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice query the owner of given token\\n     * @param tokenId token to query\\n     * @return owner token owner\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice grant approval to given account to spend token\\n     * @param operator address to be approved\\n     * @param tokenId token to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external payable;\\n\\n    /**\\n     * @notice get approval status for given token\\n     * @param tokenId token to query\\n     * @return operator address approved to spend token\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given account to spend all tokens held by sender\\n     * @param operator address to be approved\\n     * @param status approval status\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return status whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool status);\\n}\\n\",\"keccak256\":\"0xa14655a5bdee327bc019b583b04480e8542fa6b0788e5569077ec54805d1463a\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC721 interface needed by internal functions\\n */\\ninterface IERC721Internal {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed operator,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x8d46d596fa0e48cdcbf8bb8d6a42120351c4d1b002156bf647f95523178cbe08\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x38ca94617ab4a4cdc08d9fed753f1b17d91a9823b36f7f485cd1ed5e5324aa8f\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165Base } from './IERC165Base.sol';\\nimport { ERC165BaseInternal } from './ERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165Base is IERC165Base, ERC165BaseInternal {\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return _supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3f2268856fdd9b27946adc65010bc83992069a90034bf692ab630802a926a9c2\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xba7b4d73d42dfc9f8083ce36aed0fa2c56c73878d8bda7d64f2fb908d5e04636\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\n\\ninterface IERC165Base is IERC165, IERC165BaseInternal {}\\n\",\"keccak256\":\"0x288c50013c735cf30be90eb084589fc54bc0ee77a88ec69c3cc1efb11d7dccf4\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/DiamondBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nlibrary DiamondBaseStorage {\\n    struct Layout {\\n        // function selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) facets;\\n        // total number of selectors registered\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n        address fallbackAddress;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.DiamondBase');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74365666c0e9917d742bbab21e174dea6bc6ccf6146153e43dd9d9fe8417a36a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC1155MetadataInternal } from './IERC1155MetadataInternal.sol';\\n\\n/**\\n * @title ERC1155Metadata interface\\n */\\ninterface IERC1155Metadata is IERC1155MetadataInternal {\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function uri(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x5996ccbe41ca8000926401f9172fe777853be594ca516bed5d56513f24b35798\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155Metadata interface needed by internal functions\\n */\\ninterface IERC1155MetadataInternal {\\n    event URI(string value, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0x394093a86fbfebdcda356fe9407480d81434aa162afc6a3e8efbf72a4c05b98d\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../../../interfaces/IERC721.sol';\\nimport { IERC721Receiver } from '../../../interfaces/IERC721Receiver.sol';\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC721Base } from './IERC721Base.sol';\\nimport { ERC721BaseStorage } from './ERC721BaseStorage.sol';\\nimport { ERC721BaseInternal } from './ERC721BaseInternal.sol';\\n\\n/**\\n * @title Base ERC721 implementation, excluding optional extensions\\n */\\nabstract contract ERC721Base is IERC721Base, ERC721BaseInternal {\\n    using AddressUtils for address;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balanceOf(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\n        return _ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function getApproved(uint256 tokenId) public view returns (address) {\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) public view returns (bool) {\\n        return _isApprovedForAll(account, operator);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public payable {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        if (!_isApprovedOrOwner(msg.sender, tokenId))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function approve(address operator, uint256 tokenId) public payable {\\n        _handleApproveMessageValue(operator, tokenId, msg.value);\\n        address owner = ownerOf(tokenId);\\n        if (operator == owner) revert ERC721Base__SelfApproval();\\n        if (msg.sender != owner && !isApprovedForAll(owner, msg.sender))\\n            revert ERC721Base__NotOwnerOrApproved();\\n        _approve(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function setApprovalForAll(address operator, bool status) public {\\n        if (operator == msg.sender) revert ERC721Base__SelfApproval();\\n        ERC721BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n}\\n\",\"keccak256\":\"0xf0e9afe4797969cae01b1be1b785d5426b153f298960ed98919b7cd10c6a0287\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Receiver } from '../../../interfaces/IERC721Receiver.sol';\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC721BaseInternal } from './IERC721BaseInternal.sol';\\nimport { ERC721BaseStorage } from './ERC721BaseStorage.sol';\\n\\n/**\\n * @title Base ERC721 internal functions\\n */\\nabstract contract ERC721BaseInternal is IERC721BaseInternal {\\n    using AddressUtils for address;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function _balanceOf(\\n        address account\\n    ) internal view virtual returns (uint256) {\\n        if (account == address(0)) revert ERC721Base__BalanceQueryZeroAddress();\\n        return ERC721BaseStorage.layout().holderTokens[account].length();\\n    }\\n\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        address owner = ERC721BaseStorage.layout().tokenOwners.get(tokenId);\\n        if (owner == address(0)) revert ERC721Base__InvalidOwner();\\n        return owner;\\n    }\\n\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return ERC721BaseStorage.layout().tokenOwners.contains(tokenId);\\n    }\\n\\n    function _getApproved(\\n        uint256 tokenId\\n    ) internal view virtual returns (address) {\\n        if (!_exists(tokenId)) revert ERC721Base__NonExistentToken();\\n\\n        return ERC721BaseStorage.layout().tokenApprovals[tokenId];\\n    }\\n\\n    function _isApprovedForAll(\\n        address account,\\n        address operator\\n    ) internal view virtual returns (bool) {\\n        return ERC721BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        if (!_exists(tokenId)) revert ERC721Base__NonExistentToken();\\n\\n        address owner = _ownerOf(tokenId);\\n\\n        return (spender == owner ||\\n            _getApproved(tokenId) == spender ||\\n            _isApprovedForAll(owner, spender));\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        if (to == address(0)) revert ERC721Base__MintToZeroAddress();\\n        if (_exists(tokenId)) revert ERC721Base__TokenAlreadyMinted();\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, '');\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        if (!_checkOnERC721Received(address(0), to, tokenId, data))\\n            revert ERC721Base__ERC721ReceiverNotImplemented();\\n    }\\n\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = _ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        _approve(address(0), tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n        l.holderTokens[owner].remove(tokenId);\\n        l.tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        if (_ownerOf(tokenId) != from) revert ERC721Base__NotTokenOwner();\\n        if (to == address(0)) revert ERC721Base__TransferToZeroAddress();\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        _approve(address(0), tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n        l.holderTokens[from].remove(tokenId);\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, data))\\n            revert ERC721Base__ERC721ReceiverNotImplemented();\\n    }\\n\\n    function _approve(address operator, uint256 tokenId) internal virtual {\\n        ERC721BaseStorage.layout().tokenApprovals[tokenId] = operator;\\n        emit Approval(_ownerOf(tokenId), operator, tokenId);\\n    }\\n\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        bytes memory returnData = to.functionCall(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                msg.sender,\\n                from,\\n                tokenId,\\n                data\\n            ),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n\\n        bytes4 returnValue = abi.decode(returnData, (bytes4));\\n        return returnValue == type(IERC721Receiver).interfaceId;\\n    }\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called approvals for processing of included message value\\n     * @param operator beneficiary of approval\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called transfers for processing of included message value\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x864b663d78acd56c731ca1328fc11835f91ceedec4eb2b16d675a0407bbe682f\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\n\\nlibrary ERC721BaseStorage {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Base');\\n\\n    struct Layout {\\n        EnumerableMap.UintToAddressMap tokenOwners;\\n        mapping(address => EnumerableSet.UintSet) holderTokens;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9570596eca4d18e1c872177aa12125fcaba1dd7db940e5affa44e6ce2231b0a1\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../../../interfaces/IERC721.sol';\\nimport { IERC721BaseInternal } from './IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721Base is IERC721BaseInternal, IERC721 {\\n\\n}\\n\",\"keccak256\":\"0x5b99ebbddcc97f5a825cb21fb377b04c9ad184c4e4b69b92685334b6d42b7636\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Internal } from '../../../interfaces/IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721BaseInternal is IERC721Internal {\\n    error ERC721Base__NotOwnerOrApproved();\\n    error ERC721Base__SelfApproval();\\n    error ERC721Base__BalanceQueryZeroAddress();\\n    error ERC721Base__ERC721ReceiverNotImplemented();\\n    error ERC721Base__InvalidOwner();\\n    error ERC721Base__MintToZeroAddress();\\n    error ERC721Base__NonExistentToken();\\n    error ERC721Base__NotTokenOwner();\\n    error ERC721Base__TokenAlreadyMinted();\\n    error ERC721Base__TransferToZeroAddress();\\n}\\n\",\"keccak256\":\"0x3118e4b75bc32c0c5b1f7aca49d30bf618966260179d848171b2ce3e3e0b5373\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { IERC721Enumerable } from './IERC721Enumerable.sol';\\nimport { ERC721EnumerableInternal } from './ERC721EnumerableInternal.sol';\\n\\nabstract contract ERC721Enumerable is\\n    IERC721Enumerable,\\n    ERC721EnumerableInternal\\n{\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) public view returns (uint256) {\\n        return _tokenOfOwnerByIndex(owner, index);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\n        return _tokenByIndex(index);\\n    }\\n}\\n\",\"keccak256\":\"0x762db931dbe79f32fa48ba2f66b23b096e9c43e89c09310a98c10ab18b6e73b6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721EnumerableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../data/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../data/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\n\\nabstract contract ERC721EnumerableInternal {\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _totalSupply() internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().tokenOwners.length();\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenByIndex(\\n        uint256 index\\n    ) internal view returns (uint256 tokenId) {\\n        (tokenId, ) = ERC721BaseStorage.layout().tokenOwners.at(index);\\n    }\\n}\\n\",\"keccak256\":\"0xcb195fe5d264a1756a67b0c9bf8ac5493c12d25f947290196f15a67d7f3e81ad\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Enumerable {\\n    /**\\n     * @notice get total token supply\\n     * @return total supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice get token of given owner at given internal storage index\\n     * @param owner token holder to query\\n     * @param index position in owner's token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @notice get token at given internal storage index\\n     * @param index position in global token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenByIndex(\\n        uint256 index\\n    ) external view returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0x4dcc1d41df336f28a2ea6fa2e7ec17e3d1745938146db5385400238a7e7a1bad\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\nimport { IERC721Metadata } from './IERC721Metadata.sol';\\n\\n/**\\n * @title ERC721 metadata extensions\\n */\\nabstract contract ERC721Metadata is IERC721Metadata, ERC721MetadataInternal {\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function name() external view virtual returns (string memory) {\\n        return _name();\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function symbol() external view virtual returns (string memory) {\\n        return _symbol();\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) external view virtual returns (string memory) {\\n        return _tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721MetadataInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xc626c723aa50119564d77caa3749a728526ca8a93b385000e3d52208b6bc40c5\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { ERC721BaseInternal } from '../base/ERC721Base.sol';\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\nimport { ERC721MetadataStorage } from './ERC721MetadataStorage.sol';\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal functions\\n */\\nabstract contract ERC721MetadataInternal is\\n    IERC721MetadataInternal,\\n    ERC721BaseInternal\\n{\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function _name() internal view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().name;\\n    }\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function _symbol() internal view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().symbol;\\n    }\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function _tokenURI(\\n        uint256 tokenId\\n    ) internal view virtual returns (string memory) {\\n        if (!_exists(tokenId)) revert ERC721Metadata__NonExistentToken();\\n\\n        ERC721MetadataStorage.Layout storage l = ERC721MetadataStorage.layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC721 hook: clear per-token URI data on burn\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (to == address(0)) {\\n            delete ERC721MetadataStorage.layout().tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x087a3302cd70010787bcdb1eb2e225eff23ac2e5ab5f77d6dc26289cb8863a19\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC721MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Metadata');\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe220a86657018b0d498708b7d8c728042d9a41e8ac230e22d1a09b6bf866332e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721MetadataInternal } from './IERC721MetadataInternal.sol';\\n\\n/**\\n * @title ERC721Metadata interface\\n */\\ninterface IERC721Metadata is IERC721MetadataInternal {\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x281dd4dbf81c3acf12bf43bc6e0f77ae68cb2764450cce8121a53c061bf87960\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721BaseInternal } from '../base/IERC721BaseInternal.sol';\\n\\n/**\\n * @title ERC721Metadata internal interface\\n */\\ninterface IERC721MetadataInternal is IERC721BaseInternal {\\n    error ERC721Metadata__NonExistentToken();\\n}\\n\",\"keccak256\":\"0xd420b4227db773f26b0e40cb6ea4819d340d0ee5ea59d6321c27e79ae7ecca86\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/auction/IPeriodicAuctionReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IPeriodicAuctionReadable\\n */\\ninterface IPeriodicAuctionReadable {\\n    /**\\n     * @notice Get is auction period\\n     */\\n    function isAuctionPeriod() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x90cb03c4440a7f25c61376cf23bdb01fe990256833ebbce31061a6f3c1c42c57\",\"license\":\"MIT\"},\"contracts/license/IStewardLicense.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IERC721 } from '@solidstate/contracts/interfaces/IERC721.sol';\\n\\n/**\\n * @title IStewardLicense\\n */\\ninterface IStewardLicense is IERC721 {\\n    /**\\n     * @notice Trigger transfer of license\\n     */\\n    function triggerTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xeffe301c0891abcd6eaecd146b83d9cb590d67736754209fba04958f56936d26\",\"license\":\"MIT\"},\"contracts/license/StewardLicenseBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { StewardLicenseInternal } from './StewardLicenseInternal.sol';\\nimport { IStewardLicense } from './IStewardLicense.sol';\\n\\n/**\\n * @title StewardLicenseBase\\n */\\nabstract contract StewardLicenseBase is\\n    StewardLicenseInternal,\\n    IStewardLicense\\n{\\n    /**\\n     * @notice Trigger transfer of license\\n     */\\n    function triggerTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external {\\n        require(\\n            msg.sender == address(this),\\n            'NativeStewardLicense: Trigger transfer can only be called from another facet'\\n        );\\n\\n        // Safe transfer is not needed. If receiver does not implement ERC721Receiver, next auction can still happen. This prevents a failed transfer from locking up license\\n        _transfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x157fd99994469426bf0d231d774cafba16036156f833408552566429ebdf5380\",\"license\":\"MIT\"},\"contracts/license/StewardLicenseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { StewardLicenseStorage } from './StewardLicenseStorage.sol';\\nimport { ERC721Base, ERC721BaseInternal } from '@solidstate/contracts/token/ERC721/base/ERC721Base.sol';\\nimport { ERC721Enumerable } from '@solidstate/contracts/token/ERC721/enumerable/ERC721Enumerable.sol';\\nimport { ERC721Metadata } from '@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol';\\nimport { ERC721MetadataStorage } from '@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol';\\nimport { ERC165Base } from '@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol';\\nimport { IERC165 } from '@solidstate/contracts/interfaces/IERC165.sol';\\nimport { IERC721 } from '@solidstate/contracts/interfaces/IERC721.sol';\\nimport { DiamondBaseStorage } from '@solidstate/contracts/proxy/diamond/base/DiamondBaseStorage.sol';\\nimport { IPeriodicAuctionReadable } from '../auction/IPeriodicAuctionReadable.sol';\\n\\n/**\\n * @title StewardLicenseInternal\\n */\\nabstract contract StewardLicenseInternal is\\n    ERC721Base,\\n    ERC721Enumerable,\\n    ERC721Metadata,\\n    ERC165Base\\n{\\n    /**\\n     * @notice Initialize license\\n     */\\n    function _initializeStewardLicense(\\n        address _steward,\\n        string memory name,\\n        string memory symbol,\\n        string memory tokenURI\\n    ) internal {\\n        StewardLicenseStorage.Layout storage l = StewardLicenseStorage.layout();\\n\\n        l.isInitialized = true;\\n\\n        // Initialize ERC721\\n        ERC721MetadataStorage.Layout storage ls = ERC721MetadataStorage\\n            .layout();\\n        ls.name = name;\\n        ls.symbol = symbol;\\n        ls.tokenURIs[0] = tokenURI;\\n\\n        _setSupportsInterface(type(IERC165).interfaceId, true);\\n        _setSupportsInterface(type(IERC721).interfaceId, true);\\n\\n        // Mint single token to steward\\n        _mint(_steward, 0);\\n    }\\n\\n    /**\\n     * @notice Check if initialized\\n     */\\n    function _isInitialized() internal view returns (bool) {\\n        return StewardLicenseStorage.layout().isInitialized;\\n    }\\n\\n    /**\\n     * @notice Disable transfers if during auction period\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721BaseInternal, ERC721Metadata) {\\n        // Disable transfers if not mint\\n        if (from != address(0x0)) {\\n            bool isAuctionPeriod = IPeriodicAuctionReadable(address(this))\\n                .isAuctionPeriod();\\n            require(\\n                isAuctionPeriod == false,\\n                'StewardLicenseFacet: Cannot transfer during auction period'\\n            );\\n        }\\n\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x9ed10d1c8ad2c6bf2d5d8b192f1be99723240051f20c71083fc116c47e9f307d\",\"license\":\"MIT\"},\"contracts/license/StewardLicenseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title StewardLicenseStorage\\n */\\nlibrary StewardLicenseStorage {\\n    struct Layout {\\n        bool isInitialized;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256('pcoart.contracts.storage.StewardLicenseStorage');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6624434411ac16786256b189da73eae60076dde1c61db76f39f432a9db9d6b47\",\"license\":\"MIT\"},\"contracts/license/WrappedStewardLicenseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { WrappedStewardLicenseStorage } from './WrappedStewardLicenseStorage.sol';\\n\\n/**\\n * @title WrappedStewardLicenseInternal\\n */\\nabstract contract WrappedStewardLicenseInternal {\\n    /**\\n     * @notice Initialize license\\n     */\\n    function _initializeWrappedLicense(\\n        address wrappedTokenAddress,\\n        uint256 wrappedTokenId\\n    ) internal {\\n        WrappedStewardLicenseStorage.Layout\\n            storage l = WrappedStewardLicenseStorage.layout();\\n\\n        l.wrappedTokenAddress = wrappedTokenAddress;\\n        l.wrappedTokenId = wrappedTokenId;\\n    }\\n\\n    /**\\n     * @notice Get wrapped token address\\n     */\\n    function _wrappedTokenAddress() internal view returns (address) {\\n        return WrappedStewardLicenseStorage.layout().wrappedTokenAddress;\\n    }\\n\\n    /**\\n     * @notice Get wrapped token ID\\n     */\\n    function _wrappedTokenId() internal view returns (uint256) {\\n        return WrappedStewardLicenseStorage.layout().wrappedTokenId;\\n    }\\n}\\n\",\"keccak256\":\"0xd80f1e53a237d7a9450de695e6181dd1e8cb38e04ed6aa0111e90873adaef130\",\"license\":\"MIT\"},\"contracts/license/WrappedStewardLicenseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title WrappedStewardLicenseStorage\\n */\\nlibrary WrappedStewardLicenseStorage {\\n    struct Layout {\\n        address wrappedTokenAddress;\\n        uint256 wrappedTokenId;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256('pcoart.contracts.storage.WrappedStewardLicenseStorage');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b8f7c093a2e9f21b03513846f5bd3ff8364c1f5cda031d70de06a0a2ca7bf5d\",\"license\":\"MIT\"},\"contracts/license/facets/WrappedERC1155StewardLicenseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { ERC165Base } from '@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol';\\nimport { IERC165 } from '@solidstate/contracts/interfaces/IERC165.sol';\\nimport { IERC1155 } from '@solidstate/contracts/interfaces/IERC1155.sol';\\nimport { IERC1155Metadata } from '@solidstate/contracts/token/ERC1155/metadata/IERC1155Metadata.sol';\\nimport { DiamondBaseStorage } from '@solidstate/contracts/proxy/diamond/base/DiamondBaseStorage.sol';\\nimport { StewardLicenseInternal } from '../StewardLicenseInternal.sol';\\nimport { IStewardLicense } from '../IStewardLicense.sol';\\nimport { StewardLicenseBase } from '../StewardLicenseBase.sol';\\nimport { IERC1155Receiver } from '@solidstate/contracts/interfaces/IERC1155Receiver.sol';\\nimport { WrappedStewardLicenseInternal } from '../WrappedStewardLicenseInternal.sol';\\n\\n/**\\n * @title WrappedERC1155StewardLicenseFacet\\n * @dev ERC-721 token license for Steward that wraps existing ERC-1155. Transfers are disabled during an auction.\\n */\\ncontract WrappedERC1155StewardLicenseFacet is\\n    StewardLicenseInternal,\\n    WrappedStewardLicenseInternal,\\n    IStewardLicense,\\n    StewardLicenseBase,\\n    IERC1155Receiver\\n{\\n    /**\\n     * @notice Initialize license\\n     */\\n    function initializeWrappedStewardLicense(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address _steward,\\n        string memory name,\\n        string memory symbol,\\n        string memory tokenURI\\n    ) external {\\n        require(\\n            _isInitialized() == false,\\n            'WrappedERC1155StewardLicenseFacet: already initialized'\\n        );\\n\\n        _initializeWrappedLicense(tokenAddress, tokenId);\\n        _initializeStewardLicense(_steward, name, symbol, tokenURI);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata\\n    ) external view override returns (bytes4) {\\n        require(\\n            value == 1,\\n            'WrappedERC1155StewardLicenseFacet: can only receive one token'\\n        );\\n\\n        require(\\n            _isInitialized() == true,\\n            'WrappedERC1155StewardLicenseFacet: must be initialized'\\n        );\\n\\n        require(\\n            msg.sender == _wrappedTokenAddress(),\\n            'WrappedERC1155StewardLicenseFacet: cannot accept this token address'\\n        );\\n\\n        require(\\n            id == _wrappedTokenId(),\\n            'WrappedERC1155StewardLicenseFacet: cannot accept this token ID'\\n        );\\n\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata\\n    ) external view override returns (bytes4) {\\n        require(\\n            ids.length == 1 && values.length == 1 && values[0] == 1,\\n            'WrappedERC1155StewardLicenseFacet: can only receive one token'\\n        );\\n\\n        require(\\n            _isInitialized() == true,\\n            'WrappedERC1155StewardLicenseFacet: must be initialized'\\n        );\\n\\n        require(\\n            msg.sender == _wrappedTokenAddress(),\\n            'WrappedERC1155StewardLicenseFacet: cannot accept this token address'\\n        );\\n\\n        require(\\n            ids[0] == _wrappedTokenId(),\\n            'WrappedERC1155StewardLicenseFacet: cannot accept this token ID'\\n        );\\n\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xb7ded2862d62f8ed515ff4379b89c37aa2496a8b61c62023ee8e9ec5df6e485a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061245c806100206000396000f3fe60806040526004361061011f5760003560e01c80636352211e116100a0578063bc197c8111610064578063bc197c81146102f9578063c87b56dd14610332578063e31a7c0114610352578063e985e9c514610372578063f23a6e611461039257600080fd5b80636352211e1461027157806370a082311461029157806395d89b41146102b1578063a22cb465146102c6578063b88d4fde146102e657600080fd5b806323b872dd116100e757806323b872dd146101eb5780632f745c59146101fe57806342842e0e1461021e57806348b5537b146102315780634f6ccce71461025157600080fd5b806301ffc9a71461012457806306fdde0314610159578063081812fc1461017b578063095ea7b3146101b357806318160ddd146101c8575b600080fd5b34801561013057600080fd5b5061014461013f366004611a20565b6103b2565b60405190151581526020015b60405180910390f35b34801561016557600080fd5b5061016e6103f5565b6040516101509190611a8d565b34801561018757600080fd5b5061019b610196366004611aa0565b610404565b6040516001600160a01b039091168152602001610150565b6101c66101c1366004611ad5565b61040f565b005b3480156101d457600080fd5b506101dd61049b565b604051908152602001610150565b6101c66101f9366004611aff565b6104a5565b34801561020a57600080fd5b506101dd610219366004611ad5565b6104d7565b6101c661022c366004611aff565b6104ea565b34801561023d57600080fd5b506101c661024c366004611be7565b610505565b34801561025d57600080fd5b506101dd61026c366004611aa0565b6105e9565b34801561027d57600080fd5b5061019b61028c366004611aa0565b6105f4565b34801561029d57600080fd5b506101dd6102ac366004611c99565b6105ff565b3480156102bd57600080fd5b5061016e61060a565b3480156102d257600080fd5b506101c66102e1366004611cc2565b610614565b6101c66102f4366004611cf9565b6106c8565b34801561030557600080fd5b50610319610314366004611dfc565b610701565b6040516001600160e01b03199091168152602001610150565b34801561033e57600080fd5b5061016e61034d366004611aa0565b61083f565b34801561035e57600080fd5b506101c661036d366004611aff565b61084a565b34801561037e57600080fd5b5061014461038d366004611eb7565b6108d4565b34801561039e57600080fd5b506103196103ad366004611eea565b6108e0565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b60606103ff6109d2565b905090565b60006103ef82610a71565b600061041a826105f4565b9050806001600160a01b0316836001600160a01b03160361044e5760405163424a22cb60e01b815260040160405180910390fd5b336001600160a01b0382161480159061046e575061046c81336108d4565b155b1561048c57604051632f5de44f60e01b815260040160405180910390fd5b6104968383610ad4565b505050565b60006103ff610b61565b6104af3382610b7a565b6104cc57604051632f5de44f60e01b815260040160405180910390fd5b610496838383610c00565b60006104e38383610d2f565b9392505050565b610496838383604051806020016040528060008152506106c8565b6000805160206123a78339815191525460ff16156105775760405162461bcd60e51b815260206004820152603660248201526000805160206124078339815191526044820152751d0e88185b1c9958591e481a5b9a5d1a585b1a5e995960521b60648201526084015b60405180910390fd5b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6d80546001600160a01b0319166001600160a01b0388161790557f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6e8590556105e184848484610d5e565b505050505050565b60006103ef82610dec565b60006103ef82610e0d565b60006103ef82610e51565b60606103ff610ea8565b336001600160a01b0383160361063d5760405163424a22cb60e01b815260040160405180910390fd5b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6106d23383610b7a565b6106ef57604051632f5de44f60e01b815260040160405180910390fd5b6106fb84848484610ec7565b50505050565b60006001861480156107135750600184145b801561073857508484600081811061072d5761072d611f62565b905060200201356001145b6107545760405162461bcd60e51b815260040161056e90611f78565b6000805160206123a78339815191525460ff1615156001146107885760405162461bcd60e51b815260040161056e90611fc3565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6d546001600160a01b031633146107d15760405162461bcd60e51b815260040161056e90612007565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6e548787600081811061080657610806611f62565b905060200201351461082a5760405162461bcd60e51b815260040161056e9061205e565b5063bc197c8160e01b98975050505050505050565b60606103ef82610efb565b3330146104cc5760405162461bcd60e51b815260206004820152604c60248201527f4e6174697665537465776172644c6963656e73653a205472696767657220747260448201527f616e736665722063616e206f6e6c792062652063616c6c65642066726f6d206160648201526b1b9bdd1a195c88199858d95d60a21b608482015260a40161056e565b60006104e383836110dc565b6000836001146109025760405162461bcd60e51b815260040161056e90611f78565b6000805160206123a78339815191525460ff1615156001146109365760405162461bcd60e51b815260040161056e90611fc3565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6d546001600160a01b0316331461097f5760405162461bcd60e51b815260040161056e90612007565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6e5485146109bf5760405162461bcd60e51b815260040161056e9061205e565b5063f23a6e6160e01b9695505050505050565b60606000805160206123e783398151915280546109ee906120a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1a906120a9565b8015610a675780601f10610a3c57610100808354040283529160200191610a67565b820191906000526020600020905b815481529060010190602001808311610a4a57829003601f168201915b5050505050905090565b6000610a7c82611129565b610a995760405163c1b843ef60e01b815260040160405180910390fd5b5060009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a960205260409020546001600160a01b031690565b60008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a96020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610b2882610e0d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006103ff6000805160206123c7833981519152611143565b6000610b8582611129565b610ba25760405163c1b843ef60e01b815260040160405180910390fd5b6000610bad83610e0d565b9050806001600160a01b0316846001600160a01b03161480610be85750836001600160a01b0316610bdd84610a71565b6001600160a01b0316145b80610bf85750610bf881856110dc565b949350505050565b826001600160a01b0316610c1382610e0d565b6001600160a01b031614610c3a57604051630f2db4ad60e01b815260040160405180910390fd5b6001600160a01b038216610c61576040516340311a0960e01b815260040160405180910390fd5b610c6c83838361114d565b610c77600082610ad4565b6001600160a01b0383166000908152600080516020612387833981519152602052604090206000805160206123c783398151915290610cb69083611243565b506001600160a01b03831660009081526002820160205260409020610cdb908361124f565b50610ce781838561125b565b5081836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6001600160a01b0382166000908152600080516020612387833981519152602052604081206104e39083611271565b6000805160206123a7833981519152805460ff191660011781556000805160206123e783398151915280610d928682612129565b5060018101610da18582612129565b5060008080526003820160205260409020610dbc8482612129565b50610dcf6301ffc9a760e01b600161127d565b610de16380ac58cd60e01b600161127d565b6105e18660006112f3565b6000610e066000805160206123c7833981519152836113d6565b5092915050565b600080610e286000805160206123c7833981519152846113f4565b90506001600160a01b0381166103ef57604051637e1a7d8b60e01b815260040160405180910390fd5b60006001600160a01b038216610e7a57604051630810ff9760e41b815260040160405180910390fd5b6001600160a01b0382166000908152600080516020612387833981519152602052604090206103ef90611143565b60606000805160206123e783398151915260010180546109ee906120a9565b610ed2848484610c00565b610ede84848484611400565b6106fb57604051639ff10cdd60e01b815260040160405180910390fd5b6060610f0682611129565b610f2257604051624705a760e71b815260040160405180910390fd5b60008281527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040812080546000805160206123e7833981519152929190610f6c906120a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610f98906120a9565b8015610fe55780601f10610fba57610100808354040283529160200191610fe5565b820191906000526020600020905b815481529060010190602001808311610fc857829003601f168201915b505050505090506000826002018054610ffd906120a9565b80601f0160208091040260200160405190810160405280929190818152602001828054611029906120a9565b80156110765780601f1061104b57610100808354040283529160200191611076565b820191906000526020600020905b81548152906001019060200180831161105957829003601f168201915b50505050509050805160000361108e57509392505050565b8151156110c15780826040516020016110a89291906121e9565b6040516020818303038152906040529350505050919050565b806110cb866114d1565b6040516020016110a89291906121e9565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b60006103ef6000805160206123c7833981519152836115d2565b60006103ef825490565b6001600160a01b03831615611238576000306001600160a01b031663ec214d336040518163ffffffff1660e01b8152600401602060405180830381865afa15801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c09190612218565b905080156112365760405162461bcd60e51b815260206004820152603a60248201527f537465776172644c6963656e736546616365743a2043616e6e6f74207472616e60448201527f7366657220647572696e672061756374696f6e20706572696f64000000000000606482015260840161056e565b505b6104968383836115ea565b60006104e383836115f5565b60006104e383836116af565b6000610bf884846001600160a01b0385166116f2565b60006104e38383611791565b6001600160e01b031980831690036112a85760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b6001600160a01b03821661131a576040516311f2988d60e11b815260040160405180910390fd5b61132381611129565b1561134157604051630d86bb7b60e31b815260040160405180910390fd5b61134d6000838361114d565b6001600160a01b0382166000908152600080516020612387833981519152602052604090206000805160206123c78339815191529061138c908361124f565b5061139881838561125b565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b60008080806113e586866117dd565b909450925050505b9250929050565b60006104e38383611840565b60006001600160a01b0384163b61141957506001610bf8565b600061149a63150b7a0260e01b3388878760405160240161143d9493929190612235565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001612355603291396001600160a01b03881691906118a4565b90506000818060200190518101906114b29190612272565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b6060816000036114f85750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611522578061150c816122a5565b915061151b9050600a836122d4565b91506114fc565b60008167ffffffffffffffff81111561153d5761153d611b3b565b6040519080825280601f01601f191660200182016040528015611567576020820181803683370190505b5090505b8415610bf85761157c6001836122e8565b9150611589600a866122fb565b61159490603061230f565b60f81b8183815181106115a9576115a9611f62565b60200101906001600160f81b031916908160001a9053506115cb600a866122d4565b945061156b565b600081815260018301602052604081205415156104e3565b6104968383836118b3565b60008181526001830160205260408120548015610e065783546000908590600019810190811061162757611627611f62565b906000526020600020015490508085600001600184038154811061164d5761164d611f62565b600091825260208083209091019290925591825260018601905260409020819055835484908061167f5761167f612322565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b60008181526001830160205260408120546103ef575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b60008281526001840160205260408120548082036117595750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556104e3565b8285600001600183038154811061177257611772611f62565b90600052602060002090600202016001018190555060009150506104e3565b815460009082106117b55760405163e637bf3b60e01b815260040160405180910390fd5b8260000182815481106117ca576117ca611f62565b9060005260206000200154905092915050565b8154600090819083106118035760405163022fd82760e31b815260040160405180910390fd5b600084600001848154811061181a5761181a611f62565b906000526020600020906002020190508060000154816001015492509250509250929050565b600081815260018301602052604081205480820361187157604051633d547ec560e21b815260040160405180910390fd5b83600001600182038154811061188957611889611f62565b90600052602060002090600202016001015491505092915050565b6060610bf884846000856118f7565b6001600160a01b0382166104965760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b460205260408120610496916119b4565b6060843b61191857604051632270d6bf60e21b815260040160405180910390fd5b600080866001600160a01b031685876040516119349190612338565b60006040518083038185875af1925050503d8060008114611971576040519150601f19603f3d011682016040523d82523d6000602084013e611976565b606091505b5091509150811561198a579150610bf89050565b80511561199a5780518082602001fd5b8360405162461bcd60e51b815260040161056e9190611a8d565b5080546119c0906120a9565b6000825580601f106119d0575050565b601f0160209004906000526020600020908101906119ee91906119f1565b50565b5b80821115611a0657600081556001016119f2565b5090565b6001600160e01b0319811681146119ee57600080fd5b600060208284031215611a3257600080fd5b81356104e381611a0a565b60005b83811015611a58578181015183820152602001611a40565b50506000910152565b60008151808452611a79816020860160208601611a3d565b601f01601f19169290920160200192915050565b6020815260006104e36020830184611a61565b600060208284031215611ab257600080fd5b5035919050565b80356001600160a01b0381168114611ad057600080fd5b919050565b60008060408385031215611ae857600080fd5b611af183611ab9565b946020939093013593505050565b600080600060608486031215611b1457600080fd5b611b1d84611ab9565b9250611b2b60208501611ab9565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611b6c57611b6c611b3b565b604051601f8501601f19908116603f01168101908282118183101715611b9457611b94611b3b565b81604052809350858152868686011115611bad57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611bd857600080fd5b6104e383833560208501611b51565b60008060008060008060c08789031215611c0057600080fd5b611c0987611ab9565b955060208701359450611c1e60408801611ab9565b9350606087013567ffffffffffffffff80821115611c3b57600080fd5b611c478a838b01611bc7565b94506080890135915080821115611c5d57600080fd5b611c698a838b01611bc7565b935060a0890135915080821115611c7f57600080fd5b50611c8c89828a01611bc7565b9150509295509295509295565b600060208284031215611cab57600080fd5b6104e382611ab9565b80151581146119ee57600080fd5b60008060408385031215611cd557600080fd5b611cde83611ab9565b91506020830135611cee81611cb4565b809150509250929050565b60008060008060808587031215611d0f57600080fd5b611d1885611ab9565b9350611d2660208601611ab9565b925060408501359150606085013567ffffffffffffffff811115611d4957600080fd5b8501601f81018713611d5a57600080fd5b611d6987823560208401611b51565b91505092959194509250565b60008083601f840112611d8757600080fd5b50813567ffffffffffffffff811115611d9f57600080fd5b6020830191508360208260051b85010111156113ed57600080fd5b60008083601f840112611dcc57600080fd5b50813567ffffffffffffffff811115611de457600080fd5b6020830191508360208285010111156113ed57600080fd5b60008060008060008060008060a0898b031215611e1857600080fd5b611e2189611ab9565b9750611e2f60208a01611ab9565b9650604089013567ffffffffffffffff80821115611e4c57600080fd5b611e588c838d01611d75565b909850965060608b0135915080821115611e7157600080fd5b611e7d8c838d01611d75565b909650945060808b0135915080821115611e9657600080fd5b50611ea38b828c01611dba565b999c989b5096995094979396929594505050565b60008060408385031215611eca57600080fd5b611ed383611ab9565b9150611ee160208401611ab9565b90509250929050565b60008060008060008060a08789031215611f0357600080fd5b611f0c87611ab9565b9550611f1a60208801611ab9565b94506040870135935060608701359250608087013567ffffffffffffffff811115611f4457600080fd5b611f5089828a01611dba565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b6020808252603d9082015260008051602061240783398151915260408201527f743a2063616e206f6e6c792072656365697665206f6e6520746f6b656e000000606082015260800190565b60208082526036908201526000805160206124078339815191526040820152751d0e881b5d5cdd081899481a5b9a5d1a585b1a5e995960521b606082015260800190565b602080825260439082015260008051602061240783398151915260408201527f743a2063616e6e6f7420616363657074207468697320746f6b656e206164647260608201526265737360e81b608082015260a00190565b6020808252603e9082015260008051602061240783398151915260408201527f743a2063616e6e6f7420616363657074207468697320746f6b656e2049440000606082015260800190565b600181811c908216806120bd57607f821691505b6020821081036120dd57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561049657600081815260208120601f850160051c8101602086101561210a5750805b601f850160051c820191505b818110156105e157828155600101612116565b815167ffffffffffffffff81111561214357612143611b3b565b6121578161215184546120a9565b846120e3565b602080601f83116001811461218c57600084156121745750858301515b600019600386901b1c1916600185901b1785556105e1565b600085815260208120601f198616915b828110156121bb5788860151825594840194600190910190840161219c565b50858210156121d95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600083516121fb818460208801611a3d565b83519083019061220f818360208801611a3d565b01949350505050565b60006020828403121561222a57600080fd5b81516104e381611cb4565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061226890830184611a61565b9695505050505050565b60006020828403121561228457600080fd5b81516104e381611a0a565b634e487b7160e01b600052601160045260246000fd5b6000600182016122b7576122b761228f565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826122e3576122e36122be565b500490565b818103818111156103ef576103ef61228f565b60008261230a5761230a6122be565b500690565b808201808211156103ef576103ef61228f565b634e487b7160e01b600052603160045260246000fd5b6000825161234a818460208701611a3d565b919091019291505056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465723c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a879ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e303c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a699574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b15772617070656445524331313535537465776172644c6963656e736546616365a2646970667358221220bae593664c0bc4ee24476dee399755c82badca02a1e85de8683f08acd35f06e264736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c80636352211e116100a0578063bc197c8111610064578063bc197c81146102f9578063c87b56dd14610332578063e31a7c0114610352578063e985e9c514610372578063f23a6e611461039257600080fd5b80636352211e1461027157806370a082311461029157806395d89b41146102b1578063a22cb465146102c6578063b88d4fde146102e657600080fd5b806323b872dd116100e757806323b872dd146101eb5780632f745c59146101fe57806342842e0e1461021e57806348b5537b146102315780634f6ccce71461025157600080fd5b806301ffc9a71461012457806306fdde0314610159578063081812fc1461017b578063095ea7b3146101b357806318160ddd146101c8575b600080fd5b34801561013057600080fd5b5061014461013f366004611a20565b6103b2565b60405190151581526020015b60405180910390f35b34801561016557600080fd5b5061016e6103f5565b6040516101509190611a8d565b34801561018757600080fd5b5061019b610196366004611aa0565b610404565b6040516001600160a01b039091168152602001610150565b6101c66101c1366004611ad5565b61040f565b005b3480156101d457600080fd5b506101dd61049b565b604051908152602001610150565b6101c66101f9366004611aff565b6104a5565b34801561020a57600080fd5b506101dd610219366004611ad5565b6104d7565b6101c661022c366004611aff565b6104ea565b34801561023d57600080fd5b506101c661024c366004611be7565b610505565b34801561025d57600080fd5b506101dd61026c366004611aa0565b6105e9565b34801561027d57600080fd5b5061019b61028c366004611aa0565b6105f4565b34801561029d57600080fd5b506101dd6102ac366004611c99565b6105ff565b3480156102bd57600080fd5b5061016e61060a565b3480156102d257600080fd5b506101c66102e1366004611cc2565b610614565b6101c66102f4366004611cf9565b6106c8565b34801561030557600080fd5b50610319610314366004611dfc565b610701565b6040516001600160e01b03199091168152602001610150565b34801561033e57600080fd5b5061016e61034d366004611aa0565b61083f565b34801561035e57600080fd5b506101c661036d366004611aff565b61084a565b34801561037e57600080fd5b5061014461038d366004611eb7565b6108d4565b34801561039e57600080fd5b506103196103ad366004611eea565b6108e0565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b60606103ff6109d2565b905090565b60006103ef82610a71565b600061041a826105f4565b9050806001600160a01b0316836001600160a01b03160361044e5760405163424a22cb60e01b815260040160405180910390fd5b336001600160a01b0382161480159061046e575061046c81336108d4565b155b1561048c57604051632f5de44f60e01b815260040160405180910390fd5b6104968383610ad4565b505050565b60006103ff610b61565b6104af3382610b7a565b6104cc57604051632f5de44f60e01b815260040160405180910390fd5b610496838383610c00565b60006104e38383610d2f565b9392505050565b610496838383604051806020016040528060008152506106c8565b6000805160206123a78339815191525460ff16156105775760405162461bcd60e51b815260206004820152603660248201526000805160206124078339815191526044820152751d0e88185b1c9958591e481a5b9a5d1a585b1a5e995960521b60648201526084015b60405180910390fd5b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6d80546001600160a01b0319166001600160a01b0388161790557f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6e8590556105e184848484610d5e565b505050505050565b60006103ef82610dec565b60006103ef82610e0d565b60006103ef82610e51565b60606103ff610ea8565b336001600160a01b0383160361063d5760405163424a22cb60e01b815260040160405180910390fd5b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6106d23383610b7a565b6106ef57604051632f5de44f60e01b815260040160405180910390fd5b6106fb84848484610ec7565b50505050565b60006001861480156107135750600184145b801561073857508484600081811061072d5761072d611f62565b905060200201356001145b6107545760405162461bcd60e51b815260040161056e90611f78565b6000805160206123a78339815191525460ff1615156001146107885760405162461bcd60e51b815260040161056e90611fc3565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6d546001600160a01b031633146107d15760405162461bcd60e51b815260040161056e90612007565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6e548787600081811061080657610806611f62565b905060200201351461082a5760405162461bcd60e51b815260040161056e9061205e565b5063bc197c8160e01b98975050505050505050565b60606103ef82610efb565b3330146104cc5760405162461bcd60e51b815260206004820152604c60248201527f4e6174697665537465776172644c6963656e73653a205472696767657220747260448201527f616e736665722063616e206f6e6c792062652063616c6c65642066726f6d206160648201526b1b9bdd1a195c88199858d95d60a21b608482015260a40161056e565b60006104e383836110dc565b6000836001146109025760405162461bcd60e51b815260040161056e90611f78565b6000805160206123a78339815191525460ff1615156001146109365760405162461bcd60e51b815260040161056e90611fc3565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6d546001600160a01b0316331461097f5760405162461bcd60e51b815260040161056e90612007565b7f4f3bc7155d2db681e29af52d1119e27d8b92f937da5bb676ae6155a2e77a3c6e5485146109bf5760405162461bcd60e51b815260040161056e9061205e565b5063f23a6e6160e01b9695505050505050565b60606000805160206123e783398151915280546109ee906120a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1a906120a9565b8015610a675780601f10610a3c57610100808354040283529160200191610a67565b820191906000526020600020905b815481529060010190602001808311610a4a57829003601f168201915b5050505050905090565b6000610a7c82611129565b610a995760405163c1b843ef60e01b815260040160405180910390fd5b5060009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a960205260409020546001600160a01b031690565b60008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a96020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610b2882610e0d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006103ff6000805160206123c7833981519152611143565b6000610b8582611129565b610ba25760405163c1b843ef60e01b815260040160405180910390fd5b6000610bad83610e0d565b9050806001600160a01b0316846001600160a01b03161480610be85750836001600160a01b0316610bdd84610a71565b6001600160a01b0316145b80610bf85750610bf881856110dc565b949350505050565b826001600160a01b0316610c1382610e0d565b6001600160a01b031614610c3a57604051630f2db4ad60e01b815260040160405180910390fd5b6001600160a01b038216610c61576040516340311a0960e01b815260040160405180910390fd5b610c6c83838361114d565b610c77600082610ad4565b6001600160a01b0383166000908152600080516020612387833981519152602052604090206000805160206123c783398151915290610cb69083611243565b506001600160a01b03831660009081526002820160205260409020610cdb908361124f565b50610ce781838561125b565b5081836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6001600160a01b0382166000908152600080516020612387833981519152602052604081206104e39083611271565b6000805160206123a7833981519152805460ff191660011781556000805160206123e783398151915280610d928682612129565b5060018101610da18582612129565b5060008080526003820160205260409020610dbc8482612129565b50610dcf6301ffc9a760e01b600161127d565b610de16380ac58cd60e01b600161127d565b6105e18660006112f3565b6000610e066000805160206123c7833981519152836113d6565b5092915050565b600080610e286000805160206123c7833981519152846113f4565b90506001600160a01b0381166103ef57604051637e1a7d8b60e01b815260040160405180910390fd5b60006001600160a01b038216610e7a57604051630810ff9760e41b815260040160405180910390fd5b6001600160a01b0382166000908152600080516020612387833981519152602052604090206103ef90611143565b60606000805160206123e783398151915260010180546109ee906120a9565b610ed2848484610c00565b610ede84848484611400565b6106fb57604051639ff10cdd60e01b815260040160405180910390fd5b6060610f0682611129565b610f2257604051624705a760e71b815260040160405180910390fd5b60008281527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040812080546000805160206123e7833981519152929190610f6c906120a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610f98906120a9565b8015610fe55780601f10610fba57610100808354040283529160200191610fe5565b820191906000526020600020905b815481529060010190602001808311610fc857829003601f168201915b505050505090506000826002018054610ffd906120a9565b80601f0160208091040260200160405190810160405280929190818152602001828054611029906120a9565b80156110765780601f1061104b57610100808354040283529160200191611076565b820191906000526020600020905b81548152906001019060200180831161105957829003601f168201915b50505050509050805160000361108e57509392505050565b8151156110c15780826040516020016110a89291906121e9565b6040516020818303038152906040529350505050919050565b806110cb866114d1565b6040516020016110a89291906121e9565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b60006103ef6000805160206123c7833981519152836115d2565b60006103ef825490565b6001600160a01b03831615611238576000306001600160a01b031663ec214d336040518163ffffffff1660e01b8152600401602060405180830381865afa15801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c09190612218565b905080156112365760405162461bcd60e51b815260206004820152603a60248201527f537465776172644c6963656e736546616365743a2043616e6e6f74207472616e60448201527f7366657220647572696e672061756374696f6e20706572696f64000000000000606482015260840161056e565b505b6104968383836115ea565b60006104e383836115f5565b60006104e383836116af565b6000610bf884846001600160a01b0385166116f2565b60006104e38383611791565b6001600160e01b031980831690036112a85760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b6001600160a01b03821661131a576040516311f2988d60e11b815260040160405180910390fd5b61132381611129565b1561134157604051630d86bb7b60e31b815260040160405180910390fd5b61134d6000838361114d565b6001600160a01b0382166000908152600080516020612387833981519152602052604090206000805160206123c78339815191529061138c908361124f565b5061139881838561125b565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b60008080806113e586866117dd565b909450925050505b9250929050565b60006104e38383611840565b60006001600160a01b0384163b61141957506001610bf8565b600061149a63150b7a0260e01b3388878760405160240161143d9493929190612235565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001612355603291396001600160a01b03881691906118a4565b90506000818060200190518101906114b29190612272565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b6060816000036114f85750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611522578061150c816122a5565b915061151b9050600a836122d4565b91506114fc565b60008167ffffffffffffffff81111561153d5761153d611b3b565b6040519080825280601f01601f191660200182016040528015611567576020820181803683370190505b5090505b8415610bf85761157c6001836122e8565b9150611589600a866122fb565b61159490603061230f565b60f81b8183815181106115a9576115a9611f62565b60200101906001600160f81b031916908160001a9053506115cb600a866122d4565b945061156b565b600081815260018301602052604081205415156104e3565b6104968383836118b3565b60008181526001830160205260408120548015610e065783546000908590600019810190811061162757611627611f62565b906000526020600020015490508085600001600184038154811061164d5761164d611f62565b600091825260208083209091019290925591825260018601905260409020819055835484908061167f5761167f612322565b60008281526020808220830160001990810183905590920190925593815260019485019093525050604081205590565b60008181526001830160205260408120546103ef575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b60008281526001840160205260408120548082036117595750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556104e3565b8285600001600183038154811061177257611772611f62565b90600052602060002090600202016001018190555060009150506104e3565b815460009082106117b55760405163e637bf3b60e01b815260040160405180910390fd5b8260000182815481106117ca576117ca611f62565b9060005260206000200154905092915050565b8154600090819083106118035760405163022fd82760e31b815260040160405180910390fd5b600084600001848154811061181a5761181a611f62565b906000526020600020906002020190508060000154816001015492509250509250929050565b600081815260018301602052604081205480820361187157604051633d547ec560e21b815260040160405180910390fd5b83600001600182038154811061188957611889611f62565b90600052602060002090600202016001015491505092915050565b6060610bf884846000856118f7565b6001600160a01b0382166104965760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b460205260408120610496916119b4565b6060843b61191857604051632270d6bf60e21b815260040160405180910390fd5b600080866001600160a01b031685876040516119349190612338565b60006040518083038185875af1925050503d8060008114611971576040519150601f19603f3d011682016040523d82523d6000602084013e611976565b606091505b5091509150811561198a579150610bf89050565b80511561199a5780518082602001fd5b8360405162461bcd60e51b815260040161056e9190611a8d565b5080546119c0906120a9565b6000825580601f106119d0575050565b601f0160209004906000526020600020908101906119ee91906119f1565b50565b5b80821115611a0657600081556001016119f2565b5090565b6001600160e01b0319811681146119ee57600080fd5b600060208284031215611a3257600080fd5b81356104e381611a0a565b60005b83811015611a58578181015183820152602001611a40565b50506000910152565b60008151808452611a79816020860160208601611a3d565b601f01601f19169290920160200192915050565b6020815260006104e36020830184611a61565b600060208284031215611ab257600080fd5b5035919050565b80356001600160a01b0381168114611ad057600080fd5b919050565b60008060408385031215611ae857600080fd5b611af183611ab9565b946020939093013593505050565b600080600060608486031215611b1457600080fd5b611b1d84611ab9565b9250611b2b60208501611ab9565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611b6c57611b6c611b3b565b604051601f8501601f19908116603f01168101908282118183101715611b9457611b94611b3b565b81604052809350858152868686011115611bad57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611bd857600080fd5b6104e383833560208501611b51565b60008060008060008060c08789031215611c0057600080fd5b611c0987611ab9565b955060208701359450611c1e60408801611ab9565b9350606087013567ffffffffffffffff80821115611c3b57600080fd5b611c478a838b01611bc7565b94506080890135915080821115611c5d57600080fd5b611c698a838b01611bc7565b935060a0890135915080821115611c7f57600080fd5b50611c8c89828a01611bc7565b9150509295509295509295565b600060208284031215611cab57600080fd5b6104e382611ab9565b80151581146119ee57600080fd5b60008060408385031215611cd557600080fd5b611cde83611ab9565b91506020830135611cee81611cb4565b809150509250929050565b60008060008060808587031215611d0f57600080fd5b611d1885611ab9565b9350611d2660208601611ab9565b925060408501359150606085013567ffffffffffffffff811115611d4957600080fd5b8501601f81018713611d5a57600080fd5b611d6987823560208401611b51565b91505092959194509250565b60008083601f840112611d8757600080fd5b50813567ffffffffffffffff811115611d9f57600080fd5b6020830191508360208260051b85010111156113ed57600080fd5b60008083601f840112611dcc57600080fd5b50813567ffffffffffffffff811115611de457600080fd5b6020830191508360208285010111156113ed57600080fd5b60008060008060008060008060a0898b031215611e1857600080fd5b611e2189611ab9565b9750611e2f60208a01611ab9565b9650604089013567ffffffffffffffff80821115611e4c57600080fd5b611e588c838d01611d75565b909850965060608b0135915080821115611e7157600080fd5b611e7d8c838d01611d75565b909650945060808b0135915080821115611e9657600080fd5b50611ea38b828c01611dba565b999c989b5096995094979396929594505050565b60008060408385031215611eca57600080fd5b611ed383611ab9565b9150611ee160208401611ab9565b90509250929050565b60008060008060008060a08789031215611f0357600080fd5b611f0c87611ab9565b9550611f1a60208801611ab9565b94506040870135935060608701359250608087013567ffffffffffffffff811115611f4457600080fd5b611f5089828a01611dba565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b6020808252603d9082015260008051602061240783398151915260408201527f743a2063616e206f6e6c792072656365697665206f6e6520746f6b656e000000606082015260800190565b60208082526036908201526000805160206124078339815191526040820152751d0e881b5d5cdd081899481a5b9a5d1a585b1a5e995960521b606082015260800190565b602080825260439082015260008051602061240783398151915260408201527f743a2063616e6e6f7420616363657074207468697320746f6b656e206164647260608201526265737360e81b608082015260a00190565b6020808252603e9082015260008051602061240783398151915260408201527f743a2063616e6e6f7420616363657074207468697320746f6b656e2049440000606082015260800190565b600181811c908216806120bd57607f821691505b6020821081036120dd57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561049657600081815260208120601f850160051c8101602086101561210a5750805b601f850160051c820191505b818110156105e157828155600101612116565b815167ffffffffffffffff81111561214357612143611b3b565b6121578161215184546120a9565b846120e3565b602080601f83116001811461218c57600084156121745750858301515b600019600386901b1c1916600185901b1785556105e1565b600085815260208120601f198616915b828110156121bb5788860151825594840194600190910190840161219c565b50858210156121d95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600083516121fb818460208801611a3d565b83519083019061220f818360208801611a3d565b01949350505050565b60006020828403121561222a57600080fd5b81516104e381611cb4565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061226890830184611a61565b9695505050505050565b60006020828403121561228457600080fd5b81516104e381611a0a565b634e487b7160e01b600052601160045260246000fd5b6000600182016122b7576122b761228f565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826122e3576122e36122be565b500490565b818103818111156103ef576103ef61228f565b60008261230a5761230a6122be565b500690565b808201808211156103ef576103ef61228f565b634e487b7160e01b600052603160045260246000fd5b6000825161234a818460208701611a3d565b919091019291505056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465723c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a879ec1734da2430052e9d78936f451aad707e5bed12ef4806b06dc3d0c38f0e303c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a699574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b15772617070656445524331313535537465776172644c6963656e736546616365a2646970667358221220bae593664c0bc4ee24476dee399755c82badca02a1e85de8683f08acd35f06e264736f6c63430008110033",
  "devdoc": {
    "details": "ERC-721 token license for Steward that wraps existing ERC-1155. Transfers are disabled during an auction.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "operator": "address to be approved",
          "tokenId": "token to approve"
        }
      },
      "balanceOf(address)": {
        "returns": {
          "_0": "quantity of tokens held"
        }
      },
      "getApproved(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "address approved to spend token"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "token owner"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "data payload",
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address to be approved",
          "status": "approval status"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "tokenByIndex(uint256)": {
        "params": {
          "index": "position in global token list to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "params": {
          "index": "position in owner's token list to query",
          "owner": "token holder to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "total supply"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      }
    },
    "title": "WrappedERC1155StewardLicenseFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "grant approval to given account to spend token"
      },
      "balanceOf(address)": {
        "notice": "query the balance of given address"
      },
      "getApproved(uint256)": {
        "notice": "get approval status for given token"
      },
      "initializeWrappedStewardLicense(address,uint256,address,string,string,string)": {
        "notice": "Initialize license"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "name()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "ownerOf(uint256)": {
        "notice": "query the owner of given token"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given account to spend all tokens held by sender"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "symbol()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "tokenByIndex(uint256)": {
        "notice": "get token at given internal storage index"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "get token of given owner at given internal storage index"
      },
      "tokenURI(uint256)": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "totalSupply()": {
        "notice": "get total token supply"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, without checking for ERC721Receiver implementation if applicable"
      },
      "triggerTransfer(address,address,uint256)": {
        "notice": "Trigger transfer of license"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
