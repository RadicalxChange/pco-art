{
  "address": "0x0f35BF73f4D2b52Fe24aBCd8a8e6e32074d5815A",
  "abi": [
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintUtils__InsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_allowAny",
          "type": "bool"
        }
      ],
      "name": "AllowAnyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "Allowlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "BatchAllowlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "BatchUnallowlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "Unallowlisted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allowAny",
          "type": "bool"
        }
      ],
      "name": "addToAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addToAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "batchAddToAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_allowAny",
          "type": "bool"
        }
      ],
      "name": "batchAddToAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "batchRemoveFromAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_allowAny",
          "type": "bool"
        }
      ],
      "name": "batchRemoveFromAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_removeAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_addAddresses",
          "type": "address[]"
        }
      ],
      "name": "batchUpdateAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_removeAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_addAddresses",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_allowAny",
          "type": "bool"
        }
      ],
      "name": "batchUpdateAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowAny",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowlist",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowAny",
          "type": "bool"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "initializeAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "allowAny",
          "type": "bool"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "initializeAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeFromAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allowAny",
          "type": "bool"
        }
      ],
      "name": "removeFromAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_allowAny",
          "type": "bool"
        }
      ],
      "name": "setAllowAny",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5eb3f4aa7afeede13e9d8e1ba2e64928340502a72210fb6beb0f32acd97ee093",
  "receipt": {
    "to": null,
    "from": "0xfF5Be16460704eFd0263dB1444Eaa216b77477c5",
    "contractAddress": "0x0f35BF73f4D2b52Fe24aBCd8a8e6e32074d5815A",
    "transactionIndex": 1,
    "gasUsed": "1091301",
    "logsBloom": "0x
    "blockHash": "0x574117a7f7f6e6e00ef2be063f328e6cb250cae0367589ca3bacaed1ac0c4eb9",
    "transactionHash": "0x5eb3f4aa7afeede13e9d8e1ba2e64928340502a72210fb6beb0f32acd97ee093",
    "logs": [],
    "blockNumber": 13960438,
    "cumulativeGasUsed": "1155266",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "fa6ec49a0468ff0dbeeee6eeb252eafd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_allowAny\",\"type\":\"bool\"}],\"name\":\"AllowAnyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Allowlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"BatchAllowlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"BatchUnallowlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Unallowlisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowAny\",\"type\":\"bool\"}],\"name\":\"addToAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"batchAddToAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_allowAny\",\"type\":\"bool\"}],\"name\":\"batchAddToAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"batchRemoveFromAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_allowAny\",\"type\":\"bool\"}],\"name\":\"batchRemoveFromAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_removeAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_addAddresses\",\"type\":\"address[]\"}],\"name\":\"batchUpdateAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_removeAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_addAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_allowAny\",\"type\":\"bool\"}],\"name\":\"batchUpdateAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowAny\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowlist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowAny\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"initializeAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allowAny\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"initializeAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowAny\",\"type\":\"bool\"}],\"name\":\"removeFromAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowAny\",\"type\":\"bool\"}],\"name\":\"setAllowAny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Allows owner to set an allowlist of addresses\",\"kind\":\"dev\",\"methods\":{},\"title\":\"AllowlistFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addToAllowlist(address)\":{\"notice\":\"Add to allowlist\"},\"addToAllowlist(address,bool)\":{\"notice\":\"Add to allowlist with allow any\"},\"batchAddToAllowlist(address[])\":{\"notice\":\"Batch add to allowlist\"},\"batchAddToAllowlist(address[],bool)\":{\"notice\":\"Batch add to allowlist with allow any\"},\"batchRemoveFromAllowlist(address[])\":{\"notice\":\"Batch remove from allowlist\"},\"batchRemoveFromAllowlist(address[],bool)\":{\"notice\":\"Batch remove from allowlist with allow any\"},\"batchUpdateAllowlist(address[],address[])\":{\"notice\":\"Batch update allowlist\"},\"batchUpdateAllowlist(address[],address[],bool)\":{\"notice\":\"Batch update allowlist with allow any\"},\"getAllowAny()\":{\"notice\":\"Get allow any\"},\"getAllowlist()\":{\"notice\":\"Get allowlist as array\"},\"initializeAllowlist(address,bool,address[])\":{\"notice\":\"Initialize allowlist with owner\"},\"initializeAllowlist(bool,address[])\":{\"notice\":\"Initialize allowlist\"},\"isAllowed(address)\":{\"notice\":\"Check if address is allowed\"},\"removeFromAllowlist(address)\":{\"notice\":\"Remove from allowlist\"},\"removeFromAllowlist(address,bool)\":{\"notice\":\"Remove from allowlist with allow any\"},\"setAllowAny(bool)\":{\"notice\":\"Set allow any\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/allowlist/facets/AllowlistFacet.sol\":\"AllowlistFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice query role for member at given index\\n     * @param role role to query\\n     * @param index index to query\\n     */\\n    function _getRoleMember(\\n        bytes32 role,\\n        uint256 index\\n    ) internal view virtual returns (address) {\\n        return AccessControlStorage.layout().roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @notice query role for member count\\n     * @param role role to query\\n     */\\n    function _getRoleMemberCount(\\n        bytes32 role\\n    ) internal view virtual returns (uint256) {\\n        return AccessControlStorage.layout().roles[role].members.length();\\n    }\\n}\\n\",\"keccak256\":\"0x313d74202592af8c7a890c051959b58a3e016b9d0b263d03887a39f2bce27f76\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xf4d4708a60ed04887849509a258db49d4eb686f33214cb9c9643325cd8dae89d\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view virtual returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal virtual {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xad163d89454d9c8a018880253c5be156ee0f847f05a392a12b2a7061c7fa8682\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/allowlist/AllowlistReadableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { EnumerableSet } from '@solidstate/contracts/data/EnumerableSet.sol';\\nimport { AllowlistStorage } from './AllowlistStorage.sol';\\n\\n/**\\n * @title AllowlistReadableInternal\\n */\\nabstract contract AllowlistReadableInternal {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Check if address is allowed\\n     */\\n    function _isAllowed(address _address) internal view returns (bool) {\\n        AllowlistStorage.Layout storage l = AllowlistStorage.layout();\\n\\n        if (l.allowAny) {\\n            return true;\\n        }\\n        return l.allowlist.contains(_address);\\n    }\\n\\n    /**\\n     * @notice Get allowlist as array\\n     */\\n    function _getAllowlist() internal view returns (address[] memory) {\\n        AllowlistStorage.Layout storage l = AllowlistStorage.layout();\\n\\n        return l.allowlist.toArray();\\n    }\\n\\n    /**\\n     * @notice Get allow any\\n     */\\n    function _getAllowAny() internal view returns (bool) {\\n        AllowlistStorage.Layout storage l = AllowlistStorage.layout();\\n\\n        return l.allowAny;\\n    }\\n}\\n\",\"keccak256\":\"0x5d98adb5097b89dbb0414f0ff0d0d61270a9f0e270b42c44153ce0da67806767\",\"license\":\"MIT\"},\"contracts/allowlist/AllowlistStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { EnumerableSet } from '@solidstate/contracts/data/EnumerableSet.sol';\\n\\n/**\\n * @title AllowlistStorage\\n */\\nlibrary AllowlistStorage {\\n    struct Layout {\\n        bool isInitialized;\\n        bool allowAny;\\n        EnumerableSet.AddressSet allowlist;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256('pcoart.contracts.storage.AllowlistStorage');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25b4fb6213430d0097727f3bd3112e060ea30cb5e6e56a130184174c72a0ea9e\",\"license\":\"MIT\"},\"contracts/allowlist/AllowlistWritableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { EnumerableSet } from '@solidstate/contracts/data/EnumerableSet.sol';\\nimport { AllowlistStorage } from './AllowlistStorage.sol';\\nimport { IAllowlistWritableInternal } from './IAllowlistWritableInternal.sol';\\n\\n/**\\n * @title AllowlistWritableInternal\\n */\\nabstract contract AllowlistWritableInternal is IAllowlistWritableInternal {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Initialize allowlist\\n     */\\n    function _initializeAllowlist(\\n        bool _allowAny,\\n        address[] memory _addresses\\n    ) internal {\\n        AllowlistStorage.Layout storage l = AllowlistStorage.layout();\\n\\n        l.isInitialized = true;\\n\\n        _setAllowAny(_allowAny);\\n\\n        for (uint256 i; i < _addresses.length; i++) {\\n            l.allowlist.add(_addresses[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if initialized\\n     */\\n    function _isInitialized() internal view returns (bool) {\\n        return AllowlistStorage.layout().isInitialized;\\n    }\\n\\n    /**\\n     * @notice Set allow any\\n     */\\n    function _setAllowAny(bool _allowAny) internal {\\n        AllowlistStorage.Layout storage l = AllowlistStorage.layout();\\n\\n        l.allowAny = _allowAny;\\n\\n        emit AllowAnyUpdated(_allowAny);\\n    }\\n\\n    /**\\n     * @notice Add to allowlist\\n     */\\n    function _addToAllowlist(address _address) internal {\\n        AllowlistStorage.Layout storage l = AllowlistStorage.layout();\\n\\n        l.allowlist.add(_address);\\n\\n        emit Allowlisted(_address);\\n    }\\n\\n    /**\\n     * @notice Remove from allowlist\\n     */\\n    function _removeFromAllowlist(address _address) internal {\\n        AllowlistStorage.Layout storage l = AllowlistStorage.layout();\\n\\n        l.allowlist.remove(_address);\\n\\n        emit Unallowlisted(_address);\\n    }\\n\\n    /**\\n     * @notice Batch add to allowlist\\n     */\\n    function _batchAddToAllowlist(address[] memory _addresses) internal {\\n        AllowlistStorage.Layout storage l = AllowlistStorage.layout();\\n\\n        for (uint256 i; i < _addresses.length; i++) {\\n            l.allowlist.add(_addresses[i]);\\n        }\\n\\n        emit BatchAllowlisted(_addresses);\\n    }\\n\\n    /**\\n     * @notice Batch remove from allowlist\\n     */\\n    function _batchRemoveFromAllowlist(address[] memory _addresses) internal {\\n        AllowlistStorage.Layout storage l = AllowlistStorage.layout();\\n\\n        for (uint256 i; i < _addresses.length; i++) {\\n            l.allowlist.remove(_addresses[i]);\\n        }\\n\\n        emit BatchUnallowlisted(_addresses);\\n    }\\n}\\n\",\"keccak256\":\"0x7d30b7ba898bd762f9fbc5adab6fff35698bce6769446956f32daec2e525809d\",\"license\":\"MIT\"},\"contracts/allowlist/IAllowlistReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/**\\n * @title IAllowlistReadable\\n */\\ninterface IAllowlistReadable {\\n    /**\\n     * @notice Check if address is allowed\\n     */\\n    function isAllowed(address _address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6ab698a298645931b3071959619ae7dfc3f1bcaa0fb78aee56b06a185c1d11cd\",\"license\":\"MIT\"},\"contracts/allowlist/IAllowlistWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/**\\n * @title IAllowlistWritable\\n */\\ninterface IAllowlistWritable {\\n    /**\\n     * @notice Set allow any\\n     */\\n    function setAllowAny(bool _allowAny) external;\\n\\n    /**\\n     * @notice Add to allowlist\\n     */\\n    function addToAllowlist(address _address) external;\\n\\n    /**\\n     * @notice Remove from allowlist\\n     */\\n    function removeFromAllowlist(address _address) external;\\n}\\n\",\"keccak256\":\"0x00635c1706eeec085335c06802aad21205ec98323adca4ece2d454c75b441f90\",\"license\":\"MIT\"},\"contracts/allowlist/IAllowlistWritableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/**\\n * @title IAllowlistWritableInternal\\n */\\ninterface IAllowlistWritableInternal {\\n    event Allowlisted(address indexed _address);\\n    event BatchAllowlisted(address[] _addresses);\\n\\n    event Unallowlisted(address indexed _address);\\n    event BatchUnallowlisted(address[] _addresses);\\n\\n    event AllowAnyUpdated(bool indexed _allowAny);\\n}\\n\",\"keccak256\":\"0xba6e4a09da93b3b09d2bfd20ce604c0aa5a42397bc872887f1e85af2f3bdc549\",\"license\":\"MIT\"},\"contracts/allowlist/facets/AllowlistFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { EnumerableSet } from '@solidstate/contracts/data/EnumerableSet.sol';\\nimport { IAllowlistWritable } from '../IAllowlistWritable.sol';\\nimport { AllowlistStorage } from '../AllowlistStorage.sol';\\nimport { AllowlistReadableInternal } from '../AllowlistReadableInternal.sol';\\nimport { AllowlistWritableInternal } from '../AllowlistWritableInternal.sol';\\nimport { ERC165BaseInternal } from '@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol';\\nimport { AccessControlInternal } from '@solidstate/contracts/access/access_control/AccessControlInternal.sol';\\nimport { IAllowlistReadable } from '../IAllowlistReadable.sol';\\n\\n/**\\n * @title AllowlistFacet\\n * @dev Allows owner to set an allowlist of addresses\\n */\\ncontract AllowlistFacet is\\n    AccessControlInternal,\\n    IAllowlistWritable,\\n    IAllowlistReadable,\\n    AllowlistReadableInternal,\\n    AllowlistWritableInternal,\\n    ERC165BaseInternal\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Component role\\n    bytes32 internal constant COMPONENT_ROLE =\\n        keccak256('AllowlistFacet.COMPONENT_ROLE');\\n\\n    /**\\n     * @notice Initialize allowlist\\n     */\\n    function initializeAllowlist(\\n        bool allowAny,\\n        address[] memory _addresses\\n    ) external {\\n        require(\\n            _isInitialized() == false,\\n            'AllowlistFacet: already initialized'\\n        );\\n\\n        _setSupportsInterface(type(IAllowlistReadable).interfaceId, true);\\n        _initializeAllowlist(allowAny, _addresses);\\n    }\\n\\n    /**\\n     * @notice Initialize allowlist with owner\\n     */\\n    function initializeAllowlist(\\n        address _owner,\\n        bool allowAny,\\n        address[] memory _addresses\\n    ) external {\\n        require(\\n            _isInitialized() == false,\\n            'AllowlistFacet: already initialized'\\n        );\\n\\n        _setSupportsInterface(type(IAllowlistReadable).interfaceId, true);\\n        _setSupportsInterface(type(IAllowlistWritable).interfaceId, true);\\n        _grantRole(COMPONENT_ROLE, _owner);\\n        _grantRole(_getRoleAdmin(COMPONENT_ROLE), _owner);\\n        _initializeAllowlist(allowAny, _addresses);\\n    }\\n\\n    /**\\n     * @notice Check if address is allowed\\n     */\\n    function isAllowed(address _address) external view returns (bool) {\\n        return _isAllowed(_address);\\n    }\\n\\n    /**\\n     * @notice Set allow any\\n     */\\n    function setAllowAny(bool _allowAny) external onlyRole(COMPONENT_ROLE) {\\n        return _setAllowAny(_allowAny);\\n    }\\n\\n    /**\\n     * @notice Get allow any\\n     */\\n    function getAllowAny() external view returns (bool) {\\n        return _getAllowAny();\\n    }\\n\\n    /**\\n     * @notice Get allowlist as array\\n     */\\n    function getAllowlist() external view returns (address[] memory) {\\n        return _getAllowlist();\\n    }\\n\\n    /**\\n     * @notice Add to allowlist\\n     */\\n    function addToAllowlist(\\n        address _address\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _addToAllowlist(_address);\\n    }\\n\\n    /**\\n     * @notice Add to allowlist with allow any\\n     */\\n    function addToAllowlist(\\n        address _address,\\n        bool _allowAny\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _addToAllowlist(_address);\\n        _setAllowAny(_allowAny);\\n    }\\n\\n    /**\\n     * @notice Remove from allowlist\\n     */\\n    function removeFromAllowlist(\\n        address _address\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _removeFromAllowlist(_address);\\n    }\\n\\n    /**\\n     * @notice Remove from allowlist with allow any\\n     */\\n    function removeFromAllowlist(\\n        address _address,\\n        bool _allowAny\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _removeFromAllowlist(_address);\\n        _setAllowAny(_allowAny);\\n    }\\n\\n    /**\\n     * @notice Batch add to allowlist\\n     */\\n    function batchAddToAllowlist(\\n        address[] memory _addresses\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _batchAddToAllowlist(_addresses);\\n    }\\n\\n    /**\\n     * @notice Batch add to allowlist with allow any\\n     */\\n    function batchAddToAllowlist(\\n        address[] memory _addresses,\\n        bool _allowAny\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _batchAddToAllowlist(_addresses);\\n        _setAllowAny(_allowAny);\\n    }\\n\\n    /**\\n     * @notice Batch remove from allowlist\\n     */\\n    function batchRemoveFromAllowlist(\\n        address[] memory _addresses\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _batchRemoveFromAllowlist(_addresses);\\n    }\\n\\n    /**\\n     * @notice Batch remove from allowlist with allow any\\n     */\\n    function batchRemoveFromAllowlist(\\n        address[] memory _addresses,\\n        bool _allowAny\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _batchRemoveFromAllowlist(_addresses);\\n        _setAllowAny(_allowAny);\\n    }\\n\\n    /**\\n     * @notice Batch update allowlist\\n     */\\n    function batchUpdateAllowlist(\\n        address[] memory _removeAddresses,\\n        address[] memory _addAddresses\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _batchRemoveFromAllowlist(_removeAddresses);\\n        _batchAddToAllowlist(_addAddresses);\\n    }\\n\\n    /**\\n     * @notice Batch update allowlist with allow any\\n     */\\n    function batchUpdateAllowlist(\\n        address[] memory _removeAddresses,\\n        address[] memory _addAddresses,\\n        bool _allowAny\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _batchRemoveFromAllowlist(_removeAddresses);\\n        _batchAddToAllowlist(_addAddresses);\\n        _setAllowAny(_allowAny);\\n    }\\n}\\n\",\"keccak256\":\"0x804bd2dd3aa13230233c19fcd145a2ca5a63a3ac3b03340a5a0660b5d8efb192\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Allows owner to set an allowlist of addresses",
    "kind": "dev",
    "methods": {},
    "title": "AllowlistFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addToAllowlist(address)": {
        "notice": "Add to allowlist"
      },
      "addToAllowlist(address,bool)": {
        "notice": "Add to allowlist with allow any"
      },
      "batchAddToAllowlist(address[])": {
        "notice": "Batch add to allowlist"
      },
      "batchAddToAllowlist(address[],bool)": {
        "notice": "Batch add to allowlist with allow any"
      },
      "batchRemoveFromAllowlist(address[])": {
        "notice": "Batch remove from allowlist"
      },
      "batchRemoveFromAllowlist(address[],bool)": {
        "notice": "Batch remove from allowlist with allow any"
      },
      "batchUpdateAllowlist(address[],address[])": {
        "notice": "Batch update allowlist"
      },
      "batchUpdateAllowlist(address[],address[],bool)": {
        "notice": "Batch update allowlist with allow any"
      },
      "getAllowAny()": {
        "notice": "Get allow any"
      },
      "getAllowlist()": {
        "notice": "Get allowlist as array"
      },
      "initializeAllowlist(address,bool,address[])": {
        "notice": "Initialize allowlist with owner"
      },
      "initializeAllowlist(bool,address[])": {
        "notice": "Initialize allowlist"
      },
      "isAllowed(address)": {
        "notice": "Check if address is allowed"
      },
      "removeFromAllowlist(address)": {
        "notice": "Remove from allowlist"
      },
      "removeFromAllowlist(address,bool)": {
        "notice": "Remove from allowlist with allow any"
      },
      "setAllowAny(bool)": {
        "notice": "Set allow any"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
