{
  "address": "0xCaEDD50B68eFF37A068D90113F5AC6110E3162e1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "diamondAddress",
          "type": "address"
        }
      ],
      "name": "DiamondCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "initTarget",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "initData",
              "type": "bytes"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamond.FacetInit[]",
          "name": "facetInits",
          "type": "tuple[]"
        }
      ],
      "name": "createDiamond",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a32e3dbf171483d36fdf858bc3d1d279b9efaac8aadbce2318c92a961de2369",
  "receipt": {
    "to": null,
    "from": "0xfF5Be16460704eFd0263dB1444Eaa216b77477c5",
    "contractAddress": "0xCaEDD50B68eFF37A068D90113F5AC6110E3162e1",
    "transactionIndex": 2,
    "gasUsed": "2947143",
    "logsBloom": "0x
    "blockHash": "0x1d6712b04856a3be26769ee02b989e8cdafc65991e2c8b9eec2b53c9d67d437d",
    "transactionHash": "0x7a32e3dbf171483d36fdf858bc3d1d279b9efaac8aadbce2318c92a961de2369",
    "logs": [],
    "blockNumber": 13398927,
    "cumulativeGasUsed": "3140334",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7c2f2883e0da9bf3e6298a712dbf5e36",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"diamondAddress\",\"type\":\"address\"}],\"name\":\"DiamondCreated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamond.FacetInit[]\",\"name\":\"facetInits\",\"type\":\"tuple[]\"}],\"name\":\"createDiamond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/proxies/OwnableDiamondFactory.sol\":\"OwnableDiamondFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/access/ownable/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\n\\ninterface IOwnable is IERC173 {}\\n\",\"keccak256\":\"0xd2d21c507ed587cd5de6cc016d4b9c7e956e468108b784455a400301707031c1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/IOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from '../../interfaces/IERC173Internal.sol';\\n\\ninterface IOwnableInternal is IERC173Internal {\\n    error Ownable__NotOwner();\\n    error Ownable__NotTransitiveOwner();\\n}\\n\",\"keccak256\":\"0x6237a634712261bd82d5c7753780d35f77af215406d1e59512052f743f8f1c60\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/ISafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnable } from './IOwnable.sol';\\n\\ninterface ISafeOwnable is IOwnable {\\n    /**\\n     * @notice get the nominated owner who has permission to call acceptOwnership\\n     */\\n    function nomineeOwner() external view returns (address);\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x6d321531723ca42e2492dbee44c64c75e454b234bf770f74151819fecdc5870a\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/ISafeOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\n\\ninterface ISafeOwnableInternal is IOwnableInternal {\\n    error SafeOwnable__NotNomineeOwner();\\n}\\n\",\"keccak256\":\"0xd5d44576a2f82b4ffdcf29feec6043e82436011784d92567a968609aa49a0f6b\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { IOwnable } from './IOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173\\n */\\nabstract contract Ownable is IOwnable, OwnableInternal {\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function transferOwnership(address account) public virtual onlyOwner {\\n        _transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0xe16b09090c1251f8cc97fb2cc10c86675e0d0d9f0fc0032b417c37c8dba2db5f\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal is IOwnableInternal {\\n    using AddressUtils for address;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner()) revert Ownable__NotOwner();\\n        _;\\n    }\\n\\n    modifier onlyTransitiveOwner() {\\n        if (msg.sender != _transitiveOwner())\\n            revert Ownable__NotTransitiveOwner();\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transitiveOwner() internal view virtual returns (address owner) {\\n        owner = _owner();\\n\\n        while (owner.isContract()) {\\n            try IERC173(owner).owner() returns (address transitiveOwner) {\\n                owner = transitiveOwner;\\n            } catch {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        _setOwner(account);\\n    }\\n\\n    function _setOwner(address account) internal virtual {\\n        OwnableStorage.Layout storage l = OwnableStorage.layout();\\n        emit OwnershipTransferred(l.owner, account);\\n        l.owner = account;\\n    }\\n}\\n\",\"keccak256\":\"0x0185d24250a5e6fbafce443b9ba19bba761803e3e5d91ba423bfb1f5f0bbdbf9\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7385e2020de914f75cabdc83c6adf88ed21e9de14669a89b3832b80f4f8c7b73\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Ownable } from './Ownable.sol';\\nimport { ISafeOwnable } from './ISafeOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { SafeOwnableInternal } from './SafeOwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173 with ownership transfer safety check\\n */\\nabstract contract SafeOwnable is ISafeOwnable, Ownable, SafeOwnableInternal {\\n    /**\\n     * @inheritdoc ISafeOwnable\\n     */\\n    function nomineeOwner() public view virtual returns (address) {\\n        return _nomineeOwner();\\n    }\\n\\n    /**\\n     * @inheritdoc ISafeOwnable\\n     */\\n    function acceptOwnership() public virtual onlyNomineeOwner {\\n        _acceptOwnership();\\n    }\\n\\n    function _transferOwnership(\\n        address account\\n    ) internal virtual override(OwnableInternal, SafeOwnableInternal) {\\n        super._transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0x84d5694ad1f6cc77170ec667b02080dca1ccdde26eddaf46960d95971df1a5f1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISafeOwnableInternal } from './ISafeOwnableInternal.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { SafeOwnableStorage } from './SafeOwnableStorage.sol';\\n\\nabstract contract SafeOwnableInternal is ISafeOwnableInternal, OwnableInternal {\\n    modifier onlyNomineeOwner() {\\n        if (msg.sender != _nomineeOwner())\\n            revert SafeOwnable__NotNomineeOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @notice get the nominated owner who has permission to call acceptOwnership\\n     */\\n    function _nomineeOwner() internal view virtual returns (address) {\\n        return SafeOwnableStorage.layout().nomineeOwner;\\n    }\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function _acceptOwnership() internal virtual {\\n        _setOwner(msg.sender);\\n        delete SafeOwnableStorage.layout().nomineeOwner;\\n    }\\n\\n    /**\\n     * @notice set nominee owner, granting permission to call acceptOwnership\\n     */\\n    function _transferOwnership(address account) internal virtual override {\\n        SafeOwnableStorage.layout().nomineeOwner = account;\\n    }\\n}\\n\",\"keccak256\":\"0x37c50898938e52163f6d42d6e03e845a131013c7bbbc90e5dc6c26dd89782e39\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary SafeOwnableStorage {\\n    struct Layout {\\n        address nomineeOwner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.SafeOwnable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4818afb0b39e0770f881cbeaea1b1c77fba0daaa64bd8c1361d6e3a197628e93\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from './IERC173Internal.sol';\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 is IERC173Internal {\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return conrtact owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\",\"keccak256\":\"0x9b18a5ad66323c65a81ecd62c3536db99115fe69a30b56a04409de941da7deb6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC173Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC173 interface needed by internal functions\\n */\\ninterface IERC173Internal {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\",\"keccak256\":\"0x9644c3e56c9ecd1763f8aaa437d5d573a7f64a8d93ad7bea1a9c44beb5911b89\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165Base } from './IERC165Base.sol';\\nimport { ERC165BaseInternal } from './ERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165Base is IERC165Base, ERC165BaseInternal {\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return _supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3f2268856fdd9b27946adc65010bc83992069a90034bf692ab630802a926a9c2\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xba7b4d73d42dfc9f8083ce36aed0fa2c56c73878d8bda7d64f2fb908d5e04636\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\n\\ninterface IERC165Base is IERC165, IERC165BaseInternal {}\\n\",\"keccak256\":\"0x288c50013c735cf30be90eb084589fc54bc0ee77a88ec69c3cc1efb11d7dccf4\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IProxy {\\n    error Proxy__ImplementationIsNotContract();\\n\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x2a06657ce005059e60a0765fe090240732d910fc38de43ca8fd48804bb86c5e4\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { AddressUtils } from '../utils/AddressUtils.sol';\\nimport { IProxy } from './IProxy.sol';\\n\\n/**\\n * @title Base proxy contract\\n */\\nabstract contract Proxy is IProxy {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice delegate all calls to implementation contract\\n     * @dev reverts if implementation address contains no code, for compatibility with metamorphic contracts\\n     * @dev memory location in use by assembly may be unsafe in other contexts\\n     */\\n    fallback() external payable virtual {\\n        address implementation = _getImplementation();\\n\\n        if (!implementation.isContract())\\n            revert Proxy__ImplementationIsNotContract();\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get logic implementation address\\n     * @return implementation address\\n     */\\n    function _getImplementation() internal virtual returns (address);\\n}\\n\",\"keccak256\":\"0x4d6ba63d71b8cddb57746d564cc904931d1ee479052a19f902787417ee5d97a8\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/ISolidStateDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISafeOwnable } from '../../access/ownable/ISafeOwnable.sol';\\nimport { IERC165 } from '../../interfaces/IERC165.sol';\\nimport { IDiamondBase } from './base/IDiamondBase.sol';\\nimport { IDiamondFallback } from './fallback/IDiamondFallback.sol';\\nimport { IDiamondReadable } from './readable/IDiamondReadable.sol';\\nimport { IDiamondWritable } from './writable/IDiamondWritable.sol';\\n\\ninterface ISolidStateDiamond is\\n    IDiamondBase,\\n    IDiamondFallback,\\n    IDiamondReadable,\\n    IDiamondWritable,\\n    ISafeOwnable,\\n    IERC165\\n{\\n    receive() external payable;\\n}\\n\",\"keccak256\":\"0x541fe148acc6b9331149498d6f66308761a650da10c9bd8f9e933bdfec52f730\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/DiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Proxy } from '../../Proxy.sol';\\nimport { IDiamondBase } from './IDiamondBase.sol';\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy base contract\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\nabstract contract DiamondBase is IDiamondBase, Proxy {\\n    /**\\n     * @inheritdoc Proxy\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address implementation)\\n    {\\n        // inline storage layout retrieval uses less gas\\n        DiamondBaseStorage.Layout storage l;\\n        bytes32 slot = DiamondBaseStorage.STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n\\n        implementation = address(bytes20(l.facets[msg.sig]));\\n    }\\n}\\n\",\"keccak256\":\"0x6712d6c7bee937ac07ee00eeaa30895634fbd3cda7f5b5c179a2331ad05623df\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/DiamondBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nlibrary DiamondBaseStorage {\\n    struct Layout {\\n        // function selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) facets;\\n        // total number of selectors registered\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n        address fallbackAddress;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.DiamondBase');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74365666c0e9917d742bbab21e174dea6bc6ccf6146153e43dd9d9fe8417a36a\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/IDiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IProxy } from '../../IProxy.sol';\\n\\ninterface IDiamondBase is IProxy {}\\n\",\"keccak256\":\"0x3329852027ffb50519a245376a1dee8f828223c0fa439bbb16a80a1bc226c2fa\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/fallback/DiamondFallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { OwnableInternal } from '../../../access/ownable/OwnableInternal.sol';\\nimport { DiamondBase } from '../base/DiamondBase.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondFallback } from './IDiamondFallback.sol';\\n\\n// TODO: DiamondFallback interface\\n\\n/**\\n * @title Fallback feature for EIP-2535 \\\"Diamond\\\" proxy\\n */\\nabstract contract DiamondFallback is\\n    IDiamondFallback,\\n    OwnableInternal,\\n    DiamondBase\\n{\\n    /**\\n     * @inheritdoc IDiamondFallback\\n     */\\n    function getFallbackAddress()\\n        external\\n        view\\n        returns (address fallbackAddress)\\n    {\\n        fallbackAddress = _getFallbackAddress();\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondFallback\\n     */\\n    function setFallbackAddress(address fallbackAddress) external onlyOwner {\\n        _setFallbackAddress(fallbackAddress);\\n    }\\n\\n    /**\\n     * @inheritdoc DiamondBase\\n     * @notice query custom fallback address is no implementation is found\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address implementation)\\n    {\\n        implementation = super._getImplementation();\\n\\n        if (implementation == address(0)) {\\n            implementation = _getFallbackAddress();\\n        }\\n    }\\n\\n    /**\\n     * @notice query the address of the fallback implementation\\n     * @return fallbackAddress address of fallback implementation\\n     */\\n    function _getFallbackAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address fallbackAddress)\\n    {\\n        fallbackAddress = DiamondBaseStorage.layout().fallbackAddress;\\n    }\\n\\n    /**\\n     * @notice set the address of the fallback implementation\\n     * @param fallbackAddress address of fallback implementation\\n     */\\n    function _setFallbackAddress(address fallbackAddress) internal virtual {\\n        DiamondBaseStorage.layout().fallbackAddress = fallbackAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x22b541ba05979a4decc7c2f191aac3d873e44171fd1c3cbcca55e45651eaf024\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/fallback/IDiamondFallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IDiamondBase } from '../base/IDiamondBase.sol';\\n\\ninterface IDiamondFallback is IDiamondBase {\\n    /**\\n     * @notice query the address of the fallback implementation\\n     * @return fallbackAddress address of fallback implementation\\n     */\\n    function getFallbackAddress()\\n        external\\n        view\\n        returns (address fallbackAddress);\\n\\n    /**\\n     * @notice set the address of the fallback implementation\\n     * @param fallbackAddress address of fallback implementation\\n     */\\n    function setFallbackAddress(address fallbackAddress) external;\\n}\\n\",\"keccak256\":\"0x1b52280562511510101b03ea1c73d64645770582ba72aad8bb1633ccc8ae6d42\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondReadable } from './IDiamondReadable.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy introspection contract\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nabstract contract DiamondReadable is IDiamondReadable {\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        diamondFacets = new Facet[](l.selectorCount);\\n\\n        uint8[] memory numFacetSelectors = new uint8[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (diamondFacets[facetIndex].target == facet) {\\n                        diamondFacets[facetIndex].selectors[\\n                            numFacetSelectors[facetIndex]\\n                        ] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                diamondFacets[numFacets].target = facet;\\n                diamondFacets[numFacets].selectors = new bytes4[](\\n                    l.selectorCount\\n                );\\n                diamondFacets[numFacets].selectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = diamondFacets[facetIndex].selectors;\\n\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n\\n        // setting the number of facets\\n        assembly {\\n            mstore(diamondFacets, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory selectors) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        selectors = new bytes4[](l.selectorCount);\\n\\n        uint256 numSelectors;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\n                if (facet == address(bytes20(l.facets[selector]))) {\\n                    selectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n\\n        // set the number of selectors in the array\\n        assembly {\\n            mstore(selectors, numSelectors)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        addresses = new address[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facet == addresses[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                addresses[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        // set the number of facet addresses in the array\\n        assembly {\\n            mstore(addresses, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddress(\\n        bytes4 selector\\n    ) external view returns (address facet) {\\n        facet = address(bytes20(DiamondBaseStorage.layout().facets[selector]));\\n    }\\n}\\n\",\"keccak256\":\"0x03fd06c9bd8642a42ece1d9f75c9e99869a06f4310fa9fe80df924ff68984036\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/readable/IDiamondReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Diamond proxy introspection interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondReadable {\\n    struct Facet {\\n        address target;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice get all facets and their selectors\\n     * @return diamondFacets array of structured facet data\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets);\\n\\n    /**\\n     * @notice get all selectors for given facet address\\n     * @param facet address of facet to query\\n     * @return selectors array of function selectors\\n     */\\n    function facetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory selectors);\\n\\n    /**\\n     * @notice get addresses of all facets used by diamond\\n     * @return addresses array of facet addresses\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses);\\n\\n    /**\\n     * @notice get the address of the facet associated with given selector\\n     * @param selector function selector to query\\n     * @return facet facet address (zero address if not found)\\n     */\\n    function facetAddress(\\n        bytes4 selector\\n    ) external view returns (address facet);\\n}\\n\",\"keccak256\":\"0xe3536079514a210e74f6e93b62525d451ed75c50c82773f9574c24e886ebe1ed\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/DiamondWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { OwnableInternal } from '../../../access/ownable/OwnableInternal.sol';\\nimport { IDiamondWritable } from './IDiamondWritable.sol';\\nimport { DiamondWritableInternal } from './DiamondWritableInternal.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy update contract\\n */\\nabstract contract DiamondWritable is\\n    IDiamondWritable,\\n    DiamondWritableInternal,\\n    OwnableInternal\\n{\\n    /**\\n     * @inheritdoc IDiamondWritable\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external onlyOwner {\\n        _diamondCut(facetCuts, target, data);\\n    }\\n}\\n\",\"keccak256\":\"0xf481debe21720da2aa6a26492a57469b3592da44867935bc432f9ac8ffcdddd2\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/DiamondWritableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondWritableInternal } from './IDiamondWritableInternal.sol';\\n\\nabstract contract DiamondWritableInternal is IDiamondWritableInternal {\\n    using AddressUtils for address;\\n\\n    bytes32 private constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 private constant CLEAR_SELECTOR_MASK =\\n        bytes32(uint256(0xffffffff << 224));\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function _diamondCut(\\n        FacetCut[] memory facetCuts,\\n        address target,\\n        bytes memory data\\n    ) internal {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        unchecked {\\n            uint256 originalSelectorCount = l.selectorCount;\\n            uint256 selectorCount = originalSelectorCount;\\n            bytes32 selectorSlot;\\n\\n            // Check if last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                // get last selectorSlot\\n                selectorSlot = l.selectorSlots[selectorCount >> 3];\\n            }\\n\\n            for (uint256 i; i < facetCuts.length; i++) {\\n                FacetCut memory facetCut = facetCuts[i];\\n                FacetCutAction action = facetCut.action;\\n\\n                if (facetCut.selectors.length == 0)\\n                    revert DiamondWritable__SelectorNotSpecified();\\n\\n                if (action == FacetCutAction.ADD) {\\n                    (selectorCount, selectorSlot) = _addFacetSelectors(\\n                        l,\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                } else if (action == FacetCutAction.REPLACE) {\\n                    _replaceFacetSelectors(l, facetCut);\\n                } else if (action == FacetCutAction.REMOVE) {\\n                    (selectorCount, selectorSlot) = _removeFacetSelectors(\\n                        l,\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                }\\n            }\\n\\n            if (selectorCount != originalSelectorCount) {\\n                l.selectorCount = uint16(selectorCount);\\n            }\\n\\n            // If last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n            }\\n\\n            emit DiamondCut(facetCuts, target, data);\\n            _initialize(target, data);\\n        }\\n    }\\n\\n    function _addFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (\\n                facetCut.target != address(this) &&\\n                !facetCut.target.isContract()\\n            ) revert DiamondWritable__TargetHasNoCode();\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) != address(0))\\n                    revert DiamondWritable__SelectorAlreadyAdded();\\n\\n                // add facet for selector\\n                l.facets[selector] =\\n                    bytes20(facetCut.target) |\\n                    bytes32(selectorCount);\\n                uint256 selectorInSlotPosition = (selectorCount & 7) << 5;\\n\\n                // clear selector position in slot and add selector\\n                selectorSlot =\\n                    (selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n                    selectorSlot = 0;\\n                }\\n\\n                selectorCount++;\\n            }\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function _removeFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (facetCut.target != address(0))\\n                revert DiamondWritable__RemoveTargetNotZeroAddress();\\n\\n            uint256 selectorSlotCount = selectorCount >> 3;\\n            uint256 selectorInSlotIndex = selectorCount & 7;\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) == address(0))\\n                    revert DiamondWritable__SelectorNotFound();\\n\\n                if (address(bytes20(oldFacet)) == address(this))\\n                    revert DiamondWritable__SelectorIsImmutable();\\n\\n                if (selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    selectorSlot = l.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                // adding a block here prevents stack too deep error\\n                {\\n                    // replace selector with last selector in l.facets\\n                    lastSelector = bytes4(\\n                        selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        l.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(l.facets[lastSelector]);\\n                    }\\n\\n                    delete l.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = l.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    // update storage with the modified slot\\n                    l.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    selectorSlot =\\n                        (selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete l.selectorSlots[selectorSlotCount];\\n                    selectorSlot = 0;\\n                }\\n            }\\n\\n            selectorCount = (selectorSlotCount << 3) | selectorInSlotIndex;\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function _replaceFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        FacetCut memory facetCut\\n    ) internal {\\n        unchecked {\\n            if (!facetCut.target.isContract())\\n                revert DiamondWritable__TargetHasNoCode();\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                if (oldFacetAddress == address(0))\\n                    revert DiamondWritable__SelectorNotFound();\\n                if (oldFacetAddress == address(this))\\n                    revert DiamondWritable__SelectorIsImmutable();\\n                if (oldFacetAddress == facetCut.target)\\n                    revert DiamondWritable__ReplaceTargetIsIdentical();\\n\\n                // replace old facet address\\n                l.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(facetCut.target);\\n            }\\n        }\\n    }\\n\\n    function _initialize(address target, bytes memory data) private {\\n        if ((target == address(0)) != (data.length == 0))\\n            revert DiamondWritable__InvalidInitializationParameters();\\n\\n        if (target != address(0)) {\\n            if (target != address(this)) {\\n                if (!target.isContract())\\n                    revert DiamondWritable__TargetHasNoCode();\\n            }\\n\\n            (bool success, ) = target.delegatecall(data);\\n\\n            if (!success) {\\n                assembly {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9bc52044616cc2058d15aa07455f9ab4a2d6b0cb4bd542d6b5b8df092b501387\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/IDiamondWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IDiamondWritableInternal } from './IDiamondWritableInternal.sol';\\n\\n/**\\n * @title Diamond proxy upgrade interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondWritable is IDiamondWritableInternal {\\n    /**\\n     * @notice update diamond facets and optionally execute arbitrary initialization function\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional target of initialization delegatecall\\n     * @param data optional initialization function call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3d7dd0fa5d4cef8889d507880fe68d0b1558f6c21c5855170c44ef7e2b05bcef\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/IDiamondWritableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IDiamondWritableInternal {\\n    enum FacetCutAction {\\n        ADD,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    event DiamondCut(FacetCut[] facetCuts, address target, bytes data);\\n\\n    error DiamondWritable__InvalidInitializationParameters();\\n    error DiamondWritable__RemoveTargetNotZeroAddress();\\n    error DiamondWritable__ReplaceTargetIsIdentical();\\n    error DiamondWritable__SelectorAlreadyAdded();\\n    error DiamondWritable__SelectorIsImmutable();\\n    error DiamondWritable__SelectorNotFound();\\n    error DiamondWritable__SelectorNotSpecified();\\n    error DiamondWritable__TargetHasNoCode();\\n\\n    struct FacetCut {\\n        address target;\\n        FacetCutAction action;\\n        bytes4[] selectors;\\n    }\\n}\\n\",\"keccak256\":\"0x82e0eeb28c8b8bd1ee9c5dd3247fa3d4062d5c6d43061833714c88741ecb5605\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/proxies/IDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IDiamond {\\n    struct FacetInit {\\n        address target;\\n        address initTarget;\\n        bytes initData;\\n        bytes4[] selectors;\\n    }\\n}\\n\",\"keccak256\":\"0xa61ca7fad656963f32b952bff8614501462de3ae8632f78a1457039a5d75ad30\",\"license\":\"MIT\"},\"contracts/proxies/IDiamondFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { IDiamond } from './IDiamond.sol';\\n\\ninterface IDiamondFactory is IDiamond {\\n    event DiamondCreated(address indexed diamondAddress);\\n\\n    function createDiamond(\\n        FacetInit[] memory facetInits\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xae7ef487b8a02209e1eedf0321c767c3651e1e5e98c358383a4c657db4e89fb3\",\"license\":\"MIT\"},\"contracts/proxies/OwnableDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { ISolidStateDiamond } from '@solidstate/contracts/proxy/diamond/ISolidStateDiamond.sol';\\nimport { IERC165 } from '@solidstate/contracts/interfaces/IERC165.sol';\\nimport { IERC173 } from '@solidstate/contracts/interfaces/IERC173.sol';\\nimport { ERC165Base, ERC165BaseStorage } from '@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol';\\nimport { DiamondBase } from '@solidstate/contracts/proxy/diamond/base/DiamondBase.sol';\\nimport { DiamondReadable, IDiamondReadable } from '@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol';\\nimport { DiamondWritable, IDiamondWritable } from '@solidstate/contracts/proxy/diamond/writable/DiamondWritable.sol';\\nimport { DiamondFallback, IDiamondFallback } from '@solidstate/contracts/proxy/diamond/fallback/DiamondFallback.sol';\\nimport { SafeOwnable } from '@solidstate/contracts/access/ownable/SafeOwnable.sol';\\nimport { Ownable, OwnableInternal } from '@solidstate/contracts/access/ownable/Ownable.sol';\\nimport { IDiamond } from './IDiamond.sol';\\n\\ncontract OwnableDiamond is\\n    ISolidStateDiamond,\\n    DiamondBase,\\n    DiamondFallback,\\n    DiamondReadable,\\n    DiamondWritable,\\n    SafeOwnable,\\n    IDiamond,\\n    ERC165Base\\n{\\n    constructor(address owner, FacetInit[] memory facetInits) {\\n        bytes4[] memory selectors = new bytes4[](12);\\n        uint256 selectorIndex;\\n\\n        // register DiamondFallback\\n\\n        selectors[selectorIndex++] = IDiamondFallback\\n            .getFallbackAddress\\n            .selector;\\n        selectors[selectorIndex++] = IDiamondFallback\\n            .setFallbackAddress\\n            .selector;\\n\\n        _setSupportsInterface(type(IDiamondFallback).interfaceId, true);\\n\\n        // register DiamondWritable\\n\\n        selectors[selectorIndex++] = IDiamondWritable.diamondCut.selector;\\n\\n        _setSupportsInterface(type(IDiamondWritable).interfaceId, true);\\n\\n        // register DiamondReadable\\n\\n        selectors[selectorIndex++] = IDiamondReadable.facets.selector;\\n        selectors[selectorIndex++] = IDiamondReadable\\n            .facetFunctionSelectors\\n            .selector;\\n        selectors[selectorIndex++] = IDiamondReadable.facetAddresses.selector;\\n        selectors[selectorIndex++] = IDiamondReadable.facetAddress.selector;\\n\\n        _setSupportsInterface(type(IDiamondReadable).interfaceId, true);\\n\\n        // register ERC165\\n\\n        selectors[selectorIndex++] = IERC165.supportsInterface.selector;\\n\\n        _setSupportsInterface(type(IERC165).interfaceId, true);\\n\\n        // register SafeOwnable\\n\\n        selectors[selectorIndex++] = Ownable.owner.selector;\\n        selectors[selectorIndex++] = SafeOwnable.nomineeOwner.selector;\\n        selectors[selectorIndex++] = Ownable.transferOwnership.selector;\\n        selectors[selectorIndex++] = SafeOwnable.acceptOwnership.selector;\\n\\n        _setSupportsInterface(type(IERC173).interfaceId, true);\\n\\n        // diamond cut\\n\\n        FacetCut[] memory builtInFacetCuts = new FacetCut[](1);\\n\\n        builtInFacetCuts[0] = FacetCut({\\n            target: address(this),\\n            action: FacetCutAction.ADD,\\n            selectors: selectors\\n        });\\n\\n        _diamondCut(builtInFacetCuts, address(0), '');\\n\\n        for (uint256 facetIndex; facetIndex < facetInits.length; facetIndex++) {\\n            FacetInit memory facetInit = facetInits[facetIndex];\\n            FacetCut[] memory facetCuts = new FacetCut[](1);\\n            facetCuts[0] = FacetCut({\\n                target: facetInit.target,\\n                action: FacetCutAction.ADD,\\n                selectors: facetInit.selectors\\n            });\\n\\n            _diamondCut(facetCuts, facetInit.initTarget, facetInit.initData);\\n        }\\n\\n        // set owner\\n        _setOwner(owner);\\n    }\\n\\n    receive() external payable {}\\n\\n    function _transferOwnership(\\n        address account\\n    ) internal virtual override(OwnableInternal, SafeOwnable) {\\n        super._transferOwnership(account);\\n    }\\n\\n    /**\\n     * @inheritdoc DiamondFallback\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        override(DiamondBase, DiamondFallback)\\n        returns (address implementation)\\n    {\\n        implementation = super._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x2ad21ea61a25f77991a0c3642a4be9fafb2f63ec9a656a2ef17bfb5f4ad9f0a9\",\"license\":\"MIT\"},\"contracts/proxies/OwnableDiamondFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { IERC165 } from '@solidstate/contracts/interfaces/IERC165.sol';\\nimport { ERC165Base, ERC165BaseStorage } from '@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol';\\nimport { DiamondBase } from '@solidstate/contracts/proxy/diamond/base/DiamondBase.sol';\\nimport { DiamondReadable, IDiamondReadable } from '@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol';\\nimport { DiamondWritableInternal } from '@solidstate/contracts/proxy/diamond/writable/DiamondWritableInternal.sol';\\nimport { OwnableDiamond } from './OwnableDiamond.sol';\\nimport { IDiamondFactory } from './IDiamondFactory.sol';\\n\\ncontract OwnableDiamondFactory is IDiamondFactory {\\n    function createDiamond(\\n        FacetInit[] memory facetInits\\n    ) external returns (address) {\\n        OwnableDiamond ownableDiamond = new OwnableDiamond(\\n            msg.sender,\\n            facetInits\\n        );\\n\\n        emit DiamondCreated(address(ownableDiamond));\\n\\n        return address(ownableDiamond);\\n    }\\n}\\n\",\"keccak256\":\"0xfb94d6fef32acd523a968655e5a6e23521751762c23789fd70cec051583bc730\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061346b806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063e394a02b1462000033575b600080fd5b6200004a6200004436600462000234565b62000066565b6040516001600160a01b03909116815260200160405180910390f35b60008033836040516200007990620000e1565b6200008692919062000418565b604051809103906000f080158015620000a3573d6000803e3d6000fd5b506040519091506001600160a01b038216907f644ca5b0a8b0418e9faf3880659eeb84eaad45ad838b0173808e5ca72f5efc4990600090a292915050565b612f2c806200050a83390190565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156200012b576200012b620000ef565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156200015d576200015d620000ef565b604052919050565b600067ffffffffffffffff821115620001825762000182620000ef565b5060051b60200190565b80356001600160a01b0381168114620001a457600080fd5b919050565b600082601f830112620001bb57600080fd5b81356020620001d4620001ce8362000165565b62000131565b82815260059290921b84018101918181019086841115620001f457600080fd5b8286015b84811015620002295780356001600160e01b0319811681146200021b5760008081fd5b8352918301918301620001f8565b509695505050505050565b600060208083850312156200024857600080fd5b823567ffffffffffffffff808211156200026157600080fd5b818501915085601f8301126200027657600080fd5b813562000287620001ce8262000165565b81815260059190911b83018401908481019088831115620002a757600080fd5b8585015b83811015620003c457803585811115620002c457600080fd5b8601601f196080828d0382011215620002dc57600080fd5b620002e662000105565b620002f38a84016200018c565b81526040620003048185016200018c565b8b8301526060840135898111156200031c5760008081fd5b8401603f81018f136200032f5760008081fd5b8b8101358a811115620003465762000346620000ef565b620003588d86601f8401160162000131565b94508085528f83828401011115620003705760008081fd5b808383018e87013760009150818d828701015250838284015260808501359350898411156200039d578081fd5b5050620003af8d8b84860101620001a9565b606082015285525050918601918601620002ab565b5098975050505050505050565b600081518084526020808501945080840160005b838110156200040d5781516001600160e01b03191687529582019590820190600101620003e5565b509495945050505050565b6001600160a01b038381168252604060208084018290528451848301819052600093606092909183870190600581901b8801850189840188805b84811015620004f757605f198c850301865282516080898251168652898983015116898701528b820151818d880152805180838901528592505b80831015620004ac578183018b015188840160a00152918a01916200048c565b60a092508583828a010152601f19601f82011688019150508b830151925081878203018c880152620004e182820184620003d1565b988a019896505050928701925060010162000452565b50919c9b50505050505050505050505056fe60806040523480156200001157600080fd5b5060405162002f2c38038062002f2c833981016040819052620000349162001051565b60408051600c8082526101a0820190925260009160208201610180803683370190505090506000632c40805960e01b8282620000708162001201565b93508151811062000085576200008562001229565b6001600160e01b031990921660209283029190910190910152639142376560e01b8282620000b38162001201565b935081518110620000c857620000c862001229565b6001600160e01b031990921660209283029190910190910152620000f5632f40adcf60e21b6001620005c3565b6307e4c70760e21b82826200010a8162001201565b9350815181106200011f576200011f62001229565b6001600160e01b0319909216602092830291909101909101526200014c6307e4c70760e21b6001620005c3565b637a0ed62760e01b8282620001618162001201565b93508151811062000176576200017662001229565b6001600160e01b0319909216602092830291909101909101526356fe50af60e11b8282620001a48162001201565b935081518110620001b957620001b962001229565b6001600160e01b0319909216602092830291909101909101526314bbdacb60e21b8282620001e78162001201565b935081518110620001fc57620001fc62001229565b6001600160e01b0319909216602092830291909101909101526366ffd66360e11b82826200022a8162001201565b9350815181106200023f576200023f62001229565b6001600160e01b0319909216602092830291909101909101526200026c6348e2b09360e01b6001620005c3565b6301ffc9a760e01b8282620002818162001201565b93508151811062000296576200029662001229565b6001600160e01b031990921660209283029190910190910152620002c36301ffc9a760e01b6001620005c3565b638da5cb5b60e01b8282620002d88162001201565b935081518110620002ed57620002ed62001229565b6001600160e01b03199092166020928302919091019091015263455a8a8560e11b82826200031b8162001201565b93508151811062000330576200033062001229565b6001600160e01b03199092166020928302919091019091015263f2fde38b60e01b82826200035e8162001201565b93508151811062000373576200037362001229565b6001600160e01b0319909216602092830291909101909101526379ba509760e01b8282620003a18162001201565b935081518110620003b657620003b662001229565b6001600160e01b031990921660209283029190910190910152620003e36307f5828d60e41b6001620005c3565b604080516001808252818301909252600091816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081620003fa5790505060408051606081019091523081529091506020810160008152602001848152508160008151811062000460576200046062001229565b60200260200101819052506200048e816000604051806020016040528060008152506200063560201b60201c565b60005b8451811015620005ac576000858281518110620004b257620004b262001229565b60200260200101519050600060016001600160401b03811115620004da57620004da62000f06565b6040519080825280602002602001820160405280156200052957816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081620004f95790505b50604080516060810190915283516001600160a01b0316815290915060208101600081526020018360600151815250816000815181106200056e576200056e62001229565b60200260200101819052506200059481836020015184604001516200063560201b60201c565b50508080620005a39062001201565b91505062000491565b50620005b88562000811565b5050505050620013a8565b6001600160e01b03198083169003620005ef5760405163b0a19dd560e01b815260040160405180910390fd5b80620006056200088560201b62000b7a1760201c565b6001600160e01b03199390931660009081526020939093526040909220805460ff19169215159290921790915550565b60006200064c620008a960201b62000b9e1760201c565b600181015490915061ffff811690819060009060071615620006805750600381901c60009081526002840160205260409020545b60005b87518110156200077f576000888281518110620006a457620006a462001229565b60200260200101519050600081602001519050816040015151600003620006de5760405163eb6c3aeb60e01b815260040160405180910390fd5b6000816002811115620006f557620006f56200123f565b0362000714576200070987868685620008cd565b909550935062000774565b60018160028111156200072b576200072b6200123f565b0362000743576200073d878362000a2c565b62000774565b60028160028111156200075a576200075a6200123f565b0362000774576200076e8786868562000b92565b90955093505b505060010162000683565b508282146200079c5760018401805461ffff191661ffff84161790555b6007821615620007bf57600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673878787604051620007f49392919062001283565b60405180910390a162000808868662000dbe565b50505050505050565b60006200082862000ebf60201b62000bc21760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b805160009081906001600160a01b031630148015906200090d57506200090b83600001516001600160a01b031662000ee360201b620002ad1760201c565b155b156200092c57604051633ddc5cab60e21b815260040160405180910390fd5b60005b83604001515181101562000a1f5760008460400151828151811062000958576200095862001229565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c15620009a557604051634923a77160e11b815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6001600160601b0319168b1790925560058a901b60e090811692831c91831c1999909916179781900362000a0f57600389901c600090815260028b0160205260408120989098555b505050600195860195016200092f565b5093959294509192505050565b62000a4f81600001516001600160a01b031662000ee360201b620002ad1760201c565b62000a6d57604051633ddc5cab60e21b815260040160405180910390fd5b60005b81604001515181101562000b8d5760008260400151828151811062000a995762000a9962001229565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c8062000ae6576040516337e25a9760e11b815260040160405180910390fd5b306001600160a01b0382160362000b105760405163e983573160e01b815260040160405180910390fd5b84600001516001600160a01b0316816001600160a01b03160362000b47576040516330baabf360e11b815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6001600160601b0319166001600160601b039190911617905560010162000a70565b505050565b805160009081906001600160a01b03161562000bc157604051633ab3490960e21b815260040160405180910390fd5b600385901c6007861660005b85604001515181101562000daa5760008660400151828151811062000bf65762000bf662001229565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c62000c42576040516337e25a9760e11b815260040160405180910390fd5b30606082901c0362000c675760405163e983573160e01b815260040160405180910390fd5b600089900362000c9557600019909401600081815260028c0160205260409020549850936007935062000c9d565b600019909301925b600584901b89901b6000806001600160e01b03198084169086161462000cf0576001600160e01b03198316600090815260208f90526040902080546001600160601b0319166001600160601b0386161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b1687821462000d5557600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c17905562000d79565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b8660000362000d9857600088815260028f01602052604081208190559b505b50506001909301925062000bcd915050565b5060039190911b1796939550929350505050565b8051156001600160a01b038316151462000deb576040516326df4ccd60e01b815260040160405180910390fd5b6001600160a01b0382161562000ebb576001600160a01b038216301462000e495762000e2b826001600160a01b031662000ee360201b620002ad1760201c565b62000e4957604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b03168260405162000e6591906200138a565b600060405180830381855af49150503d806000811462000ea2576040519150601f19603f3d011682016040523d82523d6000602084013e62000ea7565b606091505b505090508062000b8d573d6000803e3d6000fd5b5050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b3b151590565b80516001600160a01b038116811462000f0157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171562000f415762000f4162000f06565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000f725762000f7262000f06565b604052919050565b60006001600160401b0382111562000f965762000f9662000f06565b5060051b60200190565b60005b8381101562000fbd57818101518382015260200162000fa3565b50506000910152565b600082601f83011262000fd857600080fd5b8151602062000ff162000feb8362000f7a565b62000f47565b82815260059290921b840181019181810190868411156200101157600080fd5b8286015b84811015620010465780516001600160e01b031981168114620010385760008081fd5b835291830191830162001015565b509695505050505050565b600080604083850312156200106557600080fd5b620010708362000ee9565b602084810151919350906001600160401b03808211156200109057600080fd5b818601915086601f830112620010a557600080fd5b8151620010b662000feb8262000f7a565b81815260059190911b83018401908481019089831115620010d657600080fd5b8585015b83811015620011f057805185811115620010f357600080fd5b8601601f196080828e03820112156200110b57600080fd5b6200111562000f1c565b620011228a840162000ee9565b8152620011326040840162000ee9565b8a8201526060830151888111156200114957600080fd5b8301603f81018f136200115b57600080fd5b8a8101518981111562001172576200117262000f06565b620011848c85601f8401160162000f47565b93508084528f60408284010111156200119c57600080fd5b620011ae818d86016040850162000fa0565b50508160408201526080830151915087821115620011cb57600080fd5b620011db8e8b8486010162000fc6565b606082015285525050918601918601620010da565b508096505050505050509250929050565b6000600182016200122257634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600081518084526200126f81602086016020860162000fa0565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b848110156200135857898403607f19018652815180516001600160a01b03168552838101518986019060038110620012f457634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015620013425783516001600160e01b031916825292860192600192909201919086019062001316565b50978501979550505090820190600101620012ac565b50506001600160a01b038a169088015286810360408801526200137c818962001255565b9a9950505050505050505050565b600082516200139e81846020870162000fa0565b9190910192915050565b611b7480620013b86000396000f3fe6080604052600436106100ab5760003560e01c80638ab5150a116100645780638ab5150a146101e75780638da5cb5b146101fc5780639142376514610211578063adfca15e14610231578063cdffacc61461025e578063f2fde38b1461027e576100b2565b806301ffc9a71461010c5780631f931c1c146101415780632c4080591461016157806352ef6b2c1461018e57806379ba5097146101b05780637a0ed627146101c5576100b2565b366100b257005b60006100bc61029e565b90506001600160a01b0381163b6100e6576040516321f27f0d60e21b815260040160405180910390fd5b3660008037600080366000845af43d6000803e808015610105573d6000f35b3d6000fd5b005b34801561011857600080fd5b5061012c610127366004611527565b6102b3565b60405190151581526020015b60405180910390f35b34801561014d57600080fd5b5061010a61015c3660046115a9565b6102c4565b34801561016d57600080fd5b5061017661034e565b6040516001600160a01b039091168152602001610138565b34801561019a57600080fd5b506101a3610358565b604051610138919061165b565b3480156101bc57600080fd5b5061010a6104fb565b3480156101d157600080fd5b506101da61053e565b60405161013891906116ed565b3480156101f357600080fd5b50610176610966565b34801561020857600080fd5b50610176610970565b34801561021d57600080fd5b5061010a61022c36600461176a565b61097a565b34801561023d57600080fd5b5061025161024c36600461176a565b6109bf565b6040516101389190611785565b34801561026a57600080fd5b50610176610279366004611527565b610b0b565b34801561028a57600080fd5b5061010a61029936600461176a565b610b38565b60006102a8610be6565b905090565b3b151590565b60006102be82610c32565b92915050565b6102cc610c5f565b6001600160a01b0316336001600160a01b0316146102fd57604051632f7a8ee160e01b815260040160405180910390fd5b61034761030a858761185b565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c7892505050565b5050505050565b60006102a8610e26565b60606000610364610b9e565b600181015490915061ffff1667ffffffffffffffff811115610388576103886117c7565b6040519080825280602002602001820160405280156103b1578160200160208202803683370190505b50915060008060005b600184015461ffff168210156104f3576000818152600285016020526040812054905b60088110156104de57836103f0816119a5565b600188015490955061ffff16851190506104de57600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b88811015610481578a8181518110610446576104466119be565b60200260200101516001600160a01b0316836001600160a01b03160361046f5760019150610481565b80610479816119a5565b91505061042c565b508015610490575050506104cc565b818a89815181106104a3576104a36119be565b6001600160a01b0390921660209283029190910190910152876104c5816119a5565b9850505050505b806104d6816119a5565b9150506103dd565b505080806104eb906119a5565b9150506103ba565b505082525090565b610503610e42565b6001600160a01b0316336001600160a01b0316146105345760405163efd1052d60e01b815260040160405180910390fd5b61053c610e6a565b565b6060600061054a610b9e565b600181015490915061ffff1667ffffffffffffffff81111561056e5761056e6117c7565b6040519080825280602002602001820160405280156105b457816020015b60408051808201909152600081526060602082015281526020019060019003908161058c5790505b50600182015490925060009061ffff1667ffffffffffffffff8111156105dc576105dc6117c7565b604051908082528060200260200182016040528015610605578160200160208202803683370190505b50905060008060005b600185015461ffff168210156108f4576000818152600286016020526040812054905b60088110156108df5783610644816119a5565b600189015490955061ffff16851190506108df57600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b8881101561079d57826001600160a01b03168c82815181106106a4576106a46119be565b6020026020010151600001516001600160a01b03160361078b57838c82815181106106d1576106d16119be565b6020026020010151602001518b83815181106106ef576106ef6119be565b602002602001015160ff168151811061070a5761070a6119be565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8a8281518110610740576107406119be565b602002602001015160ff161061075557600080fd5b898181518110610767576107676119be565b60200260200101805180919061077c906119d4565b60ff169052506001915061079d565b80610795816119a5565b915050610680565b5080156107ac575050506108cd565b818b89815181106107bf576107bf6119be565b60209081029190910101516001600160a01b03909116905260018a015461ffff1667ffffffffffffffff8111156107f8576107f86117c7565b604051908082528060200260200182016040528015610821578160200160208202803683370190505b508b8981518110610834576108346119be565b602002602001015160200181905250828b8981518110610856576108566119be565b602002602001015160200151600081518110610874576108746119be565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018989815181106108aa576108aa6119be565b60ff90921660209283029190910190910152876108c6816119a5565b9850505050505b806108d7816119a5565b915050610631565b505080806108ec906119a5565b91505061060e565b5060005b8281101561095b576000848281518110610914576109146119be565b602002602001015160ff1690506000878381518110610935576109356119be565b602002602001015160200151905081815250508080610953906119a5565b9150506108f8565b508185525050505090565b60006102a8610e42565b60006102a8610c5f565b610982610c5f565b6001600160a01b0316336001600160a01b0316146109b357604051632f7a8ee160e01b815260040160405180910390fd5b6109bc81610ea4565b50565b606060006109cb610b9e565b600181015490915061ffff1667ffffffffffffffff8111156109ef576109ef6117c7565b604051908082528060200260200182016040528015610a18578160200160208202803683370190505b50915060008060005b600184015461ffff16821015610b01576000818152600285016020526040812054905b6008811015610aec5783610a57816119a5565b600188015490955061ffff1685119050610aec57600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a1603610ad95780888781518110610ab257610ab26119be565b6001600160e01b03199092166020928302919091019091015285610ad5816119a5565b9650505b5080610ae4816119a5565b915050610a44565b50508080610af9906119a5565b915050610a21565b5050825250919050565b6000610b15610b9e565b6001600160e01b0319909216600090815260209290925250604090205460601c90565b610b40610c5f565b6001600160a01b0316336001600160a01b031614610b7157604051632f7a8ee160e01b815260040160405180910390fd5b6109bc81610ed1565b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b600080356001600160e01b03191681527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c80610c2f576102a8610e26565b90565b6000610c3c610b7a565b6001600160e01b0319909216600090815260209290925250604090205460ff1690565b6000610c69610bc2565b546001600160a01b0316919050565b6000610c82610b9e565b600181015490915061ffff811690819060009060071615610cb55750600381901c60009081526002840160205260409020545b60005b8751811015610d9a576000888281518110610cd557610cd56119be565b60200260200101519050600081602001519050816040015151600003610d0e5760405163eb6c3aeb60e01b815260040160405180910390fd5b6000816002811115610d2257610d226119f3565b03610d3d57610d3387868685610f12565b9095509350610d90565b6001816002811115610d5157610d516119f3565b03610d6557610d608783611051565b610d90565b6002816002811115610d7957610d796119f3565b03610d9057610d8a8786868561119c565b90955093505b5050600101610cb8565b50828214610db65760018401805461ffff191661ffff84161790555b6007821615610dd857600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673878787604051610e0b93929190611a59565b60405180910390a1610e1d86866113bf565b50505050505050565b6000610e30610b9e565b600301546001600160a01b0316919050565b60007f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890610c69565b610e73336114a3565b7f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce661789080546001600160a01b0319169055565b80610ead610b9e565b60030180546001600160a01b0319166001600160a01b039290921691909117905550565b7f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce661789080546001600160a01b0319166001600160a01b0383161790556109bc8181565b805160009081906001600160a01b03163014801590610f3a575082516001600160a01b03163b155b15610f5857604051633ddc5cab60e21b815260040160405180910390fd5b60005b83604001515181101561104457600084604001518281518110610f8057610f806119be565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c15610fcc57604051634923a77160e11b815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6001600160601b0319168b1790925560058a901b60e090811692831c91831c1999909916179781900361103557600389901c600090815260028b0160205260408120989098555b50505060019586019501610f5b565b5093959294509192505050565b80516001600160a01b03163b61107a57604051633ddc5cab60e21b815260040160405180910390fd5b60005b816040015151811015611197576000826040015182815181106110a2576110a26119be565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c806110ee576040516337e25a9760e11b815260040160405180910390fd5b306001600160a01b038216036111175760405163e983573160e01b815260040160405180910390fd5b84600001516001600160a01b0316816001600160a01b03160361114d576040516330baabf360e11b815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6001600160601b0319166bffffffffffffffffffffffff9190911617905560010161107d565b505050565b805160009081906001600160a01b0316156111ca57604051633ab3490960e21b815260040160405180910390fd5b600385901c6007861660005b8560400151518110156113ab576000866040015182815181106111fb576111fb6119be565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c611246576040516337e25a9760e11b815260040160405180910390fd5b30606082901c0361126a5760405163e983573160e01b815260040160405180910390fd5b600089900361129657600019909401600081815260028c0160205260409020549850936007935061129e565b600019909301925b600584901b89901b6000806001600160e01b0319808416908616146112f5576001600160e01b03198316600090815260208f90526040902080546001600160601b0319166bffffffffffffffffffffffff86161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b1687821461135857600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c17905561137c565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b8660000361139a57600088815260028f01602052604081208190559b505b5050600190930192506111d6915050565b5060039190911b1796939550929350505050565b8051156001600160a01b03831615146113eb576040516326df4ccd60e01b815260040160405180910390fd5b6001600160a01b0382161561149f576001600160a01b0382163014611432576001600160a01b0382163b61143257604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b03168260405161144c9190611b22565b600060405180830381855af49150503d8060008114611487576040519150601f19603f3d011682016040523d82523d6000602084013e61148c565b606091505b5050905080611197573d6000803e3d6000fd5b5050565b60006114ad610bc2565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160e01b03198116811461152257600080fd5b919050565b60006020828403121561153957600080fd5b6115428261150a565b9392505050565b80356001600160a01b038116811461152257600080fd5b60008083601f84011261157257600080fd5b50813567ffffffffffffffff81111561158a57600080fd5b6020830191508360208285010111156115a257600080fd5b9250929050565b6000806000806000606086880312156115c157600080fd5b853567ffffffffffffffff808211156115d957600080fd5b818801915088601f8301126115ed57600080fd5b8135818111156115fc57600080fd5b8960208260051b850101111561161157600080fd5b6020830197508096505061162760208901611549565b9450604088013591508082111561163d57600080fd5b5061164a88828901611560565b969995985093965092949392505050565b6020808252825182820181905260009190848201906040850190845b8181101561169c5783516001600160a01b031683529284019291840191600101611677565b50909695505050505050565b600081518084526020808501945080840160005b838110156116e25781516001600160e01b031916875295820195908201906001016116bc565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561175c57888303603f19018552815180516001600160a01b03168452870151878401879052611749878501826116a8565b9588019593505090860190600101611714565b509098975050505050505050565b60006020828403121561177c57600080fd5b61154282611549565b6020808252825182820181905260009190848201906040850190845b8181101561169c5783516001600160e01b031916835292840192918401916001016117a1565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611800576118006117c7565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561182f5761182f6117c7565b604052919050565b600067ffffffffffffffff821115611851576118516117c7565b5060051b60200190565b600061186e61186984611837565b611806565b83815260208082019190600586811b86013681111561188c57600080fd5b865b8181101561198257803567ffffffffffffffff808211156118af5760008081fd5b818a019150606082360312156118c55760008081fd5b6118cd6117dd565b6118d683611549565b815286830135600381106118ea5760008081fd5b81880152604083810135838111156119025760008081fd5b939093019236601f85011261191957600092508283fd5b8335925061192961186984611837565b83815292871b840188019288810190368511156119465760008081fd5b948901945b8486101561196b5761195c8661150a565b8252948901949089019061194b565b91830191909152508852505094830194830161188e565b5092979650505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016119b7576119b761198f565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff81036119ea576119ea61198f565b60010192915050565b634e487b7160e01b600052602160045260246000fd5b60005b83811015611a24578181015183820152602001611a0c565b50506000910152565b60008151808452611a45816020860160208601611a09565b601f01601f19169290920160200192915050565b6000606080830181845280875180835260808601915060808160051b87010192506020808a016000805b84811015611af257898703607f19018652825180516001600160a01b031688528481015160038110611ac357634e487b7160e01b84526021600452602484fd5b88860152604090810151908801899052611adf898901826116a8565b9750509483019491830191600101611a83565b5050506001600160a01b0389169087015250508381036040850152611b178186611a2d565b979650505050505050565b60008251611b34818460208701611a09565b919091019291505056fea2646970667358221220bdde379fef1a9e55b90a2b473edd6093b4d65fb468f1df6432ced84c8ef5214564736f6c63430008110033a2646970667358221220f9116c807ccbbdddf52693821fa7d4fd3f033b91253a9583fb36b1f96cc58cfc64736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063e394a02b1462000033575b600080fd5b6200004a6200004436600462000234565b62000066565b6040516001600160a01b03909116815260200160405180910390f35b60008033836040516200007990620000e1565b6200008692919062000418565b604051809103906000f080158015620000a3573d6000803e3d6000fd5b506040519091506001600160a01b038216907f644ca5b0a8b0418e9faf3880659eeb84eaad45ad838b0173808e5ca72f5efc4990600090a292915050565b612f2c806200050a83390190565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156200012b576200012b620000ef565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156200015d576200015d620000ef565b604052919050565b600067ffffffffffffffff821115620001825762000182620000ef565b5060051b60200190565b80356001600160a01b0381168114620001a457600080fd5b919050565b600082601f830112620001bb57600080fd5b81356020620001d4620001ce8362000165565b62000131565b82815260059290921b84018101918181019086841115620001f457600080fd5b8286015b84811015620002295780356001600160e01b0319811681146200021b5760008081fd5b8352918301918301620001f8565b509695505050505050565b600060208083850312156200024857600080fd5b823567ffffffffffffffff808211156200026157600080fd5b818501915085601f8301126200027657600080fd5b813562000287620001ce8262000165565b81815260059190911b83018401908481019088831115620002a757600080fd5b8585015b83811015620003c457803585811115620002c457600080fd5b8601601f196080828d0382011215620002dc57600080fd5b620002e662000105565b620002f38a84016200018c565b81526040620003048185016200018c565b8b8301526060840135898111156200031c5760008081fd5b8401603f81018f136200032f5760008081fd5b8b8101358a811115620003465762000346620000ef565b620003588d86601f8401160162000131565b94508085528f83828401011115620003705760008081fd5b808383018e87013760009150818d828701015250838284015260808501359350898411156200039d578081fd5b5050620003af8d8b84860101620001a9565b606082015285525050918601918601620002ab565b5098975050505050505050565b600081518084526020808501945080840160005b838110156200040d5781516001600160e01b03191687529582019590820190600101620003e5565b509495945050505050565b6001600160a01b038381168252604060208084018290528451848301819052600093606092909183870190600581901b8801850189840188805b84811015620004f757605f198c850301865282516080898251168652898983015116898701528b820151818d880152805180838901528592505b80831015620004ac578183018b015188840160a00152918a01916200048c565b60a092508583828a010152601f19601f82011688019150508b830151925081878203018c880152620004e182820184620003d1565b988a019896505050928701925060010162000452565b50919c9b50505050505050505050505056fe60806040523480156200001157600080fd5b5060405162002f2c38038062002f2c833981016040819052620000349162001051565b60408051600c8082526101a0820190925260009160208201610180803683370190505090506000632c40805960e01b8282620000708162001201565b93508151811062000085576200008562001229565b6001600160e01b031990921660209283029190910190910152639142376560e01b8282620000b38162001201565b935081518110620000c857620000c862001229565b6001600160e01b031990921660209283029190910190910152620000f5632f40adcf60e21b6001620005c3565b6307e4c70760e21b82826200010a8162001201565b9350815181106200011f576200011f62001229565b6001600160e01b0319909216602092830291909101909101526200014c6307e4c70760e21b6001620005c3565b637a0ed62760e01b8282620001618162001201565b93508151811062000176576200017662001229565b6001600160e01b0319909216602092830291909101909101526356fe50af60e11b8282620001a48162001201565b935081518110620001b957620001b962001229565b6001600160e01b0319909216602092830291909101909101526314bbdacb60e21b8282620001e78162001201565b935081518110620001fc57620001fc62001229565b6001600160e01b0319909216602092830291909101909101526366ffd66360e11b82826200022a8162001201565b9350815181106200023f576200023f62001229565b6001600160e01b0319909216602092830291909101909101526200026c6348e2b09360e01b6001620005c3565b6301ffc9a760e01b8282620002818162001201565b93508151811062000296576200029662001229565b6001600160e01b031990921660209283029190910190910152620002c36301ffc9a760e01b6001620005c3565b638da5cb5b60e01b8282620002d88162001201565b935081518110620002ed57620002ed62001229565b6001600160e01b03199092166020928302919091019091015263455a8a8560e11b82826200031b8162001201565b93508151811062000330576200033062001229565b6001600160e01b03199092166020928302919091019091015263f2fde38b60e01b82826200035e8162001201565b93508151811062000373576200037362001229565b6001600160e01b0319909216602092830291909101909101526379ba509760e01b8282620003a18162001201565b935081518110620003b657620003b662001229565b6001600160e01b031990921660209283029190910190910152620003e36307f5828d60e41b6001620005c3565b604080516001808252818301909252600091816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081620003fa5790505060408051606081019091523081529091506020810160008152602001848152508160008151811062000460576200046062001229565b60200260200101819052506200048e816000604051806020016040528060008152506200063560201b60201c565b60005b8451811015620005ac576000858281518110620004b257620004b262001229565b60200260200101519050600060016001600160401b03811115620004da57620004da62000f06565b6040519080825280602002602001820160405280156200052957816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081620004f95790505b50604080516060810190915283516001600160a01b0316815290915060208101600081526020018360600151815250816000815181106200056e576200056e62001229565b60200260200101819052506200059481836020015184604001516200063560201b60201c565b50508080620005a39062001201565b91505062000491565b50620005b88562000811565b5050505050620013a8565b6001600160e01b03198083169003620005ef5760405163b0a19dd560e01b815260040160405180910390fd5b80620006056200088560201b62000b7a1760201c565b6001600160e01b03199390931660009081526020939093526040909220805460ff19169215159290921790915550565b60006200064c620008a960201b62000b9e1760201c565b600181015490915061ffff811690819060009060071615620006805750600381901c60009081526002840160205260409020545b60005b87518110156200077f576000888281518110620006a457620006a462001229565b60200260200101519050600081602001519050816040015151600003620006de5760405163eb6c3aeb60e01b815260040160405180910390fd5b6000816002811115620006f557620006f56200123f565b0362000714576200070987868685620008cd565b909550935062000774565b60018160028111156200072b576200072b6200123f565b0362000743576200073d878362000a2c565b62000774565b60028160028111156200075a576200075a6200123f565b0362000774576200076e8786868562000b92565b90955093505b505060010162000683565b508282146200079c5760018401805461ffff191661ffff84161790555b6007821615620007bf57600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673878787604051620007f49392919062001283565b60405180910390a162000808868662000dbe565b50505050505050565b60006200082862000ebf60201b62000bc21760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b805160009081906001600160a01b031630148015906200090d57506200090b83600001516001600160a01b031662000ee360201b620002ad1760201c565b155b156200092c57604051633ddc5cab60e21b815260040160405180910390fd5b60005b83604001515181101562000a1f5760008460400151828151811062000958576200095862001229565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c15620009a557604051634923a77160e11b815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6001600160601b0319168b1790925560058a901b60e090811692831c91831c1999909916179781900362000a0f57600389901c600090815260028b0160205260408120989098555b505050600195860195016200092f565b5093959294509192505050565b62000a4f81600001516001600160a01b031662000ee360201b620002ad1760201c565b62000a6d57604051633ddc5cab60e21b815260040160405180910390fd5b60005b81604001515181101562000b8d5760008260400151828151811062000a995762000a9962001229565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c8062000ae6576040516337e25a9760e11b815260040160405180910390fd5b306001600160a01b0382160362000b105760405163e983573160e01b815260040160405180910390fd5b84600001516001600160a01b0316816001600160a01b03160362000b47576040516330baabf360e11b815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6001600160601b0319166001600160601b039190911617905560010162000a70565b505050565b805160009081906001600160a01b03161562000bc157604051633ab3490960e21b815260040160405180910390fd5b600385901c6007861660005b85604001515181101562000daa5760008660400151828151811062000bf65762000bf662001229565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c62000c42576040516337e25a9760e11b815260040160405180910390fd5b30606082901c0362000c675760405163e983573160e01b815260040160405180910390fd5b600089900362000c9557600019909401600081815260028c0160205260409020549850936007935062000c9d565b600019909301925b600584901b89901b6000806001600160e01b03198084169086161462000cf0576001600160e01b03198316600090815260208f90526040902080546001600160601b0319166001600160601b0386161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b1687821462000d5557600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c17905562000d79565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b8660000362000d9857600088815260028f01602052604081208190559b505b50506001909301925062000bcd915050565b5060039190911b1796939550929350505050565b8051156001600160a01b038316151462000deb576040516326df4ccd60e01b815260040160405180910390fd5b6001600160a01b0382161562000ebb576001600160a01b038216301462000e495762000e2b826001600160a01b031662000ee360201b620002ad1760201c565b62000e4957604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b03168260405162000e6591906200138a565b600060405180830381855af49150503d806000811462000ea2576040519150601f19603f3d011682016040523d82523d6000602084013e62000ea7565b606091505b505090508062000b8d573d6000803e3d6000fd5b5050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b3b151590565b80516001600160a01b038116811462000f0157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171562000f415762000f4162000f06565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000f725762000f7262000f06565b604052919050565b60006001600160401b0382111562000f965762000f9662000f06565b5060051b60200190565b60005b8381101562000fbd57818101518382015260200162000fa3565b50506000910152565b600082601f83011262000fd857600080fd5b8151602062000ff162000feb8362000f7a565b62000f47565b82815260059290921b840181019181810190868411156200101157600080fd5b8286015b84811015620010465780516001600160e01b031981168114620010385760008081fd5b835291830191830162001015565b509695505050505050565b600080604083850312156200106557600080fd5b620010708362000ee9565b602084810151919350906001600160401b03808211156200109057600080fd5b818601915086601f830112620010a557600080fd5b8151620010b662000feb8262000f7a565b81815260059190911b83018401908481019089831115620010d657600080fd5b8585015b83811015620011f057805185811115620010f357600080fd5b8601601f196080828e03820112156200110b57600080fd5b6200111562000f1c565b620011228a840162000ee9565b8152620011326040840162000ee9565b8a8201526060830151888111156200114957600080fd5b8301603f81018f136200115b57600080fd5b8a8101518981111562001172576200117262000f06565b620011848c85601f8401160162000f47565b93508084528f60408284010111156200119c57600080fd5b620011ae818d86016040850162000fa0565b50508160408201526080830151915087821115620011cb57600080fd5b620011db8e8b8486010162000fc6565b606082015285525050918601918601620010da565b508096505050505050509250929050565b6000600182016200122257634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600081518084526200126f81602086016020860162000fa0565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b848110156200135857898403607f19018652815180516001600160a01b03168552838101518986019060038110620012f457634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015620013425783516001600160e01b031916825292860192600192909201919086019062001316565b50978501979550505090820190600101620012ac565b50506001600160a01b038a169088015286810360408801526200137c818962001255565b9a9950505050505050505050565b600082516200139e81846020870162000fa0565b9190910192915050565b611b7480620013b86000396000f3fe6080604052600436106100ab5760003560e01c80638ab5150a116100645780638ab5150a146101e75780638da5cb5b146101fc5780639142376514610211578063adfca15e14610231578063cdffacc61461025e578063f2fde38b1461027e576100b2565b806301ffc9a71461010c5780631f931c1c146101415780632c4080591461016157806352ef6b2c1461018e57806379ba5097146101b05780637a0ed627146101c5576100b2565b366100b257005b60006100bc61029e565b90506001600160a01b0381163b6100e6576040516321f27f0d60e21b815260040160405180910390fd5b3660008037600080366000845af43d6000803e808015610105573d6000f35b3d6000fd5b005b34801561011857600080fd5b5061012c610127366004611527565b6102b3565b60405190151581526020015b60405180910390f35b34801561014d57600080fd5b5061010a61015c3660046115a9565b6102c4565b34801561016d57600080fd5b5061017661034e565b6040516001600160a01b039091168152602001610138565b34801561019a57600080fd5b506101a3610358565b604051610138919061165b565b3480156101bc57600080fd5b5061010a6104fb565b3480156101d157600080fd5b506101da61053e565b60405161013891906116ed565b3480156101f357600080fd5b50610176610966565b34801561020857600080fd5b50610176610970565b34801561021d57600080fd5b5061010a61022c36600461176a565b61097a565b34801561023d57600080fd5b5061025161024c36600461176a565b6109bf565b6040516101389190611785565b34801561026a57600080fd5b50610176610279366004611527565b610b0b565b34801561028a57600080fd5b5061010a61029936600461176a565b610b38565b60006102a8610be6565b905090565b3b151590565b60006102be82610c32565b92915050565b6102cc610c5f565b6001600160a01b0316336001600160a01b0316146102fd57604051632f7a8ee160e01b815260040160405180910390fd5b61034761030a858761185b565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c7892505050565b5050505050565b60006102a8610e26565b60606000610364610b9e565b600181015490915061ffff1667ffffffffffffffff811115610388576103886117c7565b6040519080825280602002602001820160405280156103b1578160200160208202803683370190505b50915060008060005b600184015461ffff168210156104f3576000818152600285016020526040812054905b60088110156104de57836103f0816119a5565b600188015490955061ffff16851190506104de57600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b88811015610481578a8181518110610446576104466119be565b60200260200101516001600160a01b0316836001600160a01b03160361046f5760019150610481565b80610479816119a5565b91505061042c565b508015610490575050506104cc565b818a89815181106104a3576104a36119be565b6001600160a01b0390921660209283029190910190910152876104c5816119a5565b9850505050505b806104d6816119a5565b9150506103dd565b505080806104eb906119a5565b9150506103ba565b505082525090565b610503610e42565b6001600160a01b0316336001600160a01b0316146105345760405163efd1052d60e01b815260040160405180910390fd5b61053c610e6a565b565b6060600061054a610b9e565b600181015490915061ffff1667ffffffffffffffff81111561056e5761056e6117c7565b6040519080825280602002602001820160405280156105b457816020015b60408051808201909152600081526060602082015281526020019060019003908161058c5790505b50600182015490925060009061ffff1667ffffffffffffffff8111156105dc576105dc6117c7565b604051908082528060200260200182016040528015610605578160200160208202803683370190505b50905060008060005b600185015461ffff168210156108f4576000818152600286016020526040812054905b60088110156108df5783610644816119a5565b600189015490955061ffff16851190506108df57600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b8881101561079d57826001600160a01b03168c82815181106106a4576106a46119be565b6020026020010151600001516001600160a01b03160361078b57838c82815181106106d1576106d16119be565b6020026020010151602001518b83815181106106ef576106ef6119be565b602002602001015160ff168151811061070a5761070a6119be565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8a8281518110610740576107406119be565b602002602001015160ff161061075557600080fd5b898181518110610767576107676119be565b60200260200101805180919061077c906119d4565b60ff169052506001915061079d565b80610795816119a5565b915050610680565b5080156107ac575050506108cd565b818b89815181106107bf576107bf6119be565b60209081029190910101516001600160a01b03909116905260018a015461ffff1667ffffffffffffffff8111156107f8576107f86117c7565b604051908082528060200260200182016040528015610821578160200160208202803683370190505b508b8981518110610834576108346119be565b602002602001015160200181905250828b8981518110610856576108566119be565b602002602001015160200151600081518110610874576108746119be565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018989815181106108aa576108aa6119be565b60ff90921660209283029190910190910152876108c6816119a5565b9850505050505b806108d7816119a5565b915050610631565b505080806108ec906119a5565b91505061060e565b5060005b8281101561095b576000848281518110610914576109146119be565b602002602001015160ff1690506000878381518110610935576109356119be565b602002602001015160200151905081815250508080610953906119a5565b9150506108f8565b508185525050505090565b60006102a8610e42565b60006102a8610c5f565b610982610c5f565b6001600160a01b0316336001600160a01b0316146109b357604051632f7a8ee160e01b815260040160405180910390fd5b6109bc81610ea4565b50565b606060006109cb610b9e565b600181015490915061ffff1667ffffffffffffffff8111156109ef576109ef6117c7565b604051908082528060200260200182016040528015610a18578160200160208202803683370190505b50915060008060005b600184015461ffff16821015610b01576000818152600285016020526040812054905b6008811015610aec5783610a57816119a5565b600188015490955061ffff1685119050610aec57600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a1603610ad95780888781518110610ab257610ab26119be565b6001600160e01b03199092166020928302919091019091015285610ad5816119a5565b9650505b5080610ae4816119a5565b915050610a44565b50508080610af9906119a5565b915050610a21565b5050825250919050565b6000610b15610b9e565b6001600160e01b0319909216600090815260209290925250604090205460601c90565b610b40610c5f565b6001600160a01b0316336001600160a01b031614610b7157604051632f7a8ee160e01b815260040160405180910390fd5b6109bc81610ed1565b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b600080356001600160e01b03191681527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c80610c2f576102a8610e26565b90565b6000610c3c610b7a565b6001600160e01b0319909216600090815260209290925250604090205460ff1690565b6000610c69610bc2565b546001600160a01b0316919050565b6000610c82610b9e565b600181015490915061ffff811690819060009060071615610cb55750600381901c60009081526002840160205260409020545b60005b8751811015610d9a576000888281518110610cd557610cd56119be565b60200260200101519050600081602001519050816040015151600003610d0e5760405163eb6c3aeb60e01b815260040160405180910390fd5b6000816002811115610d2257610d226119f3565b03610d3d57610d3387868685610f12565b9095509350610d90565b6001816002811115610d5157610d516119f3565b03610d6557610d608783611051565b610d90565b6002816002811115610d7957610d796119f3565b03610d9057610d8a8786868561119c565b90955093505b5050600101610cb8565b50828214610db65760018401805461ffff191661ffff84161790555b6007821615610dd857600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673878787604051610e0b93929190611a59565b60405180910390a1610e1d86866113bf565b50505050505050565b6000610e30610b9e565b600301546001600160a01b0316919050565b60007f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890610c69565b610e73336114a3565b7f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce661789080546001600160a01b0319169055565b80610ead610b9e565b60030180546001600160a01b0319166001600160a01b039290921691909117905550565b7f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce661789080546001600160a01b0319166001600160a01b0383161790556109bc8181565b805160009081906001600160a01b03163014801590610f3a575082516001600160a01b03163b155b15610f5857604051633ddc5cab60e21b815260040160405180910390fd5b60005b83604001515181101561104457600084604001518281518110610f8057610f806119be565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c15610fcc57604051634923a77160e11b815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6001600160601b0319168b1790925560058a901b60e090811692831c91831c1999909916179781900361103557600389901c600090815260028b0160205260408120989098555b50505060019586019501610f5b565b5093959294509192505050565b80516001600160a01b03163b61107a57604051633ddc5cab60e21b815260040160405180910390fd5b60005b816040015151811015611197576000826040015182815181106110a2576110a26119be565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c806110ee576040516337e25a9760e11b815260040160405180910390fd5b306001600160a01b038216036111175760405163e983573160e01b815260040160405180910390fd5b84600001516001600160a01b0316816001600160a01b03160361114d576040516330baabf360e11b815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6001600160601b0319166bffffffffffffffffffffffff9190911617905560010161107d565b505050565b805160009081906001600160a01b0316156111ca57604051633ab3490960e21b815260040160405180910390fd5b600385901c6007861660005b8560400151518110156113ab576000866040015182815181106111fb576111fb6119be565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c611246576040516337e25a9760e11b815260040160405180910390fd5b30606082901c0361126a5760405163e983573160e01b815260040160405180910390fd5b600089900361129657600019909401600081815260028c0160205260409020549850936007935061129e565b600019909301925b600584901b89901b6000806001600160e01b0319808416908616146112f5576001600160e01b03198316600090815260208f90526040902080546001600160601b0319166bffffffffffffffffffffffff86161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b1687821461135857600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c17905561137c565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b8660000361139a57600088815260028f01602052604081208190559b505b5050600190930192506111d6915050565b5060039190911b1796939550929350505050565b8051156001600160a01b03831615146113eb576040516326df4ccd60e01b815260040160405180910390fd5b6001600160a01b0382161561149f576001600160a01b0382163014611432576001600160a01b0382163b61143257604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b03168260405161144c9190611b22565b600060405180830381855af49150503d8060008114611487576040519150601f19603f3d011682016040523d82523d6000602084013e61148c565b606091505b5050905080611197573d6000803e3d6000fd5b5050565b60006114ad610bc2565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160e01b03198116811461152257600080fd5b919050565b60006020828403121561153957600080fd5b6115428261150a565b9392505050565b80356001600160a01b038116811461152257600080fd5b60008083601f84011261157257600080fd5b50813567ffffffffffffffff81111561158a57600080fd5b6020830191508360208285010111156115a257600080fd5b9250929050565b6000806000806000606086880312156115c157600080fd5b853567ffffffffffffffff808211156115d957600080fd5b818801915088601f8301126115ed57600080fd5b8135818111156115fc57600080fd5b8960208260051b850101111561161157600080fd5b6020830197508096505061162760208901611549565b9450604088013591508082111561163d57600080fd5b5061164a88828901611560565b969995985093965092949392505050565b6020808252825182820181905260009190848201906040850190845b8181101561169c5783516001600160a01b031683529284019291840191600101611677565b50909695505050505050565b600081518084526020808501945080840160005b838110156116e25781516001600160e01b031916875295820195908201906001016116bc565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561175c57888303603f19018552815180516001600160a01b03168452870151878401879052611749878501826116a8565b9588019593505090860190600101611714565b509098975050505050505050565b60006020828403121561177c57600080fd5b61154282611549565b6020808252825182820181905260009190848201906040850190845b8181101561169c5783516001600160e01b031916835292840192918401916001016117a1565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611800576118006117c7565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561182f5761182f6117c7565b604052919050565b600067ffffffffffffffff821115611851576118516117c7565b5060051b60200190565b600061186e61186984611837565b611806565b83815260208082019190600586811b86013681111561188c57600080fd5b865b8181101561198257803567ffffffffffffffff808211156118af5760008081fd5b818a019150606082360312156118c55760008081fd5b6118cd6117dd565b6118d683611549565b815286830135600381106118ea5760008081fd5b81880152604083810135838111156119025760008081fd5b939093019236601f85011261191957600092508283fd5b8335925061192961186984611837565b83815292871b840188019288810190368511156119465760008081fd5b948901945b8486101561196b5761195c8661150a565b8252948901949089019061194b565b91830191909152508852505094830194830161188e565b5092979650505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016119b7576119b761198f565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff81036119ea576119ea61198f565b60010192915050565b634e487b7160e01b600052602160045260246000fd5b60005b83811015611a24578181015183820152602001611a0c565b50506000910152565b60008151808452611a45816020860160208601611a09565b601f01601f19169290920160200192915050565b6000606080830181845280875180835260808601915060808160051b87010192506020808a016000805b84811015611af257898703607f19018652825180516001600160a01b031688528481015160038110611ac357634e487b7160e01b84526021600452602484fd5b88860152604090810151908801899052611adf898901826116a8565b9750509483019491830191600101611a83565b5050506001600160a01b0389169087015250508381036040850152611b178186611a2d565b979650505050505050565b60008251611b34818460208701611a09565b919091019291505056fea2646970667358221220bdde379fef1a9e55b90a2b473edd6093b4d65fb468f1df6432ced84c8ef5214564736f6c63430008110033a2646970667358221220f9116c807ccbbdddf52693821fa7d4fd3f033b91253a9583fb36b1f96cc58cfc64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
