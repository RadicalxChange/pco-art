{
  "address": "0xaDD2eFb7f87Db4003c50d4aE60Bcc82b255F9222",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "diamondAddress",
          "type": "address"
        }
      ],
      "name": "DiamondCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "initTarget",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "initData",
              "type": "bytes"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamond.FacetInit[]",
          "name": "facetInits",
          "type": "tuple[]"
        }
      ],
      "name": "createDiamond",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4830198ae3e8ff784f23ee8f26ba3afe187200a5b5fb3a99b685a50a8ad3871d",
  "receipt": {
    "to": null,
    "from": "0xfF5Be16460704eFd0263dB1444Eaa216b77477c5",
    "contractAddress": "0xaDD2eFb7f87Db4003c50d4aE60Bcc82b255F9222",
    "transactionIndex": 4,
    "gasUsed": "1918608",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x76973f65dca4bfd1ef4692c6e1221f413f68c15ea9f8346f68cd2c5950f6b0e9",
    "transactionHash": "0x4830198ae3e8ff784f23ee8f26ba3afe187200a5b5fb3a99b685a50a8ad3871d",
    "logs": [],
    "blockNumber": 13398925,
    "cumulativeGasUsed": "2519013",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7c2f2883e0da9bf3e6298a712dbf5e36",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"diamondAddress\",\"type\":\"address\"}],\"name\":\"DiamondCreated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamond.FacetInit[]\",\"name\":\"facetInits\",\"type\":\"tuple[]\"}],\"name\":\"createDiamond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/proxies/SingleCutDiamondFactory.sol\":\"SingleCutDiamondFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165Base } from './IERC165Base.sol';\\nimport { ERC165BaseInternal } from './ERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165Base is IERC165Base, ERC165BaseInternal {\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return _supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3f2268856fdd9b27946adc65010bc83992069a90034bf692ab630802a926a9c2\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xba7b4d73d42dfc9f8083ce36aed0fa2c56c73878d8bda7d64f2fb908d5e04636\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\n\\ninterface IERC165Base is IERC165, IERC165BaseInternal {}\\n\",\"keccak256\":\"0x288c50013c735cf30be90eb084589fc54bc0ee77a88ec69c3cc1efb11d7dccf4\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IProxy {\\n    error Proxy__ImplementationIsNotContract();\\n\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x2a06657ce005059e60a0765fe090240732d910fc38de43ca8fd48804bb86c5e4\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { AddressUtils } from '../utils/AddressUtils.sol';\\nimport { IProxy } from './IProxy.sol';\\n\\n/**\\n * @title Base proxy contract\\n */\\nabstract contract Proxy is IProxy {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice delegate all calls to implementation contract\\n     * @dev reverts if implementation address contains no code, for compatibility with metamorphic contracts\\n     * @dev memory location in use by assembly may be unsafe in other contexts\\n     */\\n    fallback() external payable virtual {\\n        address implementation = _getImplementation();\\n\\n        if (!implementation.isContract())\\n            revert Proxy__ImplementationIsNotContract();\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get logic implementation address\\n     * @return implementation address\\n     */\\n    function _getImplementation() internal virtual returns (address);\\n}\\n\",\"keccak256\":\"0x4d6ba63d71b8cddb57746d564cc904931d1ee479052a19f902787417ee5d97a8\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/DiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Proxy } from '../../Proxy.sol';\\nimport { IDiamondBase } from './IDiamondBase.sol';\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy base contract\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\nabstract contract DiamondBase is IDiamondBase, Proxy {\\n    /**\\n     * @inheritdoc Proxy\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address implementation)\\n    {\\n        // inline storage layout retrieval uses less gas\\n        DiamondBaseStorage.Layout storage l;\\n        bytes32 slot = DiamondBaseStorage.STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n\\n        implementation = address(bytes20(l.facets[msg.sig]));\\n    }\\n}\\n\",\"keccak256\":\"0x6712d6c7bee937ac07ee00eeaa30895634fbd3cda7f5b5c179a2331ad05623df\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/DiamondBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nlibrary DiamondBaseStorage {\\n    struct Layout {\\n        // function selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) facets;\\n        // total number of selectors registered\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n        address fallbackAddress;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.DiamondBase');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74365666c0e9917d742bbab21e174dea6bc6ccf6146153e43dd9d9fe8417a36a\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/IDiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IProxy } from '../../IProxy.sol';\\n\\ninterface IDiamondBase is IProxy {}\\n\",\"keccak256\":\"0x3329852027ffb50519a245376a1dee8f828223c0fa439bbb16a80a1bc226c2fa\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondReadable } from './IDiamondReadable.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy introspection contract\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nabstract contract DiamondReadable is IDiamondReadable {\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        diamondFacets = new Facet[](l.selectorCount);\\n\\n        uint8[] memory numFacetSelectors = new uint8[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (diamondFacets[facetIndex].target == facet) {\\n                        diamondFacets[facetIndex].selectors[\\n                            numFacetSelectors[facetIndex]\\n                        ] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                diamondFacets[numFacets].target = facet;\\n                diamondFacets[numFacets].selectors = new bytes4[](\\n                    l.selectorCount\\n                );\\n                diamondFacets[numFacets].selectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = diamondFacets[facetIndex].selectors;\\n\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n\\n        // setting the number of facets\\n        assembly {\\n            mstore(diamondFacets, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory selectors) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        selectors = new bytes4[](l.selectorCount);\\n\\n        uint256 numSelectors;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\n                if (facet == address(bytes20(l.facets[selector]))) {\\n                    selectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n\\n        // set the number of selectors in the array\\n        assembly {\\n            mstore(selectors, numSelectors)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        addresses = new address[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facet == addresses[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                addresses[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        // set the number of facet addresses in the array\\n        assembly {\\n            mstore(addresses, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddress(\\n        bytes4 selector\\n    ) external view returns (address facet) {\\n        facet = address(bytes20(DiamondBaseStorage.layout().facets[selector]));\\n    }\\n}\\n\",\"keccak256\":\"0x03fd06c9bd8642a42ece1d9f75c9e99869a06f4310fa9fe80df924ff68984036\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/readable/IDiamondReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Diamond proxy introspection interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondReadable {\\n    struct Facet {\\n        address target;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice get all facets and their selectors\\n     * @return diamondFacets array of structured facet data\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets);\\n\\n    /**\\n     * @notice get all selectors for given facet address\\n     * @param facet address of facet to query\\n     * @return selectors array of function selectors\\n     */\\n    function facetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory selectors);\\n\\n    /**\\n     * @notice get addresses of all facets used by diamond\\n     * @return addresses array of facet addresses\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses);\\n\\n    /**\\n     * @notice get the address of the facet associated with given selector\\n     * @param selector function selector to query\\n     * @return facet facet address (zero address if not found)\\n     */\\n    function facetAddress(\\n        bytes4 selector\\n    ) external view returns (address facet);\\n}\\n\",\"keccak256\":\"0xe3536079514a210e74f6e93b62525d451ed75c50c82773f9574c24e886ebe1ed\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/DiamondWritableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondWritableInternal } from './IDiamondWritableInternal.sol';\\n\\nabstract contract DiamondWritableInternal is IDiamondWritableInternal {\\n    using AddressUtils for address;\\n\\n    bytes32 private constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 private constant CLEAR_SELECTOR_MASK =\\n        bytes32(uint256(0xffffffff << 224));\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function _diamondCut(\\n        FacetCut[] memory facetCuts,\\n        address target,\\n        bytes memory data\\n    ) internal {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        unchecked {\\n            uint256 originalSelectorCount = l.selectorCount;\\n            uint256 selectorCount = originalSelectorCount;\\n            bytes32 selectorSlot;\\n\\n            // Check if last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                // get last selectorSlot\\n                selectorSlot = l.selectorSlots[selectorCount >> 3];\\n            }\\n\\n            for (uint256 i; i < facetCuts.length; i++) {\\n                FacetCut memory facetCut = facetCuts[i];\\n                FacetCutAction action = facetCut.action;\\n\\n                if (facetCut.selectors.length == 0)\\n                    revert DiamondWritable__SelectorNotSpecified();\\n\\n                if (action == FacetCutAction.ADD) {\\n                    (selectorCount, selectorSlot) = _addFacetSelectors(\\n                        l,\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                } else if (action == FacetCutAction.REPLACE) {\\n                    _replaceFacetSelectors(l, facetCut);\\n                } else if (action == FacetCutAction.REMOVE) {\\n                    (selectorCount, selectorSlot) = _removeFacetSelectors(\\n                        l,\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                }\\n            }\\n\\n            if (selectorCount != originalSelectorCount) {\\n                l.selectorCount = uint16(selectorCount);\\n            }\\n\\n            // If last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n            }\\n\\n            emit DiamondCut(facetCuts, target, data);\\n            _initialize(target, data);\\n        }\\n    }\\n\\n    function _addFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (\\n                facetCut.target != address(this) &&\\n                !facetCut.target.isContract()\\n            ) revert DiamondWritable__TargetHasNoCode();\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) != address(0))\\n                    revert DiamondWritable__SelectorAlreadyAdded();\\n\\n                // add facet for selector\\n                l.facets[selector] =\\n                    bytes20(facetCut.target) |\\n                    bytes32(selectorCount);\\n                uint256 selectorInSlotPosition = (selectorCount & 7) << 5;\\n\\n                // clear selector position in slot and add selector\\n                selectorSlot =\\n                    (selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n                    selectorSlot = 0;\\n                }\\n\\n                selectorCount++;\\n            }\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function _removeFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (facetCut.target != address(0))\\n                revert DiamondWritable__RemoveTargetNotZeroAddress();\\n\\n            uint256 selectorSlotCount = selectorCount >> 3;\\n            uint256 selectorInSlotIndex = selectorCount & 7;\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) == address(0))\\n                    revert DiamondWritable__SelectorNotFound();\\n\\n                if (address(bytes20(oldFacet)) == address(this))\\n                    revert DiamondWritable__SelectorIsImmutable();\\n\\n                if (selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    selectorSlot = l.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                // adding a block here prevents stack too deep error\\n                {\\n                    // replace selector with last selector in l.facets\\n                    lastSelector = bytes4(\\n                        selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        l.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(l.facets[lastSelector]);\\n                    }\\n\\n                    delete l.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = l.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    // update storage with the modified slot\\n                    l.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    selectorSlot =\\n                        (selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete l.selectorSlots[selectorSlotCount];\\n                    selectorSlot = 0;\\n                }\\n            }\\n\\n            selectorCount = (selectorSlotCount << 3) | selectorInSlotIndex;\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function _replaceFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        FacetCut memory facetCut\\n    ) internal {\\n        unchecked {\\n            if (!facetCut.target.isContract())\\n                revert DiamondWritable__TargetHasNoCode();\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                if (oldFacetAddress == address(0))\\n                    revert DiamondWritable__SelectorNotFound();\\n                if (oldFacetAddress == address(this))\\n                    revert DiamondWritable__SelectorIsImmutable();\\n                if (oldFacetAddress == facetCut.target)\\n                    revert DiamondWritable__ReplaceTargetIsIdentical();\\n\\n                // replace old facet address\\n                l.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(facetCut.target);\\n            }\\n        }\\n    }\\n\\n    function _initialize(address target, bytes memory data) private {\\n        if ((target == address(0)) != (data.length == 0))\\n            revert DiamondWritable__InvalidInitializationParameters();\\n\\n        if (target != address(0)) {\\n            if (target != address(this)) {\\n                if (!target.isContract())\\n                    revert DiamondWritable__TargetHasNoCode();\\n            }\\n\\n            (bool success, ) = target.delegatecall(data);\\n\\n            if (!success) {\\n                assembly {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9bc52044616cc2058d15aa07455f9ab4a2d6b0cb4bd542d6b5b8df092b501387\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/IDiamondWritableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IDiamondWritableInternal {\\n    enum FacetCutAction {\\n        ADD,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    event DiamondCut(FacetCut[] facetCuts, address target, bytes data);\\n\\n    error DiamondWritable__InvalidInitializationParameters();\\n    error DiamondWritable__RemoveTargetNotZeroAddress();\\n    error DiamondWritable__ReplaceTargetIsIdentical();\\n    error DiamondWritable__SelectorAlreadyAdded();\\n    error DiamondWritable__SelectorIsImmutable();\\n    error DiamondWritable__SelectorNotFound();\\n    error DiamondWritable__SelectorNotSpecified();\\n    error DiamondWritable__TargetHasNoCode();\\n\\n    struct FacetCut {\\n        address target;\\n        FacetCutAction action;\\n        bytes4[] selectors;\\n    }\\n}\\n\",\"keccak256\":\"0x82e0eeb28c8b8bd1ee9c5dd3247fa3d4062d5c6d43061833714c88741ecb5605\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/proxies/IDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IDiamond {\\n    struct FacetInit {\\n        address target;\\n        address initTarget;\\n        bytes initData;\\n        bytes4[] selectors;\\n    }\\n}\\n\",\"keccak256\":\"0xa61ca7fad656963f32b952bff8614501462de3ae8632f78a1457039a5d75ad30\",\"license\":\"MIT\"},\"contracts/proxies/IDiamondFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { IDiamond } from './IDiamond.sol';\\n\\ninterface IDiamondFactory is IDiamond {\\n    event DiamondCreated(address indexed diamondAddress);\\n\\n    function createDiamond(\\n        FacetInit[] memory facetInits\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xae7ef487b8a02209e1eedf0321c767c3651e1e5e98c358383a4c657db4e89fb3\",\"license\":\"MIT\"},\"contracts/proxies/SingleCutDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { IERC165 } from '@solidstate/contracts/interfaces/IERC165.sol';\\nimport { ERC165Base, ERC165BaseStorage } from '@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol';\\nimport { DiamondBase } from '@solidstate/contracts/proxy/diamond/base/DiamondBase.sol';\\nimport { DiamondReadable, IDiamondReadable } from '@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol';\\nimport { DiamondWritableInternal } from '@solidstate/contracts/proxy/diamond/writable/DiamondWritableInternal.sol';\\nimport { IDiamond } from './IDiamond.sol';\\n\\n/******************************************************************************\\\\\\n* EIP-2535 Diamonds implementation that is a single cut with no diamondCut selector after deployment\\n/******************************************************************************/\\n\\ncontract SingleCutDiamond is\\n    DiamondBase,\\n    DiamondReadable,\\n    DiamondWritableInternal,\\n    ERC165Base,\\n    IDiamond\\n{\\n    constructor(FacetInit[] memory facetInits) {\\n        bytes4[] memory selectors = new bytes4[](5);\\n        uint256 selectorIndex;\\n\\n        // register DiamondReadable\\n\\n        selectors[selectorIndex++] = IDiamondReadable.facets.selector;\\n        selectors[selectorIndex++] = IDiamondReadable\\n            .facetFunctionSelectors\\n            .selector;\\n        selectors[selectorIndex++] = IDiamondReadable.facetAddresses.selector;\\n        selectors[selectorIndex++] = IDiamondReadable.facetAddress.selector;\\n\\n        _setSupportsInterface(type(IDiamondReadable).interfaceId, true);\\n\\n        // register ERC165\\n\\n        selectors[selectorIndex++] = IERC165.supportsInterface.selector;\\n\\n        _setSupportsInterface(type(IERC165).interfaceId, true);\\n\\n        // diamond cut\\n\\n        FacetCut[] memory builtInFacetCuts = new FacetCut[](1);\\n\\n        builtInFacetCuts[0] = FacetCut({\\n            target: address(this),\\n            action: FacetCutAction.ADD,\\n            selectors: selectors\\n        });\\n\\n        _diamondCut(builtInFacetCuts, address(0), '');\\n\\n        for (uint256 facetIndex; facetIndex < facetInits.length; facetIndex++) {\\n            FacetInit memory facetInit = facetInits[facetIndex];\\n            FacetCut[] memory facetCuts = new FacetCut[](1);\\n            facetCuts[0] = FacetCut({\\n                target: facetInit.target,\\n                action: FacetCutAction.ADD,\\n                selectors: facetInit.selectors\\n            });\\n\\n            _diamondCut(facetCuts, facetInit.initTarget, facetInit.initData);\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x6e7108023238cb0708f5dc024f7a2b55bea92629bc165052132e2cdcab5f70e4\",\"license\":\"MIT\"},\"contracts/proxies/SingleCutDiamondFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { IERC165 } from '@solidstate/contracts/interfaces/IERC165.sol';\\nimport { ERC165Base, ERC165BaseStorage } from '@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol';\\nimport { DiamondBase } from '@solidstate/contracts/proxy/diamond/base/DiamondBase.sol';\\nimport { DiamondReadable, IDiamondReadable } from '@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol';\\nimport { DiamondWritableInternal } from '@solidstate/contracts/proxy/diamond/writable/DiamondWritableInternal.sol';\\nimport { SingleCutDiamond } from './SingleCutDiamond.sol';\\nimport { IDiamondFactory } from './IDiamondFactory.sol';\\n\\ncontract SingleCutDiamondFactory is IDiamondFactory {\\n    function createDiamond(\\n        FacetInit[] memory facetInits\\n    ) external returns (address) {\\n        SingleCutDiamond singleCutDiamond = new SingleCutDiamond(facetInits);\\n\\n        emit DiamondCreated(address(singleCutDiamond));\\n\\n        return address(singleCutDiamond);\\n    }\\n}\\n\",\"keccak256\":\"0xd19b545f41184dc5e00804e2920648ccf196f8f81c0ddf3ee1578eee55f7def4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506121cf806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063e394a02b1462000033575b600080fd5b6200004a6200004436600462000232565b62000066565b6040516001600160a01b03909116815260200160405180910390f35b600080826040516200007890620000df565b62000084919062000416565b604051809103906000f080158015620000a1573d6000803e3d6000fd5b506040519091506001600160a01b038216907f644ca5b0a8b0418e9faf3880659eeb84eaad45ad838b0173808e5ca72f5efc4990600090a292915050565b611c9a806200050083390190565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715620001295762000129620000ed565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156200015b576200015b620000ed565b604052919050565b600067ffffffffffffffff821115620001805762000180620000ed565b5060051b60200190565b80356001600160a01b0381168114620001a257600080fd5b919050565b600082601f830112620001b957600080fd5b81356020620001d2620001cc8362000163565b6200012f565b82815260059290921b84018101918181019086841115620001f257600080fd5b8286015b84811015620002275780356001600160e01b031981168114620002195760008081fd5b8352918301918301620001f6565b509695505050505050565b600060208083850312156200024657600080fd5b823567ffffffffffffffff808211156200025f57600080fd5b818501915085601f8301126200027457600080fd5b813562000285620001cc8262000163565b81815260059190911b83018401908481019088831115620002a557600080fd5b8585015b83811015620003c257803585811115620002c257600080fd5b8601601f196080828d0382011215620002da57600080fd5b620002e462000103565b620002f18a84016200018a565b81526040620003028185016200018a565b8b8301526060840135898111156200031a5760008081fd5b8401603f81018f136200032d5760008081fd5b8b8101358a811115620003445762000344620000ed565b620003568d86601f840116016200012f565b94508085528f838284010111156200036e5760008081fd5b808383018e87013760009150818d828701015250838284015260808501359350898411156200039b578081fd5b5050620003ad8d8b84860101620001a7565b606082015285525050918601918601620002a9565b5098975050505050505050565b600081518084526020808501945080840160005b838110156200040b5781516001600160e01b03191687529582019590820190600101620003e3565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015620004f057898403603f19018652825180516001600160a01b03908116865289820151168986015287810151608089870181905281519087018190528491905b80831015620004a2578183018c015188840160a00152918b019162000482565b60a092508583828a010152601f19601f8201168801915050606080840151935082888303018189015250620004da82820184620003cf565b988b01989650505092880192506001016200043e565b5091999850505050505050505056fe60806040523480156200001157600080fd5b5060405162001c9a38038062001c9a833981016040819052620000349162000d9a565b60408051600580825260c082019092526000916020820160a0803683370190505090506000637a0ed62760e01b82826200006e8162000f35565b93508151811062000083576200008362000f5d565b6001600160e01b0319909216602092830291909101909101526356fe50af60e11b8282620000b18162000f35565b935081518110620000c657620000c662000f5d565b6001600160e01b0319909216602092830291909101909101526314bbdacb60e21b8282620000f48162000f35565b93508151811062000109576200010962000f5d565b6001600160e01b0319909216602092830291909101909101526366ffd66360e11b8282620001378162000f35565b9350815181106200014c576200014c62000f5d565b6001600160e01b031990921660209283029190910190910152620001796348e2b09360e01b6001620003a4565b6301ffc9a760e01b82826200018e8162000f35565b935081518110620001a357620001a362000f5d565b6001600160e01b031990921660209283029190910190910152620001d06301ffc9a760e01b6001620003a4565b604080516001808252818301909252600091816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081620001e7579050506040805160608101909152308152909150602081016000815260200184815250816000815181106200024d576200024d62000f5d565b60200260200101819052506200027b816000604051806020016040528060008152506200041660201b60201c565b60005b8451811015620003995760008582815181106200029f576200029f62000f5d565b60200260200101519050600060016001600160401b03811115620002c757620002c762000c32565b6040519080825280602002602001820160405280156200031657816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081620002e65790505b50604080516060810190915283516001600160a01b0316815290915060208101600081526020018360600151815250816000815181106200035b576200035b62000f5d565b60200260200101819052506200038181836020015184604001516200041660201b60201c565b50508080620003909062000f35565b9150506200027e565b5050505050620010dc565b6001600160e01b03198083169003620003d05760405163b0a19dd560e01b815260040160405180910390fd5b80620003e6620005f260201b6200090d1760201c565b6001600160e01b03199390931660009081526020939093526040909220805460ff19169215159290921790915550565b60006200042d6200061660201b620009311760201c565b600181015490915061ffff811690819060009060071615620004615750600381901c60009081526002840160205260409020545b60005b87518110156200056057600088828151811062000485576200048562000f5d565b60200260200101519050600081602001519050816040015151600003620004bf5760405163eb6c3aeb60e01b815260040160405180910390fd5b6000816002811115620004d657620004d662000f73565b03620004f557620004ea878686856200063a565b909550935062000555565b60018160028111156200050c576200050c62000f73565b0362000524576200051e878362000799565b62000555565b60028160028111156200053b576200053b62000f73565b0362000555576200054f87868685620008ff565b90955093505b505060010162000464565b508282146200057d5760018401805461ffff191661ffff84161790555b6007821615620005a057600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673878787604051620005d59392919062000fb7565b60405180910390a1620005e9868662000b2b565b50505050505050565b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b805160009081906001600160a01b031630148015906200067a57506200067883600001516001600160a01b031662000c2c60201b620001b21760201c565b155b156200069957604051633ddc5cab60e21b815260040160405180910390fd5b60005b8360400151518110156200078c57600084604001518281518110620006c557620006c562000f5d565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c156200071257604051634923a77160e11b815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6001600160601b0319168b1790925560058a901b60e090811692831c91831c199990991617978190036200077c57600389901c600090815260028b0160205260408120989098555b505050600195860195016200069c565b5093959294509192505050565b620007bc81600001516001600160a01b031662000c2c60201b620001b21760201c565b620007da57604051633ddc5cab60e21b815260040160405180910390fd5b60005b816040015151811015620008fa5760008260400151828151811062000806576200080662000f5d565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c8062000853576040516337e25a9760e11b815260040160405180910390fd5b306001600160a01b038216036200087d5760405163e983573160e01b815260040160405180910390fd5b84600001516001600160a01b0316816001600160a01b031603620008b4576040516330baabf360e11b815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6001600160601b0319166001600160601b0391909116179055600101620007dd565b505050565b805160009081906001600160a01b0316156200092e57604051633ab3490960e21b815260040160405180910390fd5b600385901c6007861660005b85604001515181101562000b175760008660400151828151811062000963576200096362000f5d565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c620009af576040516337e25a9760e11b815260040160405180910390fd5b30606082901c03620009d45760405163e983573160e01b815260040160405180910390fd5b600089900362000a0257600019909401600081815260028c0160205260409020549850936007935062000a0a565b600019909301925b600584901b89901b6000806001600160e01b03198084169086161462000a5d576001600160e01b03198316600090815260208f90526040902080546001600160601b0319166001600160601b0386161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b1687821462000ac257600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c17905562000ae6565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b8660000362000b0557600088815260028f01602052604081208190559b505b5050600190930192506200093a915050565b5060039190911b1796939550929350505050565b8051156001600160a01b038316151462000b58576040516326df4ccd60e01b815260040160405180910390fd5b6001600160a01b0382161562000c28576001600160a01b038216301462000bb65762000b98826001600160a01b031662000c2c60201b620001b21760201c565b62000bb657604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b03168260405162000bd29190620010be565b600060405180830381855af49150503d806000811462000c0f576040519150601f19603f3d011682016040523d82523d6000602084013e62000c14565b606091505b5050905080620008fa573d6000803e3d6000fd5b5050565b3b151590565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171562000c6d5762000c6d62000c32565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000c9e5762000c9e62000c32565b604052919050565b60006001600160401b0382111562000cc25762000cc262000c32565b5060051b60200190565b80516001600160a01b038116811462000ce457600080fd5b919050565b60005b8381101562000d0657818101518382015260200162000cec565b50506000910152565b600082601f83011262000d2157600080fd5b8151602062000d3a62000d348362000ca6565b62000c73565b82815260059290921b8401810191818101908684111562000d5a57600080fd5b8286015b8481101562000d8f5780516001600160e01b03198116811462000d815760008081fd5b835291830191830162000d5e565b509695505050505050565b6000602080838503121562000dae57600080fd5b82516001600160401b038082111562000dc657600080fd5b818501915085601f83011262000ddb57600080fd5b815162000dec62000d348262000ca6565b81815260059190911b8301840190848101908883111562000e0c57600080fd5b8585015b8381101562000f285780518581111562000e2957600080fd5b8601601f196080828d038201121562000e4157600080fd5b62000e4b62000c48565b62000e588a840162000ccc565b8152604062000e6981850162000ccc565b8b83015260608401518981111562000e815760008081fd5b8401603f81018f1362000e945760008081fd5b8b8101518a81111562000eab5762000eab62000c32565b62000ebd8d86601f8401160162000c73565b94508085528f8382840101111562000ed55760008081fd5b62000ee6818e870185850162000ce9565b50508101919091526080820151908782111562000f035760008081fd5b62000f138d8b8486010162000d0f565b60608201528552505091860191860162000e10565b5098975050505050505050565b60006001820162000f5657634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6000815180845262000fa381602086016020860162000ce9565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b848110156200108c57898403607f19018652815180516001600160a01b031685528381015189860190600381106200102857634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015620010765783516001600160e01b03191682529286019260019290920191908601906200104a565b5097850197955050509082019060010162000fe0565b50506001600160a01b038a16908801528681036040880152620010b0818962000f89565b9a9950505050505050505050565b60008251620010d281846020870162000ce9565b9190910192915050565b610bae80620010ec6000396000f3fe60806040526004361061004e5760003560e01c806301ffc9a7146100d457806352ef6b2c146101095780637a0ed6271461012b578063adfca15e1461014d578063cdffacc61461017a57610055565b3661005557005b600080356001600160e01b03191681527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c803b6100b0576040516321f27f0d60e21b815260040160405180910390fd5b3660008037600080366000845af43d6000803e8080156100cf573d6000f35b3d6000fd5b3480156100e057600080fd5b506100f46100ef366004610982565b6101b8565b60405190151581526020015b60405180910390f35b34801561011557600080fd5b5061011e6101c9565b60405161010091906109b3565b34801561013757600080fd5b5061014061036c565b6040516101009190610a45565b34801561015957600080fd5b5061016d610168366004610ac2565b610794565b6040516101009190610aeb565b34801561018657600080fd5b5061019a610195366004610982565b6108e0565b6040516001600160a01b039091168152602001610100565b3b151590565b60006101c382610955565b92915050565b606060006101d5610931565b600181015490915061ffff1667ffffffffffffffff8111156101f9576101f9610afe565b604051908082528060200260200182016040528015610222578160200160208202803683370190505b50915060008060005b600184015461ffff16821015610364576000818152600285016020526040812054905b600881101561034f578361026181610b2a565b600188015490955061ffff168511905061034f57600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b888110156102f2578a81815181106102b7576102b7610b43565b60200260200101516001600160a01b0316836001600160a01b0316036102e057600191506102f2565b806102ea81610b2a565b91505061029d565b5080156103015750505061033d565b818a898151811061031457610314610b43565b6001600160a01b03909216602092830291909101909101528761033681610b2a565b9850505050505b8061034781610b2a565b91505061024e565b5050808061035c90610b2a565b91505061022b565b505082525090565b60606000610378610931565b600181015490915061ffff1667ffffffffffffffff81111561039c5761039c610afe565b6040519080825280602002602001820160405280156103e257816020015b6040805180820190915260008152606060208201528152602001906001900390816103ba5790505b50600182015490925060009061ffff1667ffffffffffffffff81111561040a5761040a610afe565b604051908082528060200260200182016040528015610433578160200160208202803683370190505b50905060008060005b600185015461ffff16821015610722576000818152600286016020526040812054905b600881101561070d578361047281610b2a565b600189015490955061ffff168511905061070d57600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b888110156105cb57826001600160a01b03168c82815181106104d2576104d2610b43565b6020026020010151600001516001600160a01b0316036105b957838c82815181106104ff576104ff610b43565b6020026020010151602001518b838151811061051d5761051d610b43565b602002602001015160ff168151811061053857610538610b43565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8a828151811061056e5761056e610b43565b602002602001015160ff161061058357600080fd5b89818151811061059557610595610b43565b6020026020010180518091906105aa90610b59565b60ff16905250600191506105cb565b806105c381610b2a565b9150506104ae565b5080156105da575050506106fb565b818b89815181106105ed576105ed610b43565b60209081029190910101516001600160a01b03909116905260018a015461ffff1667ffffffffffffffff81111561062657610626610afe565b60405190808252806020026020018201604052801561064f578160200160208202803683370190505b508b898151811061066257610662610b43565b602002602001015160200181905250828b898151811061068457610684610b43565b6020026020010151602001516000815181106106a2576106a2610b43565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018989815181106106d8576106d8610b43565b60ff90921660209283029190910190910152876106f481610b2a565b9850505050505b8061070581610b2a565b91505061045f565b5050808061071a90610b2a565b91505061043c565b5060005b8281101561078957600084828151811061074257610742610b43565b602002602001015160ff169050600087838151811061076357610763610b43565b60200260200101516020015190508181525050808061078190610b2a565b915050610726565b508185525050505090565b606060006107a0610931565b600181015490915061ffff1667ffffffffffffffff8111156107c4576107c4610afe565b6040519080825280602002602001820160405280156107ed578160200160208202803683370190505b50915060008060005b600184015461ffff168210156108d6576000818152600285016020526040812054905b60088110156108c1578361082c81610b2a565b600188015490955061ffff16851190506108c157600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a16036108ae578088878151811061088757610887610b43565b6001600160e01b031990921660209283029190910190910152856108aa81610b2a565b9650505b50806108b981610b2a565b915050610819565b505080806108ce90610b2a565b9150506107f6565b5050825250919050565b60006108ea610931565b6001600160e01b0319909216600090815260209290925250604090205460601c90565b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b600061095f61090d565b6001600160e01b0319909216600090815260209290925250604090205460ff1690565b60006020828403121561099457600080fd5b81356001600160e01b0319811681146109ac57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156109f45783516001600160a01b0316835292840192918401916001016109cf565b50909695505050505050565b600081518084526020808501945080840160005b83811015610a3a5781516001600160e01b03191687529582019590820190600101610a14565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610ab457888303603f19018552815180516001600160a01b03168452870151878401879052610aa187850182610a00565b9588019593505090860190600101610a6c565b509098975050505050505050565b600060208284031215610ad457600080fd5b81356001600160a01b03811681146109ac57600080fd5b6020815260006109ac6020830184610a00565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610b3c57610b3c610b14565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff8103610b6f57610b6f610b14565b6001019291505056fea26469706673582212205a9cf23720bac5df7221f3ba3484bd230ef637150fc5e233df87fe15b58ef8dc64736f6c63430008110033a264697066735822122044490ceaf5cf6289e178fc6f05a779a302785119bed64f98b171e68d2fac7ea164736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063e394a02b1462000033575b600080fd5b6200004a6200004436600462000232565b62000066565b6040516001600160a01b03909116815260200160405180910390f35b600080826040516200007890620000df565b62000084919062000416565b604051809103906000f080158015620000a1573d6000803e3d6000fd5b506040519091506001600160a01b038216907f644ca5b0a8b0418e9faf3880659eeb84eaad45ad838b0173808e5ca72f5efc4990600090a292915050565b611c9a806200050083390190565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715620001295762000129620000ed565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156200015b576200015b620000ed565b604052919050565b600067ffffffffffffffff821115620001805762000180620000ed565b5060051b60200190565b80356001600160a01b0381168114620001a257600080fd5b919050565b600082601f830112620001b957600080fd5b81356020620001d2620001cc8362000163565b6200012f565b82815260059290921b84018101918181019086841115620001f257600080fd5b8286015b84811015620002275780356001600160e01b031981168114620002195760008081fd5b8352918301918301620001f6565b509695505050505050565b600060208083850312156200024657600080fd5b823567ffffffffffffffff808211156200025f57600080fd5b818501915085601f8301126200027457600080fd5b813562000285620001cc8262000163565b81815260059190911b83018401908481019088831115620002a557600080fd5b8585015b83811015620003c257803585811115620002c257600080fd5b8601601f196080828d0382011215620002da57600080fd5b620002e462000103565b620002f18a84016200018a565b81526040620003028185016200018a565b8b8301526060840135898111156200031a5760008081fd5b8401603f81018f136200032d5760008081fd5b8b8101358a811115620003445762000344620000ed565b620003568d86601f840116016200012f565b94508085528f838284010111156200036e5760008081fd5b808383018e87013760009150818d828701015250838284015260808501359350898411156200039b578081fd5b5050620003ad8d8b84860101620001a7565b606082015285525050918601918601620002a9565b5098975050505050505050565b600081518084526020808501945080840160005b838110156200040b5781516001600160e01b03191687529582019590820190600101620003e3565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015620004f057898403603f19018652825180516001600160a01b03908116865289820151168986015287810151608089870181905281519087018190528491905b80831015620004a2578183018c015188840160a00152918b019162000482565b60a092508583828a010152601f19601f8201168801915050606080840151935082888303018189015250620004da82820184620003cf565b988b01989650505092880192506001016200043e565b5091999850505050505050505056fe60806040523480156200001157600080fd5b5060405162001c9a38038062001c9a833981016040819052620000349162000d9a565b60408051600580825260c082019092526000916020820160a0803683370190505090506000637a0ed62760e01b82826200006e8162000f35565b93508151811062000083576200008362000f5d565b6001600160e01b0319909216602092830291909101909101526356fe50af60e11b8282620000b18162000f35565b935081518110620000c657620000c662000f5d565b6001600160e01b0319909216602092830291909101909101526314bbdacb60e21b8282620000f48162000f35565b93508151811062000109576200010962000f5d565b6001600160e01b0319909216602092830291909101909101526366ffd66360e11b8282620001378162000f35565b9350815181106200014c576200014c62000f5d565b6001600160e01b031990921660209283029190910190910152620001796348e2b09360e01b6001620003a4565b6301ffc9a760e01b82826200018e8162000f35565b935081518110620001a357620001a362000f5d565b6001600160e01b031990921660209283029190910190910152620001d06301ffc9a760e01b6001620003a4565b604080516001808252818301909252600091816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081620001e7579050506040805160608101909152308152909150602081016000815260200184815250816000815181106200024d576200024d62000f5d565b60200260200101819052506200027b816000604051806020016040528060008152506200041660201b60201c565b60005b8451811015620003995760008582815181106200029f576200029f62000f5d565b60200260200101519050600060016001600160401b03811115620002c757620002c762000c32565b6040519080825280602002602001820160405280156200031657816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081620002e65790505b50604080516060810190915283516001600160a01b0316815290915060208101600081526020018360600151815250816000815181106200035b576200035b62000f5d565b60200260200101819052506200038181836020015184604001516200041660201b60201c565b50508080620003909062000f35565b9150506200027e565b5050505050620010dc565b6001600160e01b03198083169003620003d05760405163b0a19dd560e01b815260040160405180910390fd5b80620003e6620005f260201b6200090d1760201c565b6001600160e01b03199390931660009081526020939093526040909220805460ff19169215159290921790915550565b60006200042d6200061660201b620009311760201c565b600181015490915061ffff811690819060009060071615620004615750600381901c60009081526002840160205260409020545b60005b87518110156200056057600088828151811062000485576200048562000f5d565b60200260200101519050600081602001519050816040015151600003620004bf5760405163eb6c3aeb60e01b815260040160405180910390fd5b6000816002811115620004d657620004d662000f73565b03620004f557620004ea878686856200063a565b909550935062000555565b60018160028111156200050c576200050c62000f73565b0362000524576200051e878362000799565b62000555565b60028160028111156200053b576200053b62000f73565b0362000555576200054f87868685620008ff565b90955093505b505060010162000464565b508282146200057d5760018401805461ffff191661ffff84161790555b6007821615620005a057600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673878787604051620005d59392919062000fb7565b60405180910390a1620005e9868662000b2b565b50505050505050565b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b805160009081906001600160a01b031630148015906200067a57506200067883600001516001600160a01b031662000c2c60201b620001b21760201c565b155b156200069957604051633ddc5cab60e21b815260040160405180910390fd5b60005b8360400151518110156200078c57600084604001518281518110620006c557620006c562000f5d565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c156200071257604051634923a77160e11b815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6001600160601b0319168b1790925560058a901b60e090811692831c91831c199990991617978190036200077c57600389901c600090815260028b0160205260408120989098555b505050600195860195016200069c565b5093959294509192505050565b620007bc81600001516001600160a01b031662000c2c60201b620001b21760201c565b620007da57604051633ddc5cab60e21b815260040160405180910390fd5b60005b816040015151811015620008fa5760008260400151828151811062000806576200080662000f5d565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c8062000853576040516337e25a9760e11b815260040160405180910390fd5b306001600160a01b038216036200087d5760405163e983573160e01b815260040160405180910390fd5b84600001516001600160a01b0316816001600160a01b031603620008b4576040516330baabf360e11b815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6001600160601b0319166001600160601b0391909116179055600101620007dd565b505050565b805160009081906001600160a01b0316156200092e57604051633ab3490960e21b815260040160405180910390fd5b600385901c6007861660005b85604001515181101562000b175760008660400151828151811062000963576200096362000f5d565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c620009af576040516337e25a9760e11b815260040160405180910390fd5b30606082901c03620009d45760405163e983573160e01b815260040160405180910390fd5b600089900362000a0257600019909401600081815260028c0160205260409020549850936007935062000a0a565b600019909301925b600584901b89901b6000806001600160e01b03198084169086161462000a5d576001600160e01b03198316600090815260208f90526040902080546001600160601b0319166001600160601b0386161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b1687821462000ac257600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c17905562000ae6565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b8660000362000b0557600088815260028f01602052604081208190559b505b5050600190930192506200093a915050565b5060039190911b1796939550929350505050565b8051156001600160a01b038316151462000b58576040516326df4ccd60e01b815260040160405180910390fd5b6001600160a01b0382161562000c28576001600160a01b038216301462000bb65762000b98826001600160a01b031662000c2c60201b620001b21760201c565b62000bb657604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b03168260405162000bd29190620010be565b600060405180830381855af49150503d806000811462000c0f576040519150601f19603f3d011682016040523d82523d6000602084013e62000c14565b606091505b5050905080620008fa573d6000803e3d6000fd5b5050565b3b151590565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171562000c6d5762000c6d62000c32565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000c9e5762000c9e62000c32565b604052919050565b60006001600160401b0382111562000cc25762000cc262000c32565b5060051b60200190565b80516001600160a01b038116811462000ce457600080fd5b919050565b60005b8381101562000d0657818101518382015260200162000cec565b50506000910152565b600082601f83011262000d2157600080fd5b8151602062000d3a62000d348362000ca6565b62000c73565b82815260059290921b8401810191818101908684111562000d5a57600080fd5b8286015b8481101562000d8f5780516001600160e01b03198116811462000d815760008081fd5b835291830191830162000d5e565b509695505050505050565b6000602080838503121562000dae57600080fd5b82516001600160401b038082111562000dc657600080fd5b818501915085601f83011262000ddb57600080fd5b815162000dec62000d348262000ca6565b81815260059190911b8301840190848101908883111562000e0c57600080fd5b8585015b8381101562000f285780518581111562000e2957600080fd5b8601601f196080828d038201121562000e4157600080fd5b62000e4b62000c48565b62000e588a840162000ccc565b8152604062000e6981850162000ccc565b8b83015260608401518981111562000e815760008081fd5b8401603f81018f1362000e945760008081fd5b8b8101518a81111562000eab5762000eab62000c32565b62000ebd8d86601f8401160162000c73565b94508085528f8382840101111562000ed55760008081fd5b62000ee6818e870185850162000ce9565b50508101919091526080820151908782111562000f035760008081fd5b62000f138d8b8486010162000d0f565b60608201528552505091860191860162000e10565b5098975050505050505050565b60006001820162000f5657634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6000815180845262000fa381602086016020860162000ce9565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b848110156200108c57898403607f19018652815180516001600160a01b031685528381015189860190600381106200102857634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015620010765783516001600160e01b03191682529286019260019290920191908601906200104a565b5097850197955050509082019060010162000fe0565b50506001600160a01b038a16908801528681036040880152620010b0818962000f89565b9a9950505050505050505050565b60008251620010d281846020870162000ce9565b9190910192915050565b610bae80620010ec6000396000f3fe60806040526004361061004e5760003560e01c806301ffc9a7146100d457806352ef6b2c146101095780637a0ed6271461012b578063adfca15e1461014d578063cdffacc61461017a57610055565b3661005557005b600080356001600160e01b03191681527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c803b6100b0576040516321f27f0d60e21b815260040160405180910390fd5b3660008037600080366000845af43d6000803e8080156100cf573d6000f35b3d6000fd5b3480156100e057600080fd5b506100f46100ef366004610982565b6101b8565b60405190151581526020015b60405180910390f35b34801561011557600080fd5b5061011e6101c9565b60405161010091906109b3565b34801561013757600080fd5b5061014061036c565b6040516101009190610a45565b34801561015957600080fd5b5061016d610168366004610ac2565b610794565b6040516101009190610aeb565b34801561018657600080fd5b5061019a610195366004610982565b6108e0565b6040516001600160a01b039091168152602001610100565b3b151590565b60006101c382610955565b92915050565b606060006101d5610931565b600181015490915061ffff1667ffffffffffffffff8111156101f9576101f9610afe565b604051908082528060200260200182016040528015610222578160200160208202803683370190505b50915060008060005b600184015461ffff16821015610364576000818152600285016020526040812054905b600881101561034f578361026181610b2a565b600188015490955061ffff168511905061034f57600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b888110156102f2578a81815181106102b7576102b7610b43565b60200260200101516001600160a01b0316836001600160a01b0316036102e057600191506102f2565b806102ea81610b2a565b91505061029d565b5080156103015750505061033d565b818a898151811061031457610314610b43565b6001600160a01b03909216602092830291909101909101528761033681610b2a565b9850505050505b8061034781610b2a565b91505061024e565b5050808061035c90610b2a565b91505061022b565b505082525090565b60606000610378610931565b600181015490915061ffff1667ffffffffffffffff81111561039c5761039c610afe565b6040519080825280602002602001820160405280156103e257816020015b6040805180820190915260008152606060208201528152602001906001900390816103ba5790505b50600182015490925060009061ffff1667ffffffffffffffff81111561040a5761040a610afe565b604051908082528060200260200182016040528015610433578160200160208202803683370190505b50905060008060005b600185015461ffff16821015610722576000818152600286016020526040812054905b600881101561070d578361047281610b2a565b600189015490955061ffff168511905061070d57600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b888110156105cb57826001600160a01b03168c82815181106104d2576104d2610b43565b6020026020010151600001516001600160a01b0316036105b957838c82815181106104ff576104ff610b43565b6020026020010151602001518b838151811061051d5761051d610b43565b602002602001015160ff168151811061053857610538610b43565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8a828151811061056e5761056e610b43565b602002602001015160ff161061058357600080fd5b89818151811061059557610595610b43565b6020026020010180518091906105aa90610b59565b60ff16905250600191506105cb565b806105c381610b2a565b9150506104ae565b5080156105da575050506106fb565b818b89815181106105ed576105ed610b43565b60209081029190910101516001600160a01b03909116905260018a015461ffff1667ffffffffffffffff81111561062657610626610afe565b60405190808252806020026020018201604052801561064f578160200160208202803683370190505b508b898151811061066257610662610b43565b602002602001015160200181905250828b898151811061068457610684610b43565b6020026020010151602001516000815181106106a2576106a2610b43565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018989815181106106d8576106d8610b43565b60ff90921660209283029190910190910152876106f481610b2a565b9850505050505b8061070581610b2a565b91505061045f565b5050808061071a90610b2a565b91505061043c565b5060005b8281101561078957600084828151811061074257610742610b43565b602002602001015160ff169050600087838151811061076357610763610b43565b60200260200101516020015190508181525050808061078190610b2a565b915050610726565b508185525050505090565b606060006107a0610931565b600181015490915061ffff1667ffffffffffffffff8111156107c4576107c4610afe565b6040519080825280602002602001820160405280156107ed578160200160208202803683370190505b50915060008060005b600184015461ffff168210156108d6576000818152600285016020526040812054905b60088110156108c1578361082c81610b2a565b600188015490955061ffff16851190506108c157600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a16036108ae578088878151811061088757610887610b43565b6001600160e01b031990921660209283029190910190910152856108aa81610b2a565b9650505b50806108b981610b2a565b915050610819565b505080806108ce90610b2a565b9150506107f6565b5050825250919050565b60006108ea610931565b6001600160e01b0319909216600090815260209290925250604090205460601c90565b7ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d890565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b600061095f61090d565b6001600160e01b0319909216600090815260209290925250604090205460ff1690565b60006020828403121561099457600080fd5b81356001600160e01b0319811681146109ac57600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156109f45783516001600160a01b0316835292840192918401916001016109cf565b50909695505050505050565b600081518084526020808501945080840160005b83811015610a3a5781516001600160e01b03191687529582019590820190600101610a14565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610ab457888303603f19018552815180516001600160a01b03168452870151878401879052610aa187850182610a00565b9588019593505090860190600101610a6c565b509098975050505050505050565b600060208284031215610ad457600080fd5b81356001600160a01b03811681146109ac57600080fd5b6020815260006109ac6020830184610a00565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610b3c57610b3c610b14565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff8103610b6f57610b6f610b14565b6001019291505056fea26469706673582212205a9cf23720bac5df7221f3ba3484bd230ef637150fc5e233df87fe15b58ef8dc64736f6c63430008110033a264697066735822122044490ceaf5cf6289e178fc6f05a779a302785119bed64f98b171e68d2fac7ea164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
