{
  "address": "0x798Dd59407B50BCaDa5F53df7F2792533E787877",
  "abi": [
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintUtils__InsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_allowAny",
          "type": "bool"
        }
      ],
      "name": "AllowAnyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "Allowlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "Unallowlisted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addToAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowAny",
          "type": "bool"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "initializeAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "allowAny",
          "type": "bool"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "initializeAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeFromAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_allowAny",
          "type": "bool"
        }
      ],
      "name": "setAllowAny",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d473f26430608d2fc73e91266f55d7306df4d811a3f7b3d648f3622e9d956bf",
  "receipt": {
    "to": null,
    "from": "0xfF5Be16460704eFd0263dB1444Eaa216b77477c5",
    "contractAddress": "0x798Dd59407B50BCaDa5F53df7F2792533E787877",
    "transactionIndex": 38,
    "gasUsed": "729439",
    "logsBloom": "0x
    "blockHash": "0x4472fbfb8c08486056415f84cc7724407a4f81a13fdfcf0a94734b27efb25c4f",
    "transactionHash": "0x9d473f26430608d2fc73e91266f55d7306df4d811a3f7b3d648f3622e9d956bf",
    "logs": [],
    "blockNumber": 9268435,
    "cumulativeGasUsed": "10042396",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "4af5e4fd5a2a3b80cb4af54040e461f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_allowAny\",\"type\":\"bool\"}],\"name\":\"AllowAnyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Allowlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Unallowlisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowAny\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"initializeAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allowAny\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"initializeAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowAny\",\"type\":\"bool\"}],\"name\":\"setAllowAny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Allows owner to set an allowlist of addresses\",\"kind\":\"dev\",\"methods\":{},\"title\":\"AllowlistFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addToAllowlist(address)\":{\"notice\":\"Add to allowlist\"},\"initializeAllowlist(address,bool,address[])\":{\"notice\":\"Initialize allowlist with owner\"},\"initializeAllowlist(bool,address[])\":{\"notice\":\"Initialize allowlist\"},\"isAllowed(address)\":{\"notice\":\"Check if address is allowed\"},\"removeFromAllowlist(address)\":{\"notice\":\"Remove from allowlist\"},\"setAllowAny(bool)\":{\"notice\":\"Set allow any\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/allowlist/facets/AllowlistFacet.sol\":\"AllowlistFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xba7b4d73d42dfc9f8083ce36aed0fa2c56c73878d8bda7d64f2fb908d5e04636\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/allowlist/AllowlistReadableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { EnumerableSet } from '@solidstate/contracts/data/EnumerableSet.sol';\\nimport { AllowlistStorage } from './AllowlistStorage.sol';\\n\\n/**\\n * @title AllowlistReadableInternal\\n */\\nabstract contract AllowlistReadableInternal {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Check if address is allowed\\n     */\\n    function _isAllowed(address _address) internal view returns (bool) {\\n        AllowlistStorage.Layout storage l = AllowlistStorage.layout();\\n\\n        if (l.allowAny) {\\n            return true;\\n        }\\n        return l.allowlist.contains(_address);\\n    }\\n}\\n\",\"keccak256\":\"0xed0339920b6e7326b4f9d3ba810fa819cfe4f00a9c7d95f355a6a0f966e77965\",\"license\":\"MIT\"},\"contracts/allowlist/AllowlistStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { EnumerableSet } from '@solidstate/contracts/data/EnumerableSet.sol';\\n\\n/**\\n * @title AllowlistStorage\\n */\\nlibrary AllowlistStorage {\\n    struct Layout {\\n        bool isInitialized;\\n        bool allowAny;\\n        EnumerableSet.AddressSet allowlist;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256('pcoart.contracts.storage.AllowlistStorage');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7ea06a679468f6853ca93df331ea5b7e3e4b939f0d61d7b9596a46111d5da4df\",\"license\":\"MIT\"},\"contracts/allowlist/AllowlistWritableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { EnumerableSet } from '@solidstate/contracts/data/EnumerableSet.sol';\\nimport { AllowlistStorage } from './AllowlistStorage.sol';\\nimport { IAllowlistWritableInternal } from './IAllowlistWritableInternal.sol';\\n\\n/**\\n * @title AllowlistWritableInternal\\n */\\nabstract contract AllowlistWritableInternal is IAllowlistWritableInternal {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Initialize allowlist\\n     */\\n    function _initializeAllowlist(\\n        bool _allowAny,\\n        address[] memory _addresses\\n    ) internal {\\n        AllowlistStorage.Layout storage l = AllowlistStorage.layout();\\n\\n        l.isInitialized = true;\\n\\n        _setAllowAny(_allowAny);\\n\\n        for (uint256 i; i < _addresses.length; i++) {\\n            l.allowlist.add(_addresses[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if initialized\\n     */\\n    function _isInitialized() internal view returns (bool) {\\n        return AllowlistStorage.layout().isInitialized;\\n    }\\n\\n    /**\\n     * @notice Set allow any\\n     */\\n    function _setAllowAny(bool _allowAny) internal {\\n        AllowlistStorage.Layout storage l = AllowlistStorage.layout();\\n\\n        l.allowAny = _allowAny;\\n\\n        emit AllowAnyUpdated(_allowAny);\\n    }\\n\\n    /**\\n     * @notice Add to allowlist\\n     */\\n    function _addToAllowlist(address _address) internal {\\n        AllowlistStorage.Layout storage l = AllowlistStorage.layout();\\n\\n        l.allowlist.add(_address);\\n\\n        emit Allowlisted(_address);\\n    }\\n\\n    /**\\n     * @notice Remove from allowlist\\n     */\\n    function _removeFromAllowlist(address _address) internal {\\n        AllowlistStorage.Layout storage l = AllowlistStorage.layout();\\n\\n        l.allowlist.remove(_address);\\n\\n        emit Unallowlisted(_address);\\n    }\\n}\\n\",\"keccak256\":\"0x3c00ff85e04cb38fe13ad0ea9f7652d32e84996ed2d0b785d098400ee0e40310\",\"license\":\"MIT\"},\"contracts/allowlist/IAllowlistReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/**\\n * @title IAllowlistReadable\\n */\\ninterface IAllowlistReadable {\\n    /**\\n     * @notice Check if address is allowed\\n     */\\n    function isAllowed(address _address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6e8241b3bfa7a83ab1111191d049cd41cc672df0d4dea0581696efdc20aefd82\",\"license\":\"MIT\"},\"contracts/allowlist/IAllowlistWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/**\\n * @title IAllowlistWritable\\n */\\ninterface IAllowlistWritable {\\n    /**\\n     * @notice Set allow any\\n     */\\n    function setAllowAny(bool _allowAny) external;\\n\\n    /**\\n     * @notice Add to allowlist\\n     */\\n    function addToAllowlist(address _address) external;\\n\\n    /**\\n     * @notice Remove from allowlist\\n     */\\n    function removeFromAllowlist(address _address) external;\\n}\\n\",\"keccak256\":\"0xddf372eba5c1f3d9ccffaa6de30e00e901e5d4868ecd3ac0055563344894a502\",\"license\":\"MIT\"},\"contracts/allowlist/IAllowlistWritableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/**\\n * @title IAllowlistWritableInternal\\n */\\ninterface IAllowlistWritableInternal {\\n    event Allowlisted(address indexed _address);\\n\\n    event Unallowlisted(address indexed _address);\\n\\n    event AllowAnyUpdated(bool indexed _allowAny);\\n}\\n\",\"keccak256\":\"0x23ef3d774d6dd0564e1f47a0ecf245ca4ddbb29cdbff57b83e2f8247a4981976\",\"license\":\"MIT\"},\"contracts/allowlist/facets/AllowlistFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { EnumerableSet } from '@solidstate/contracts/data/EnumerableSet.sol';\\nimport { IAllowlistWritable } from '../IAllowlistWritable.sol';\\nimport { AllowlistStorage } from '../AllowlistStorage.sol';\\nimport { AllowlistReadableInternal } from '../AllowlistReadableInternal.sol';\\nimport { AllowlistWritableInternal } from '../AllowlistWritableInternal.sol';\\nimport { ERC165BaseInternal } from '@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol';\\nimport { AccessControlInternal } from '@solidstate/contracts/access/access_control/AccessControlInternal.sol';\\nimport { IAllowlistReadable } from '../IAllowlistReadable.sol';\\n\\n/**\\n * @title AllowlistFacet\\n * @dev Allows owner to set an allowlist of addresses\\n */\\ncontract AllowlistFacet is\\n    AccessControlInternal,\\n    IAllowlistWritable,\\n    IAllowlistReadable,\\n    AllowlistReadableInternal,\\n    AllowlistWritableInternal,\\n    ERC165BaseInternal\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Component role\\n    bytes32 internal constant COMPONENT_ROLE =\\n        keccak256('AllowlistFacet.COMPONENT_ROLE');\\n\\n    /**\\n     * @notice Initialize allowlist\\n     */\\n    function initializeAllowlist(\\n        bool allowAny,\\n        address[] memory _addresses\\n    ) external {\\n        require(\\n            _isInitialized() == false,\\n            'AllowlistFacet: already initialized'\\n        );\\n\\n        _setSupportsInterface(type(IAllowlistReadable).interfaceId, true);\\n        _initializeAllowlist(allowAny, _addresses);\\n    }\\n\\n    /**\\n     * @notice Initialize allowlist with owner\\n     */\\n    function initializeAllowlist(\\n        address _owner,\\n        bool allowAny,\\n        address[] memory _addresses\\n    ) external {\\n        require(\\n            _isInitialized() == false,\\n            'AllowlistFacet: already initialized'\\n        );\\n\\n        _setSupportsInterface(type(IAllowlistReadable).interfaceId, true);\\n        _setSupportsInterface(type(IAllowlistWritable).interfaceId, true);\\n        _grantRole(COMPONENT_ROLE, _owner);\\n        _initializeAllowlist(allowAny, _addresses);\\n    }\\n\\n    /**\\n     * @notice Check if address is allowed\\n     */\\n    function isAllowed(address _address) external view returns (bool) {\\n        return _isAllowed(_address);\\n    }\\n\\n    /**\\n     * @notice Set allow any\\n     */\\n    function setAllowAny(bool _allowAny) external onlyRole(COMPONENT_ROLE) {\\n        return _setAllowAny(_allowAny);\\n    }\\n\\n    /**\\n     * @notice Add to allowlist\\n     */\\n    function addToAllowlist(\\n        address _address\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        return _addToAllowlist(_address);\\n    }\\n\\n    /**\\n     * @notice Remove from allowlist\\n     */\\n    function removeFromAllowlist(\\n        address _address\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        return _removeFromAllowlist(_address);\\n    }\\n}\\n\",\"keccak256\":\"0x98a961802ecc8c30fef7258254f8c25111c424a2a804692b3854e324e1c24999\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c3c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806329953efa146100675780635da93d7e1461007c5780639371ff2d1461008f578063a1ecb276146100a2578063babcc539146100b5578063f8e86ece146100dc575b600080fd5b61007a610075366004610881565b6100ef565b005b61007a61008a3660046108b3565b610114565b61007a61009d366004610986565b610135565b61007a6100b03660046109e4565b6101b9565b6100c86100c33660046108b3565b610205565b604051901515815260200160405180910390f35b61007a6100ea3660046108b3565b610216565b600080516020610bc783398151915261010781610237565b61011082610244565b5050565b600080516020610bc783398151915261012c81610237565b61011082610296565b600080516020610be78339815191525460ff161561016e5760405162461bcd60e51b815260040161016590610a32565b60405180910390fd5b61018063babcc53960e01b6001610308565b61019263466a36a560e11b6001610308565b6101aa600080516020610bc78339815191528461037e565b6101b482826103f2565b505050565b600080516020610be78339815191525460ff16156101e95760405162461bcd60e51b815260040161016590610a32565b6101fb63babcc53960e01b6001610308565b61011082826103f2565b600061021082610469565b92915050565b600080516020610bc783398151915261022e81610237565b610110826104a8565b610241813361051a565b50565b600080516020610be7833981519152805461ff0019166101008315159081029190911782556040517f20a26f70c17ef9c9bac355de2d5319262bc14d5476e4e9a379fa663ef172486e90600090a25050565b600080516020610be78339815191526102cf7f9fca1883cea1af9526093bc3a6f14a88fc5b5aaf6b6820bb26ccaa4c275327c58361057c565b506040516001600160a01b038316907fe5058b95b8b6a8d48a6d241621ef523fab84db6043988a2f925baebedaa7883890600090a25050565b6001600160e01b031980831690036103335760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604090206103b59082610591565b5060405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b600080516020610be7833981519152805460ff1916600117815561041583610244565b60005b82518110156104635761045083828151811061043657610436610a75565b60200260200101518360010161059190919063ffffffff16565b508061045b81610aa1565b915050610418565b50505050565b600080516020610be7833981519152805460009190610100900460ff16156104945750600192915050565b6104a160018201846105a6565b9392505050565b600080516020610be78339815191526104e17f9fca1883cea1af9526093bc3a6f14a88fc5b5aaf6b6820bb26ccaa4c275327c583610591565b506040516001600160a01b038316907f7eb3c7851085a7c7e2aa1a622201d2fcd72a7edf43e9321c62367687b30bb76f90600090a25050565b61052482826105c8565b6101105761053a816001600160a01b03166105ff565b610545836020610611565b604051602001610556929190610ade565b60408051601f198184030181529082905262461bcd60e51b825261016591600401610b53565b60006104a1836001600160a01b038416610764565b60006104a1836001600160a01b038416610829565b6001600160a01b038116600090815260018301602052604081205415156104a1565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604081206104a190836105a6565b60606102106001600160a01b03831660145b60606000610620836002610b86565b61062b906002610b9d565b67ffffffffffffffff811115610643576106436108ce565b6040519080825280601f01601f19166020018201604052801561066d576020820181803683370190505b509050600360fc1b8160008151811061068857610688610a75565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106106b7576106b7610a75565b60200101906001600160f81b031916908160001a905350600160028402015b6001811115610744576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061070757610707610a75565b1a60f81b82828151811061071d5761071d610a75565b60200101906001600160f81b031916908160001a90535060049490941c93600019016106d6565b5083156104a15760405163c913478560e01b815260040160405180910390fd5b600081815260018301602052604081205480156108225783546000908590600019810190811061079657610796610a75565b90600052602060002001549050808560000160018403815481106107bc576107bc610a75565b60009182526020808320909101929092559182526001860190526040902081905583548490806107ee576107ee610bb0565b6001900381819060005260206000200160009055905583600101600084815260200190815260200160002060009055600191505b5092915050565b6000818152600183016020526040812054610210575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b8035801515811461087c57600080fd5b919050565b60006020828403121561089357600080fd5b6104a18261086c565b80356001600160a01b038116811461087c57600080fd5b6000602082840312156108c557600080fd5b6104a18261089c565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126108f557600080fd5b8135602067ffffffffffffffff80831115610912576109126108ce565b8260051b604051601f19603f83011681018181108482111715610937576109376108ce565b60405293845285810183019383810192508785111561095557600080fd5b83870191505b8482101561097b5761096c8261089c565b8352918301919083019061095b565b979650505050505050565b60008060006060848603121561099b57600080fd5b6109a48461089c565b92506109b26020850161086c565b9150604084013567ffffffffffffffff8111156109ce57600080fd5b6109da868287016108e4565b9150509250925092565b600080604083850312156109f757600080fd5b610a008361086c565b9150602083013567ffffffffffffffff811115610a1c57600080fd5b610a28858286016108e4565b9150509250929050565b60208082526023908201527f416c6c6f776c69737446616365743a20616c726561647920696e697469616c696040820152621e995960ea1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610ab357610ab3610a8b565b5060010190565b60005b83811015610ad5578181015183820152602001610abd565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610b16816017850160208801610aba565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610b47816028840160208801610aba565b01602801949350505050565b6020815260008251806020840152610b72816040850160208701610aba565b601f01601f19169190910160400192915050565b808202811582820484141761021057610210610a8b565b8082018082111561021057610210610a8b565b634e487b7160e01b600052603160045260246000fdfe18442e22641370002622a608e197db432d3d4c113dab8ef4bf55fdc4eeed18699fca1883cea1af9526093bc3a6f14a88fc5b5aaf6b6820bb26ccaa4c275327c4a2646970667358221220216cbdfe2fd08d32ded395527cc26aef3a81f0584d797e2413a428d7d60da8b064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806329953efa146100675780635da93d7e1461007c5780639371ff2d1461008f578063a1ecb276146100a2578063babcc539146100b5578063f8e86ece146100dc575b600080fd5b61007a610075366004610881565b6100ef565b005b61007a61008a3660046108b3565b610114565b61007a61009d366004610986565b610135565b61007a6100b03660046109e4565b6101b9565b6100c86100c33660046108b3565b610205565b604051901515815260200160405180910390f35b61007a6100ea3660046108b3565b610216565b600080516020610bc783398151915261010781610237565b61011082610244565b5050565b600080516020610bc783398151915261012c81610237565b61011082610296565b600080516020610be78339815191525460ff161561016e5760405162461bcd60e51b815260040161016590610a32565b60405180910390fd5b61018063babcc53960e01b6001610308565b61019263466a36a560e11b6001610308565b6101aa600080516020610bc78339815191528461037e565b6101b482826103f2565b505050565b600080516020610be78339815191525460ff16156101e95760405162461bcd60e51b815260040161016590610a32565b6101fb63babcc53960e01b6001610308565b61011082826103f2565b600061021082610469565b92915050565b600080516020610bc783398151915261022e81610237565b610110826104a8565b610241813361051a565b50565b600080516020610be7833981519152805461ff0019166101008315159081029190911782556040517f20a26f70c17ef9c9bac355de2d5319262bc14d5476e4e9a379fa663ef172486e90600090a25050565b600080516020610be78339815191526102cf7f9fca1883cea1af9526093bc3a6f14a88fc5b5aaf6b6820bb26ccaa4c275327c58361057c565b506040516001600160a01b038316907fe5058b95b8b6a8d48a6d241621ef523fab84db6043988a2f925baebedaa7883890600090a25050565b6001600160e01b031980831690036103335760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604090206103b59082610591565b5060405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b600080516020610be7833981519152805460ff1916600117815561041583610244565b60005b82518110156104635761045083828151811061043657610436610a75565b60200260200101518360010161059190919063ffffffff16565b508061045b81610aa1565b915050610418565b50505050565b600080516020610be7833981519152805460009190610100900460ff16156104945750600192915050565b6104a160018201846105a6565b9392505050565b600080516020610be78339815191526104e17f9fca1883cea1af9526093bc3a6f14a88fc5b5aaf6b6820bb26ccaa4c275327c583610591565b506040516001600160a01b038316907f7eb3c7851085a7c7e2aa1a622201d2fcd72a7edf43e9321c62367687b30bb76f90600090a25050565b61052482826105c8565b6101105761053a816001600160a01b03166105ff565b610545836020610611565b604051602001610556929190610ade565b60408051601f198184030181529082905262461bcd60e51b825261016591600401610b53565b60006104a1836001600160a01b038416610764565b60006104a1836001600160a01b038416610829565b6001600160a01b038116600090815260018301602052604081205415156104a1565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604081206104a190836105a6565b60606102106001600160a01b03831660145b60606000610620836002610b86565b61062b906002610b9d565b67ffffffffffffffff811115610643576106436108ce565b6040519080825280601f01601f19166020018201604052801561066d576020820181803683370190505b509050600360fc1b8160008151811061068857610688610a75565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106106b7576106b7610a75565b60200101906001600160f81b031916908160001a905350600160028402015b6001811115610744576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061070757610707610a75565b1a60f81b82828151811061071d5761071d610a75565b60200101906001600160f81b031916908160001a90535060049490941c93600019016106d6565b5083156104a15760405163c913478560e01b815260040160405180910390fd5b600081815260018301602052604081205480156108225783546000908590600019810190811061079657610796610a75565b90600052602060002001549050808560000160018403815481106107bc576107bc610a75565b60009182526020808320909101929092559182526001860190526040902081905583548490806107ee576107ee610bb0565b6001900381819060005260206000200160009055905583600101600084815260200190815260200160002060009055600191505b5092915050565b6000818152600183016020526040812054610210575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b8035801515811461087c57600080fd5b919050565b60006020828403121561089357600080fd5b6104a18261086c565b80356001600160a01b038116811461087c57600080fd5b6000602082840312156108c557600080fd5b6104a18261089c565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126108f557600080fd5b8135602067ffffffffffffffff80831115610912576109126108ce565b8260051b604051601f19603f83011681018181108482111715610937576109376108ce565b60405293845285810183019383810192508785111561095557600080fd5b83870191505b8482101561097b5761096c8261089c565b8352918301919083019061095b565b979650505050505050565b60008060006060848603121561099b57600080fd5b6109a48461089c565b92506109b26020850161086c565b9150604084013567ffffffffffffffff8111156109ce57600080fd5b6109da868287016108e4565b9150509250925092565b600080604083850312156109f757600080fd5b610a008361086c565b9150602083013567ffffffffffffffff811115610a1c57600080fd5b610a28858286016108e4565b9150509250929050565b60208082526023908201527f416c6c6f776c69737446616365743a20616c726561647920696e697469616c696040820152621e995960ea1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610ab357610ab3610a8b565b5060010190565b60005b83811015610ad5578181015183820152602001610abd565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610b16816017850160208801610aba565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610b47816028840160208801610aba565b01602801949350505050565b6020815260008251806020840152610b72816040850160208701610aba565b601f01601f19169190910160400192915050565b808202811582820484141761021057610210610a8b565b8082018082111561021057610210610a8b565b634e487b7160e01b600052603160045260246000fdfe18442e22641370002622a608e197db432d3d4c113dab8ef4bf55fdc4eeed18699fca1883cea1af9526093bc3a6f14a88fc5b5aaf6b6820bb26ccaa4c275327c4a2646970667358221220216cbdfe2fd08d32ded395527cc26aef3a81f0584d797e2413a428d7d60da8b064736f6c63430008110033",
  "devdoc": {
    "details": "Allows owner to set an allowlist of addresses",
    "kind": "dev",
    "methods": {},
    "title": "AllowlistFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addToAllowlist(address)": {
        "notice": "Add to allowlist"
      },
      "initializeAllowlist(address,bool,address[])": {
        "notice": "Initialize allowlist with owner"
      },
      "initializeAllowlist(bool,address[])": {
        "notice": "Initialize allowlist"
      },
      "isAllowed(address)": {
        "notice": "Check if address is allowed"
      },
      "removeFromAllowlist(address)": {
        "notice": "Remove from allowlist"
      },
      "setAllowAny(bool)": {
        "notice": "Set allow any"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
