{
  "address": "0xebe5138a89B27A95199B54130bC18234bcD0A1c1",
  "abi": [
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintUtils__InsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "auctionEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionLengthSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bidExtensionSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bidExtensionWindowLengthSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "bidOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEnglishPeriodicAuctionInternal.Bid",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateFeeFromBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentBid",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEnglishPeriodicAuctionInternal.Bid",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highestBid",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bidAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEnglishPeriodicAuctionInternal.Bid",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_repossessor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialBidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startingBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionLengthSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBidIncrement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidExtensionWindowLengthSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidExtensionSeconds",
          "type": "uint256"
        }
      ],
      "name": "initializeAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_repossessor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialBidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startingBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionLengthSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBidIncrement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidExtensionWindowLengthSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidExtensionSeconds",
          "type": "uint256"
        }
      ],
      "name": "initializeAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAuctionPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isReadyForTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBidIncrement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repossessor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionLengthSeconds",
          "type": "uint256"
        }
      ],
      "name": "setAuctionLengthSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidExtensionSeconds",
          "type": "uint256"
        }
      ],
      "name": "setBidExtensionSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidExtensionWindowLengthSeconds",
          "type": "uint256"
        }
      ],
      "name": "setBidExtensionWindowLengthSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBidIncrement",
          "type": "uint256"
        }
      ],
      "name": "setMinBidIncrement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_repossessor",
          "type": "address"
        }
      ],
      "name": "setRepossessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b0e6778a32b1f548eae96c8f17a4acf8db37baad44365fe1df8001646a04e4c",
  "receipt": {
    "to": null,
    "from": "0xfF5Be16460704eFd0263dB1444Eaa216b77477c5",
    "contractAddress": "0xebe5138a89B27A95199B54130bC18234bcD0A1c1",
    "transactionIndex": 29,
    "gasUsed": "1738693",
    "logsBloom": "0x
    "blockHash": "0x251ad0df1bfb29d6a96a78e15a6fa7cc65f81a1511ee42daa12ebe5242444eb6",
    "transactionHash": "0x7b0e6778a32b1f548eae96c8f17a4acf8db37baad44365fe1df8001646a04e4c",
    "logs": [],
    "blockNumber": 9228792,
    "cumulativeGasUsed": "17196632",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "789160661a9bb39270968ba00bb416c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auctionEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionLengthSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidExtensionSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidExtensionWindowLengthSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"bidOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IEnglishPeriodicAuctionInternal.Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"calculateFeeFromBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBid\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IEnglishPeriodicAuctionInternal.Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestBid\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IEnglishPeriodicAuctionInternal.Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_repossessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startingBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionLengthSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidExtensionWindowLengthSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidExtensionSeconds\",\"type\":\"uint256\"}],\"name\":\"initializeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_repossessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startingBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionLengthSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidExtensionWindowLengthSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidExtensionSeconds\",\"type\":\"uint256\"}],\"name\":\"initializeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAuctionPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReadyForTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repossessor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionLengthSeconds\",\"type\":\"uint256\"}],\"name\":\"setAuctionLengthSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidExtensionSeconds\",\"type\":\"uint256\"}],\"name\":\"setBidExtensionSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidExtensionWindowLengthSeconds\",\"type\":\"uint256\"}],\"name\":\"setBidExtensionWindowLengthSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBidIncrement\",\"type\":\"uint256\"}],\"name\":\"setMinBidIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_repossessor\",\"type\":\"address\"}],\"name\":\"setRepossessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}}},\"title\":\"EnglishPeriodicAuctionFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"auctionEndTime()\":{\"notice\":\"Get auction end time\"},\"auctionLengthSeconds()\":{\"notice\":\"Get auction length\"},\"auctionStartTime()\":{\"notice\":\"Get auction start time\"},\"bidExtensionSeconds()\":{\"notice\":\"Get bid extension seconds\"},\"bidExtensionWindowLengthSeconds()\":{\"notice\":\"Get bid extension window length\"},\"bidOf(address)\":{\"notice\":\"Get bid for address\"},\"calculateFeeFromBid(uint256)\":{\"notice\":\"Calculate fee from bid\"},\"closeAuction()\":{\"notice\":\"Close auction and trigger a transfer to the highest bidder\"},\"currentBid()\":{\"notice\":\"Get current bid\"},\"highestBid()\":{\"notice\":\"Get highest outstanding bid\"},\"initializeAuction(address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize auction parameters with owner\"},\"initializeAuction(address,address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize auction parameters\"},\"isAuctionPeriod()\":{\"notice\":\"Get is auction period\"},\"isReadyForTransfer()\":{\"notice\":\"Is token ready for transfer\"},\"minBidIncrement()\":{\"notice\":\"Get minimum bid increment\"},\"placeBid(uint256)\":{\"notice\":\"Place a bid\"},\"repossessor()\":{\"notice\":\"Get repossessor\"},\"setAuctionLengthSeconds(uint256)\":{\"notice\":\"Set auction length\"},\"setBidExtensionSeconds(uint256)\":{\"notice\":\"Set bid extension seconds\"},\"setBidExtensionWindowLengthSeconds(uint256)\":{\"notice\":\"Set bid extension window length\"},\"setMinBidIncrement(uint256)\":{\"notice\":\"Set minimum bid increment\"},\"setRepossessor(address)\":{\"notice\":\"Set repossessor\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"withdrawBid()\":{\"notice\":\"Withdraw bid collateral\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/auction/facets/EnglishPeriodicAuctionFacet.sol\":\"EnglishPeriodicAuctionFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC721Internal } from './IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721 is IERC721Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given address\\n     * @return balance quantity of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice query the owner of given token\\n     * @param tokenId token to query\\n     * @return owner token owner\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice grant approval to given account to spend token\\n     * @param operator address to be approved\\n     * @param tokenId token to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external payable;\\n\\n    /**\\n     * @notice get approval status for given token\\n     * @param tokenId token to query\\n     * @return operator address approved to spend token\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given account to spend all tokens held by sender\\n     * @param operator address to be approved\\n     * @param status approval status\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return status whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool status);\\n}\\n\",\"keccak256\":\"0xa14655a5bdee327bc019b583b04480e8542fa6b0788e5569077ec54805d1463a\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC721 interface needed by internal functions\\n */\\ninterface IERC721Internal {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed operator,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x8d46d596fa0e48cdcbf8bb8d6a42120351c4d1b002156bf647f95523178cbe08\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165Base } from './IERC165Base.sol';\\nimport { ERC165BaseInternal } from './ERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165Base is IERC165Base, ERC165BaseInternal {\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return _supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3f2268856fdd9b27946adc65010bc83992069a90034bf692ab630802a926a9c2\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xba7b4d73d42dfc9f8083ce36aed0fa2c56c73878d8bda7d64f2fb908d5e04636\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\n\\ninterface IERC165Base is IERC165, IERC165BaseInternal {}\\n\",\"keccak256\":\"0x288c50013c735cf30be90eb084589fc54bc0ee77a88ec69c3cc1efb11d7dccf4\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/allowlist/IAllowlistReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IAllowlistReadable\\n */\\ninterface IAllowlistReadable {\\n    /**\\n     * @notice Check if address is allowed\\n     */\\n    function isAllowed(address _address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6e8241b3bfa7a83ab1111191d049cd41cc672df0d4dea0581696efdc20aefd82\",\"license\":\"MIT\"},\"contracts/auction/EnglishPeriodicAuctionInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { EnglishPeriodicAuctionStorage } from './EnglishPeriodicAuctionStorage.sol';\\nimport { IPeriodicPCOParamsReadable } from '../pco/IPeriodicPCOParamsReadable.sol';\\nimport { IStewardLicense } from '../license/IStewardLicense.sol';\\nimport { IBeneficiary } from '../beneficiary/IBeneficiary.sol';\\nimport { IEnglishPeriodicAuctionInternal } from './IEnglishPeriodicAuctionInternal.sol';\\n\\n/**\\n * @title EnglishPeriodicAuctionInternal\\n */\\nabstract contract EnglishPeriodicAuctionInternal is\\n    IEnglishPeriodicAuctionInternal\\n{\\n    /**\\n     * @notice Initialize parameters\\n     */\\n    function _initializeAuction(\\n        address repossessor,\\n        address initialBidder,\\n        uint256 startingBid,\\n        uint256 auctionLengthSeconds,\\n        uint256 minBidIncrement,\\n        uint256 bidExtensionWindowLengthSeconds,\\n        uint256 bidExtensionSeconds\\n    ) internal {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        l.isInitialized = true;\\n        _setRepossessor(repossessor);\\n        _setAuctionLengthSeconds(auctionLengthSeconds);\\n        _setMinBidIncrement(minBidIncrement);\\n        _setBidExtensionWindowLengthSeconds(bidExtensionWindowLengthSeconds);\\n        _setBidExtensionSeconds(bidExtensionSeconds);\\n        l.currentAuctionLength = auctionLengthSeconds;\\n        l.currentAuctionRound = 1;\\n\\n        l.currentBid.round = 1;\\n        l.currentBid.bidder = initialBidder;\\n        l.currentBid.bidAmount = startingBid;\\n        l.currentBid.collateralAmount = 0;\\n        l.currentBid.feeAmount = 0;\\n        l.bids[initialBidder] = l.currentBid;\\n\\n        l.highestBid.bidder = repossessor;\\n    }\\n\\n    /**\\n     * @notice Check if initialized\\n     */\\n    function _isInitialized() internal view returns (bool) {\\n        return EnglishPeriodicAuctionStorage.layout().isInitialized;\\n    }\\n\\n    /**\\n     * @notice Get repossessor\\n     */\\n    function _repossessor() internal view returns (address) {\\n        return EnglishPeriodicAuctionStorage.layout().repossessor;\\n    }\\n\\n    /**\\n     * @notice Set repossessor\\n     */\\n    function _setRepossessor(address repossessor) internal {\\n        EnglishPeriodicAuctionStorage.layout().repossessor = repossessor;\\n    }\\n\\n    /**\\n     * @notice Get auction length\\n     */\\n    function _auctionLengthSeconds() internal view returns (uint256) {\\n        return EnglishPeriodicAuctionStorage.layout().auctionLengthSeconds;\\n    }\\n\\n    /**\\n     * @notice Set auction length\\n     */\\n    function _setAuctionLengthSeconds(uint256 auctionLengthSeconds) internal {\\n        EnglishPeriodicAuctionStorage\\n            .layout()\\n            .auctionLengthSeconds = auctionLengthSeconds;\\n    }\\n\\n    /**\\n     * @notice Get minimum bid increment\\n     */\\n    function _minBidIncrement() internal view returns (uint256) {\\n        return EnglishPeriodicAuctionStorage.layout().minBidIncrement;\\n    }\\n\\n    /**\\n     * @notice Set minimum bid increment\\n     */\\n    function _setMinBidIncrement(uint256 minBidIncrement) internal {\\n        EnglishPeriodicAuctionStorage\\n            .layout()\\n            .minBidIncrement = minBidIncrement;\\n    }\\n\\n    /**\\n     * @notice Get bid extension window length\\n     */\\n    function _bidExtensionWindowLengthSeconds()\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            EnglishPeriodicAuctionStorage\\n                .layout()\\n                .bidExtensionWindowLengthSeconds;\\n    }\\n\\n    /**\\n     * @notice Set bid extension window length\\n     */\\n    function _setBidExtensionWindowLengthSeconds(\\n        uint256 bidExtensionWindowLengthSeconds\\n    ) internal {\\n        EnglishPeriodicAuctionStorage\\n            .layout()\\n            .bidExtensionWindowLengthSeconds = bidExtensionWindowLengthSeconds;\\n    }\\n\\n    /**\\n     * @notice Get bid extension\\n     */\\n    function _bidExtensionSeconds() internal view returns (uint256) {\\n        return EnglishPeriodicAuctionStorage.layout().bidExtensionSeconds;\\n    }\\n\\n    /**\\n     * @notice Set bid extension\\n     */\\n    function _setBidExtensionSeconds(uint256 bidExtensionSeconds) internal {\\n        EnglishPeriodicAuctionStorage\\n            .layout()\\n            .bidExtensionSeconds = bidExtensionSeconds;\\n    }\\n\\n    /**\\n     * @notice Get highest outstanding bid\\n     */\\n    function _highestBid() internal view returns (Bid storage) {\\n        return EnglishPeriodicAuctionStorage.layout().highestBid;\\n    }\\n\\n    /**\\n     * @notice Get current bid\\n     */\\n    function _currentBid() internal view returns (Bid storage) {\\n        return EnglishPeriodicAuctionStorage.layout().currentBid;\\n    }\\n\\n    /**\\n     * @notice Get bid for address\\n     */\\n    function _bidOf(address bidder) internal view returns (Bid storage) {\\n        return EnglishPeriodicAuctionStorage.layout().bids[bidder];\\n    }\\n\\n    /**\\n     * @notice Get is auction period\\n     */\\n    function _isAuctionPeriod() internal view returns (bool) {\\n        return block.timestamp >= _auctionStartTime();\\n    }\\n\\n    /**\\n     * @notice Is token ready for transfer\\n     */\\n    function _isReadyForTransfer() internal view returns (bool) {\\n        return block.timestamp >= _auctionEndTime();\\n    }\\n\\n    /**\\n     * @notice Place a bid\\n     */\\n    function _placeBid(\\n        address bidder,\\n        uint256 bidAmount,\\n        uint256 collateralAmount\\n    ) internal {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        Bid storage bid = l.bids[bidder];\\n\\n        // Check if highest bid\\n        require(\\n            bidAmount >= l.highestBid.bidAmount + l.minBidIncrement,\\n            'EnglishPeriodicAuction: Bid amount must be greater than highest outstanding bid'\\n        );\\n\\n        uint256 totalCollateralAmount;\\n        if (bid.round == l.currentAuctionRound) {\\n            // If bidder has bid for round, add to existing bid\\n            totalCollateralAmount = bid.collateralAmount + collateralAmount;\\n        } else {\\n            totalCollateralAmount = collateralAmount;\\n        }\\n\\n        uint256 feeAmount;\\n        address currentBidder = IStewardLicense(address(this)).ownerOf(0);\\n        if (bidder == currentBidder) {\\n            // If current bidder, collateral is entire fee amount\\n            feeAmount = totalCollateralAmount;\\n        } else {\\n            require(\\n                totalCollateralAmount > l.currentBid.bidAmount,\\n                'EnglishPeriodicAuction: Collateral must be greater than current bid'\\n            );\\n            // If new bidder, collateral is current bid + fee\\n            feeAmount = totalCollateralAmount - l.currentBid.bidAmount;\\n        }\\n\\n        require(\\n            _checkBidAmount(bidAmount, feeAmount),\\n            'EnglishPeriodicAuction: Incorrect bid amount'\\n        );\\n\\n        // Save bid\\n        bid.bidder = bidder;\\n        bid.bidAmount = bidAmount;\\n        bid.round = l.currentAuctionRound;\\n        bid.feeAmount = feeAmount;\\n        bid.collateralAmount = totalCollateralAmount;\\n\\n        l.highestBid = bid;\\n\\n        // Check if auction should extend\\n        uint256 auctionEndTime = _auctionEndTime();\\n\\n        if (\\n            auctionEndTime >= block.timestamp &&\\n            auctionEndTime - block.timestamp <\\n            _bidExtensionWindowLengthSeconds()\\n        ) {\\n            // Extend auction\\n            l.currentAuctionLength =\\n                l.currentAuctionLength +\\n                _bidExtensionSeconds();\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw bid collateral if not highest bidder\\n     */\\n    function _withdrawBid(address bidder) internal {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        address currentBidder = IStewardLicense(address(this)).ownerOf(0);\\n\\n        require(\\n            bidder != currentBidder,\\n            'EnglishPeriodicAuction: Cannot withdraw bid if current bidder'\\n        );\\n        require(\\n            bidder != l.highestBid.bidder,\\n            'EnglishPeriodicAuction: Cannot withdraw bid if highest bidder'\\n        );\\n\\n        Bid storage bid = l.bids[bidder];\\n\\n        require(\\n            bid.collateralAmount > 0,\\n            'EnglishPeriodicAuction: No collateral to withdraw'\\n        );\\n\\n        // Reset collateral and bid\\n        uint256 collateralAmount = bid.collateralAmount;\\n        bid.collateralAmount = 0;\\n        bid.bidAmount = 0;\\n\\n        // Transfer collateral back to bidder\\n        (bool success, ) = bidder.call{ value: collateralAmount }('');\\n        require(\\n            success,\\n            'EnglishPeriodicAuction: Failed to withdraw collateral'\\n        );\\n    }\\n\\n    /**\\n     * @notice Close auction and trigger a transfer to the highest bidder\\n     */\\n    function _closeAuction() internal {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        address oldBidder = IStewardLicense(address(this)).ownerOf(0);\\n\\n        // Set lastPeriodEndTime to the end of the current auction period\\n        l.lastPeriodEndTime = block.timestamp;\\n\\n        if (l.highestBid.round != l.currentAuctionRound) {\\n            // No bids were placed, transfer to reposssessor\\n            Bid storage repossessorBid = l.bids[l.repossessor];\\n            repossessorBid.round = l.currentAuctionRound;\\n            repossessorBid.bidAmount = 0;\\n            repossessorBid.collateralAmount = 0;\\n            repossessorBid.feeAmount = 0;\\n            repossessorBid.bidder = l.repossessor;\\n\\n            l.highestBid = repossessorBid;\\n        } else {\\n            // Transfer bid to previous bidder's collateral\\n            l.bids[oldBidder].collateralAmount = l.currentBid.bidAmount;\\n        }\\n\\n        // Reset auction\\n        l.currentBid = l.highestBid;\\n        l.bids[l.highestBid.bidder].collateralAmount = 0;\\n        l.currentBid.collateralAmount = 0;\\n        l.currentAuctionLength = l.auctionLengthSeconds;\\n        l.currentAuctionRound = l.currentAuctionRound + 1;\\n\\n        // Transfer to highest bidder\\n        IStewardLicense(address(this)).triggerTransfer(\\n            oldBidder,\\n            l.highestBid.bidder,\\n            0\\n        );\\n\\n        // Distribute fee to beneficiary\\n        if (l.highestBid.feeAmount > 0) {\\n            IBeneficiary(address(this)).distribute{\\n                value: l.highestBid.feeAmount\\n            }();\\n        }\\n    }\\n\\n    /**\\n     * @notice Get auction start time\\n     */\\n    function _auctionStartTime()\\n        internal\\n        view\\n        returns (uint256 auctionStartTime)\\n    {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        uint256 initialPeriodStartTime = IPeriodicPCOParamsReadable(\\n            address(this)\\n        ).initialPeriodStartTime();\\n        uint256 licensePeriod = IPeriodicPCOParamsReadable(address(this))\\n            .licensePeriod();\\n\\n        if (l.lastPeriodEndTime > initialPeriodStartTime) {\\n            // Auction starts after licensePeriod has elapsed\\n            auctionStartTime = l.lastPeriodEndTime + licensePeriod;\\n        } else {\\n            // Auction starts at initial time\\n            auctionStartTime = initialPeriodStartTime;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get auction end time\\n     */\\n    function _auctionEndTime() internal view returns (uint256 auctionEndTime) {\\n        EnglishPeriodicAuctionStorage.Layout\\n            storage l = EnglishPeriodicAuctionStorage.layout();\\n\\n        auctionEndTime = _auctionStartTime() + l.currentAuctionLength;\\n    }\\n\\n    /**\\n     * @notice Calculate fee from bid\\n     */\\n    function _calculateFeeFromBid(\\n        uint256 bidAmount\\n    ) internal view returns (uint256) {\\n        uint256 perSecondFeeNumerator = IPeriodicPCOParamsReadable(\\n            address(this)\\n        ).perSecondFeeNumerator();\\n        uint256 perSecondFeeDenominator = IPeriodicPCOParamsReadable(\\n            address(this)\\n        ).perSecondFeeDenominator();\\n        uint256 licensePeriod = IPeriodicPCOParamsReadable(address(this))\\n            .licensePeriod();\\n\\n        return\\n            ((bidAmount * perSecondFeeNumerator) / perSecondFeeDenominator) *\\n            licensePeriod;\\n    }\\n\\n    /**\\n     * @notice Check that fee is within rounding error of bid amount\\n     */\\n    function _checkBidAmount(\\n        uint256 bidAmount,\\n        uint256 feeAmount\\n    ) internal view returns (bool) {\\n        uint256 calculatedFeeAmount = _calculateFeeFromBid(bidAmount);\\n\\n        return calculatedFeeAmount == feeAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xd5568b9af3947ff9abf0bc4e5ed9b3b7c4b7a76d56a66a6d181c7c7ddafbfb0c\",\"license\":\"MIT\"},\"contracts/auction/EnglishPeriodicAuctionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IEnglishPeriodicAuctionInternal } from './IEnglishPeriodicAuctionInternal.sol';\\n\\nlibrary EnglishPeriodicAuctionStorage {\\n    struct Layout {\\n        bool isInitialized;\\n        address repossessor;\\n        uint256 auctionLengthSeconds;\\n        uint256 minBidIncrement;\\n        uint256 bidExtensionWindowLengthSeconds;\\n        uint256 bidExtensionSeconds;\\n        uint256 lastPeriodEndTime;\\n        uint256 currentAuctionRound;\\n        uint256 currentAuctionLength;\\n        mapping(address => IEnglishPeriodicAuctionInternal.Bid) bids;\\n        IEnglishPeriodicAuctionInternal.Bid currentBid;\\n        IEnglishPeriodicAuctionInternal.Bid highestBid;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256('pcoart.contracts.storage.EnglishPeriodicAuctionStorage');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x037bca8fc777f705b7ecd5235a2746a2754184995fbfb60e239a5381065004ae\",\"license\":\"MIT\"},\"contracts/auction/IEnglishPeriodicAuctionInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IEnglishPeriodicAuctionInternal\\n */\\ninterface IEnglishPeriodicAuctionInternal {\\n    struct Bid {\\n        uint256 round;\\n        address bidder;\\n        uint256 bidAmount;\\n        uint256 feeAmount;\\n        uint256 collateralAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x60613ac2ba86443f746875ad572f029df2722815a2035b8a248d7ee0690cc687\",\"license\":\"MIT\"},\"contracts/auction/IPeriodicAuctionReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IPeriodicAuctionReadable\\n */\\ninterface IPeriodicAuctionReadable {\\n    function isAuctionPeriod() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x18e6ad148e2f5eb06ace68d6f9aa65a74151e43e2d669defe96574a3c8dce288\",\"license\":\"MIT\"},\"contracts/auction/IPeriodicAuctionWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IPeriodicAuctionWritable\\n */\\ninterface IPeriodicAuctionWritable {\\n    /**\\n     * @notice Set repossessor\\n     */\\n    function setRepossessor(address _repossessor) external;\\n\\n    /**\\n     * @notice Set auction length\\n     */\\n    function setAuctionLengthSeconds(uint256 _auctionLengthSeconds) external;\\n\\n    /**\\n     * @notice Set minimum bid increment\\n     */\\n    function setMinBidIncrement(uint256 _minBidIncrement) external;\\n\\n    /**\\n     * @notice Set bid extension window length\\n     */\\n    function setBidExtensionWindowLengthSeconds(\\n        uint256 _bidExtensionWindowLengthSeconds\\n    ) external;\\n\\n    /**\\n     *  @notice Set bid extension seconds\\n     */\\n    function setBidExtensionSeconds(uint256 _bidExtensionSeconds) external;\\n}\\n\",\"keccak256\":\"0x9a93d7cb55bab5c399603883e66e1228efe2e68ca6b967d64dd446a431ff182e\",\"license\":\"MIT\"},\"contracts/auction/facets/EnglishPeriodicAuctionFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { EnglishPeriodicAuctionInternal } from '../EnglishPeriodicAuctionInternal.sol';\\nimport { IPeriodicAuctionReadable } from '../IPeriodicAuctionReadable.sol';\\nimport { IPeriodicAuctionWritable } from '../IPeriodicAuctionWritable.sol';\\nimport { IAllowlistReadable } from '../../allowlist/IAllowlistReadable.sol';\\nimport { ERC165Base } from '@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol';\\nimport { AccessControlInternal } from '@solidstate/contracts/access/access_control/AccessControlInternal.sol';\\n\\n/**\\n * @title EnglishPeriodicAuctionFacet\\n */\\ncontract EnglishPeriodicAuctionFacet is\\n    IPeriodicAuctionReadable,\\n    IPeriodicAuctionWritable,\\n    EnglishPeriodicAuctionInternal,\\n    AccessControlInternal,\\n    ERC165Base\\n{\\n    // Component role\\n    bytes32 internal constant COMPONENT_ROLE =\\n        keccak256('EnglishPeriodicAuctionFacet.COMPONENT_ROLE');\\n\\n    /**\\n     * @notice Initialize auction parameters\\n     */\\n    function initializeAuction(\\n        address _repossessor,\\n        address initialBidder,\\n        uint256 startingBid,\\n        uint256 _auctionLengthSeconds,\\n        uint256 _minBidIncrement,\\n        uint256 _bidExtensionWindowLengthSeconds,\\n        uint256 _bidExtensionSeconds\\n    ) external {\\n        require(\\n            _isInitialized() == false,\\n            'EnglishPeriodicAuctionFacet: already initialized'\\n        );\\n\\n        _setSupportsInterface(type(IPeriodicAuctionReadable).interfaceId, true);\\n        _initializeAuction(\\n            _repossessor,\\n            initialBidder,\\n            startingBid,\\n            _auctionLengthSeconds,\\n            _minBidIncrement,\\n            _bidExtensionWindowLengthSeconds,\\n            _bidExtensionSeconds\\n        );\\n    }\\n\\n    /**\\n     * @notice Initialize auction parameters with owner\\n     */\\n    function initializeAuction(\\n        address _owner,\\n        address _repossessor,\\n        address initialBidder,\\n        uint256 startingBid,\\n        uint256 _auctionLengthSeconds,\\n        uint256 _minBidIncrement,\\n        uint256 _bidExtensionWindowLengthSeconds,\\n        uint256 _bidExtensionSeconds\\n    ) external {\\n        require(\\n            _isInitialized() == false,\\n            'EnglishPeriodicAuctionFacet: already initialized'\\n        );\\n\\n        _setSupportsInterface(type(IPeriodicAuctionReadable).interfaceId, true);\\n        _setSupportsInterface(type(IPeriodicAuctionWritable).interfaceId, true);\\n        _grantRole(COMPONENT_ROLE, _owner);\\n        _initializeAuction(\\n            _repossessor,\\n            initialBidder,\\n            startingBid,\\n            _auctionLengthSeconds,\\n            _minBidIncrement,\\n            _bidExtensionWindowLengthSeconds,\\n            _bidExtensionSeconds\\n        );\\n    }\\n\\n    /**\\n     * @notice Get is auction period\\n     */\\n    function isAuctionPeriod() external view returns (bool) {\\n        return _isAuctionPeriod();\\n    }\\n\\n    /**\\n     * @notice Is token ready for transfer\\n     */\\n    function isReadyForTransfer() external view returns (bool) {\\n        return _isReadyForTransfer();\\n    }\\n\\n    /**\\n     * @notice Place a bid\\n     */\\n    function placeBid(uint256 bidAmount) external payable {\\n        require(\\n            _isAuctionPeriod(),\\n            'EnglishPeriodicAuction: can only place bid in auction period'\\n        );\\n        require(\\n            _isReadyForTransfer() == false,\\n            'EnglishPeriodicAuction: auction is over and awaiting transfer'\\n        );\\n        require(\\n            IAllowlistReadable(address(this)).isAllowed(msg.sender),\\n            'EnglishPeriodicAuction: sender is not allowed to place bid'\\n        );\\n\\n        _placeBid(msg.sender, bidAmount, msg.value);\\n    }\\n\\n    /**\\n     * @notice Withdraw bid collateral\\n     */\\n    function withdrawBid() external {\\n        _withdrawBid(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Close auction and trigger a transfer to the highest bidder\\n     */\\n    function closeAuction() external {\\n        require(\\n            _isReadyForTransfer(),\\n            'EnglishPeriodicAuction: auction is not over'\\n        );\\n\\n        _closeAuction();\\n    }\\n\\n    /**\\n     * @notice Calculate fee from bid\\n     */\\n    function calculateFeeFromBid(\\n        uint256 bidAmount\\n    ) external view returns (uint256) {\\n        return _calculateFeeFromBid(bidAmount);\\n    }\\n\\n    /**\\n     * @notice Get auction start time\\n     */\\n    function auctionStartTime() external view returns (uint256) {\\n        return _auctionStartTime();\\n    }\\n\\n    /**\\n     * @notice Get auction end time\\n     */\\n    function auctionEndTime() external view returns (uint256) {\\n        return _auctionEndTime();\\n    }\\n\\n    /**\\n     * @notice Get repossessor\\n     */\\n    function repossessor() external view returns (address) {\\n        return _repossessor();\\n    }\\n\\n    /**\\n     * @notice Set repossessor\\n     */\\n    function setRepossessor(\\n        address _repossessor\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setRepossessor(_repossessor);\\n    }\\n\\n    /**\\n     * @notice Get auction length\\n     */\\n    function auctionLengthSeconds() external view returns (uint256) {\\n        return _auctionLengthSeconds();\\n    }\\n\\n    /**\\n     * @notice Set auction length\\n     */\\n    function setAuctionLengthSeconds(\\n        uint256 _auctionLengthSeconds\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setAuctionLengthSeconds(_auctionLengthSeconds);\\n    }\\n\\n    /**\\n     * @notice Get minimum bid increment\\n     */\\n    function minBidIncrement() external view returns (uint256) {\\n        return _minBidIncrement();\\n    }\\n\\n    /**\\n     * @notice Set minimum bid increment\\n     */\\n    function setMinBidIncrement(\\n        uint256 _minBidIncrement\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setMinBidIncrement(_minBidIncrement);\\n    }\\n\\n    /**\\n     * @notice Get bid extension window length\\n     */\\n    function bidExtensionWindowLengthSeconds() external view returns (uint256) {\\n        return _bidExtensionWindowLengthSeconds();\\n    }\\n\\n    /**\\n     * @notice Set bid extension window length\\n     */\\n    function setBidExtensionWindowLengthSeconds(\\n        uint256 _bidExtensionWindowLengthSeconds\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setBidExtensionWindowLengthSeconds(_bidExtensionWindowLengthSeconds);\\n    }\\n\\n    /**\\n     *  @notice Get bid extension seconds\\n     */\\n    function bidExtensionSeconds() external view returns (uint256) {\\n        return _bidExtensionSeconds();\\n    }\\n\\n    /**\\n     *  @notice Set bid extension seconds\\n     */\\n    function setBidExtensionSeconds(\\n        uint256 _bidExtensionSeconds\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        _setBidExtensionSeconds(_bidExtensionSeconds);\\n    }\\n\\n    /**\\n     * @notice Get highest outstanding bid\\n     */\\n    function highestBid() external view returns (Bid memory) {\\n        return _highestBid();\\n    }\\n\\n    /**\\n     * @notice Get current bid\\n     */\\n    function currentBid() external view returns (Bid memory) {\\n        return _currentBid();\\n    }\\n\\n    /**\\n     * @notice Get bid for address\\n     */\\n    function bidOf(address bidder) external view returns (Bid memory) {\\n        return _bidOf(bidder);\\n    }\\n}\\n\",\"keccak256\":\"0x7794033533636289b0451d8d5219a8b96da34e09c4afb7711fb82660160ab351\",\"license\":\"MIT\"},\"contracts/beneficiary/IBeneficiary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IBeneficiary\\n */\\ninterface IBeneficiary {\\n    /**\\n     * @notice Distribute to beneficiaries\\n     */\\n    function distribute() external payable;\\n}\\n\",\"keccak256\":\"0x2d88d42a46846bb1b6b48357b41de7e51d2facae84dfea7079cf434c5c3f718b\",\"license\":\"MIT\"},\"contracts/license/IStewardLicense.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IERC721 } from '@solidstate/contracts/interfaces/IERC721.sol';\\n\\n/**\\n * @title IStewardLicense\\n */\\ninterface IStewardLicense is IERC721 {\\n    /**\\n     * @notice Trigger transfer of license\\n     */\\n    function triggerTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xeffe301c0891abcd6eaecd146b83d9cb590d67736754209fba04958f56936d26\",\"license\":\"MIT\"},\"contracts/pco/IPeriodicPCOParamsReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IPeriodicPCOParamsReadable\\n */\\ninterface IPeriodicPCOParamsReadable {\\n    /**\\n     * @notice Get initial period start time\\n     */\\n    function initialPeriodStartTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Get license period\\n     */\\n    function licensePeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Get fee numerator\\n     */\\n    function perSecondFeeNumerator() external view returns (uint256);\\n\\n    /**\\n     * @notice Get fee denominator\\n     */\\n    function perSecondFeeDenominator() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7d2546ca1729b68fa6f1cc52bf900306b4a0439acc88f4f6d6aba12fc3fdd8f5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e7c806100206000396000f3fe60806040526004361061014b5760003560e01c8063868c5466116100b6578063d07ac3f31161006f578063d07ac3f3146103a3578063d57bde79146103c3578063dba85ccb146103d8578063def18101146103f8578063eb54f9ec1461040d578063ec214d331461042257600080fd5b8063868c5466146102c05780638dc30b70146102e05780639979ef45146103465780639c85ec1d14610359578063bff8219814610379578063c3bab6461461038e57600080fd5b80634b449cba116101085780634b449cba1461020957806355cc19ea1461021e57806355ee09d714610233578063609e46fb1461025357806361a7a2261461027357806371c65bde1461029357600080fd5b806301ffc9a714610150578063084a29f61461018557806324db41901461019a578063335b115e146101bc57806337271cc7146101df578063378252f2146101f4575b600080fd5b34801561015c57600080fd5b5061017061016b366004611ac3565b610437565b60405190151581526020015b60405180910390f35b34801561019157600080fd5b5061017061047a565b3480156101a657600080fd5b506101ba6101b5366004611b02565b610489565b005b3480156101c857600080fd5b506101d16104ae565b60405190815260200161017c565b3480156101eb57600080fd5b506101ba6104b8565b34801561020057600080fd5b506101ba6104c3565b34801561021557600080fd5b506101d1610538565b34801561022a57600080fd5b506101d1610542565b34801561023f57600080fd5b506101ba61024e366004611b1f565b61054c565b34801561025f57600080fd5b506101ba61026e366004611b1f565b61056d565b34801561027f57600080fd5b506101ba61028e366004611b1f565b61058e565b34801561029f57600080fd5b506102a86105af565b6040516001600160a01b03909116815260200161017c565b3480156102cc57600080fd5b506101d16102db366004611b1f565b6105b9565b3480156102ec57600080fd5b506103006102fb366004611b02565b6105c4565b60405161017c9190815181526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080918201519181019190915260a00190565b6101ba610354366004611b1f565b61061d565b34801561036557600080fd5b506101ba610374366004611b38565b6107f1565b34801561038557600080fd5b506101d161086b565b34801561039a57600080fd5b506101d1610875565b3480156103af57600080fd5b506101ba6103be366004611baf565b61087f565b3480156103cf57600080fd5b506103006108ce565b3480156103e457600080fd5b506101ba6103f3366004611b1f565b610925565b34801561040457600080fd5b50610300610946565b34801561041957600080fd5b506101d1610956565b34801561042e57600080fd5b50610170610960565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b600061048461096a565b905090565b600080516020611e278339815191526104a18161097c565b6104aa82610986565b5050565b60006104846109b7565b6104c1336109ca565b565b6104cb61096a565b6105305760405162461bcd60e51b815260206004820152602b60248201527f456e676c697368506572696f64696341756374696f6e3a2061756374696f6e2060448201526a34b9903737ba1037bb32b960a91b60648201526084015b60405180910390fd5b6104c1610ca7565b6000610484610f30565b6000610484610f5a565b600080516020611e278339815191526105648161097c565b6104aa82610f6d565b600080516020611e278339815191526105858161097c565b6104aa82610f7d565b600080516020611e278339815191526105a68161097c565b6104aa82610f8d565b6000610484610f9d565b600061047482610fbb565b6105cc611a8b565b6105d582611116565b6040805160a0810182528254815260018301546001600160a01b0316602082015260028301549181019190915260038201546060820152600490910154608082015292915050565b610625611141565b6106975760405162461bcd60e51b815260206004820152603c60248201527f456e676c697368506572696f64696341756374696f6e3a2063616e206f6e6c7960448201527f20706c6163652062696420696e2061756374696f6e20706572696f64000000006064820152608401610527565b61069f61096a565b156107125760405162461bcd60e51b815260206004820152603d60248201527f456e676c697368506572696f64696341756374696f6e3a2061756374696f6e2060448201527f6973206f76657220616e64206177616974696e67207472616e736665720000006064820152608401610527565b60405163babcc53960e01b8152336004820152309063babcc53990602401602060405180830381865afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107719190611c11565b6107e35760405162461bcd60e51b815260206004820152603a60248201527f456e676c697368506572696f64696341756374696f6e3a2073656e646572206960448201527f73206e6f7420616c6c6f77656420746f20706c616365206269640000000000006064820152608401610527565b6107ee33823461114b565b50565b6107f961148f565b156108165760405162461bcd60e51b815260040161052790611c33565b61082863ec214d3360e01b60016114a2565b61083a63aba4f05160e01b60016114a2565b610852600080516020611e2783398151915289611518565b6108618787878787878761158c565b5050505050505050565b6000610484611672565b6000610484611685565b61088761148f565b156108a45760405162461bcd60e51b815260040161052790611c33565b6108b663ec214d3360e01b60016114a2565b6108c58787878787878761158c565b50505050505050565b6108d6611a8b565b6108de611698565b6040805160a0810182528254815260018301546001600160a01b03166020820152600283015491810191909152600382015460608201526004909101546080820152919050565b600080516020611e2783398151915261093d8161097c565b6104aa826116aa565b61094e611a8b565b6108de6116ba565b60006104846116cc565b6000610484611141565b6000610974610f30565b421015905090565b6107ee81336117d2565b8061098f611834565b80546001600160a01b039290921661010002610100600160a81b031990921691909117905550565b60006109c1611834565b60020154905090565b60006109d4611834565b6040516331a9108f60e11b81526000600482018190529192503090636352211e90602401602060405180830381865afa158015610a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a399190611c83565b9050806001600160a01b0316836001600160a01b031603610ac25760405162461bcd60e51b815260206004820152603d60248201527f456e676c697368506572696f64696341756374696f6e3a2043616e6e6f74207760448201527f69746864726177206269642069662063757272656e74206269646465720000006064820152608401610527565b600f8201546001600160a01b0390811690841603610b485760405162461bcd60e51b815260206004820152603d60248201527f456e676c697368506572696f64696341756374696f6e3a2043616e6e6f74207760448201527f69746864726177206269642069662068696768657374206269646465720000006064820152608401610527565b6001600160a01b038316600090815260088301602052604090206004810154610bcd5760405162461bcd60e51b815260206004820152603160248201527f456e676c697368506572696f64696341756374696f6e3a204e6f20636f6c6c61604482015270746572616c20746f20776974686472617760781b6064820152608401610527565b600481018054600091829055600283018290556040519091906001600160a01b0387169083908381818185875af1925050503d8060008114610c2b576040519150601f19603f3d011682016040523d82523d6000602084013e610c30565b606091505b5050905080610c9f5760405162461bcd60e51b815260206004820152603560248201527f456e676c697368506572696f64696341756374696f6e3a204661696c656420746044820152741bc81dda5d1a191c985dc818dbdb1b185d195c985b605a1b6064820152608401610527565b505050505050565b6000610cb1611834565b6040516331a9108f60e11b81526000600482018190529192503090636352211e90602401602060405180830381865afa158015610cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d169190611c83565b4260058401556006830154600e84015491925014610dc2578154610100908190046001600160a01b039081166000908152600885016020526040812060068601548082556002820183815560048301848155600384019485558854600190940180549790940486166001600160a01b0319978816178455600e8901929092559154600f880180549190951695169490941790925590546010850155546011840155546012830155610de6565b600b8201546001600160a01b03821660009081526008840160205260409020600401555b600e8201546009830155600f820154600a830180546001600160a01b0319166001600160a01b0390921691821790556010830154600b8401556011830154600c84015560009081526008830160205260408120600401819055600d83015560018083015460078401556006830154610e5d91611cb6565b6006830155600f82015460405163e31a7c0160e01b81526001600160a01b038084166004830152909116602482015260006044820152309063e31a7c0190606401600060405180830381600087803b158015610eb857600080fd5b505af1158015610ecc573d6000803e3d6000fd5b505050506011820154156104aa57306001600160a01b031663e4fc6b6d83600e01600301546040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f1c57600080fd5b505af11580156108c5573d6000803e3d6000fd5b600080610f3b611834565b90508060070154610f4a6116cc565b610f549190611cb6565b91505090565b6000610f64611834565b60030154905090565b80610f76611834565b6002015550565b80610f86611834565b6004015550565b80610f96611834565b6001015550565b6000610fa7611834565b5461010090046001600160a01b0316919050565b600080306001600160a01b03166279c6e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101f9190611cc9565b90506000306001600160a01b031663935cc61d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611061573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110859190611cc9565b90506000306001600160a01b031663fd8e6f286040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110eb9190611cc9565b905080826110f98588611ce2565b6111039190611cf9565b61110d9190611ce2565b95945050505050565b6000611120611834565b6001600160a01b039092166000908152600892909201602052506040902090565b60006109746116cc565b6000611155611834565b6001600160a01b038516600090815260088201602052604090206002820154601083015492935090916111889190611cb6565b8410156112155760405162461bcd60e51b815260206004820152604f60248201527f456e676c697368506572696f64696341756374696f6e3a2042696420616d6f7560448201527f6e74206d7573742062652067726561746572207468616e20686967686573742060648201526e1bdd5d1cdd185b991a5b99c8189a59608a1b608482015260a401610527565b6000826006015482600001540361123d578382600401546112369190611cb6565b9050611240565b50825b6040516331a9108f60e11b81526000600482018190529081903090636352211e90602401602060405180830381865afa158015611281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a59190611c83565b9050806001600160a01b0316886001600160a01b0316036112c85782915061135f565b600b850154831161134d5760405162461bcd60e51b815260206004820152604360248201527f456e676c697368506572696f64696341756374696f6e3a20436f6c6c6174657260448201527f616c206d7573742062652067726561746572207468616e2063757272656e7420606482015262189a5960ea1b608482015260a401610527565b600b85015461135c9084611d1b565b91505b6113698783611858565b6113ca5760405162461bcd60e51b815260206004820152602c60248201527f456e676c697368506572696f64696341756374696f6e3a20496e636f7272656360448201526b1d08189a5908185b5bdd5b9d60a21b6064820152608401610527565b6001840180546001600160a01b03808b166001600160a01b0319928316178355600287018a815560068901548089556003890187815560048a01898155600e8c01929092559454600f8b01805490951693169290921790925590546010880155905460118701555460128601556000611441610f30565b90504281101580156114625750611456610f5a565b6114604283611d1b565b105b156114845761146f611672565b866007015461147e9190611cb6565b60078701555b505050505050505050565b6000611499611834565b5460ff16919050565b6001600160e01b031980831690036114cd5760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040902061154f908261186e565b5060405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b6000611596611834565b805460ff1916600117815590506115ac88610986565b6115b585610f8d565b6115be84610f6d565b6115c7836116aa565b6115d082610f7d565b6007810194909455505060016006830181905560098301819055600a830180546001600160a01b039687166001600160a01b031991821681178355600b86019687556000600d8701818155600c8801828155928252600888016020526040909120858155935494840180548416958a1695909517909455955460028301559454600382015590546004919091015550600f018054939092169216919091179055565b600061167c611834565b60040154905090565b600061168f611834565b60010154905090565b60006116a2611834565b600e01905090565b806116b3611834565b6003015550565b60006116c4611834565b600901905090565b6000806116d7611834565b90506000306001600160a01b031663be6a2a6d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611719573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173d9190611cc9565b90506000306001600160a01b031663fd8e6f286040518163ffffffff1660e01b8152600401602060405180830381865afa15801561177f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a39190611cc9565b905081836005015411156117c8578083600501546117c19190611cb6565b93506117cc565b8193505b50505090565b6117dc828261188a565b6104aa576117f2816001600160a01b03166118e3565b6117fd8360206118f5565b60405160200161180e929190611d52565b60408051601f198184030181529082905262461bcd60e51b825261052791600401611dc7565b7fc7ed1b841b2d3c7f16d15642e7b013e89732e44006608d59c7547b8e331a7ce090565b60008061186484610fbb565b9092149392505050565b6000611883836001600160a01b038416611a48565b9392505050565b6000611883827fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811600086815260209190915260409020906001600160a01b03811660009081526001830160205260408120541515611883565b60606104746001600160a01b03831660145b60606000611904836002611ce2565b61190f906002611cb6565b67ffffffffffffffff81111561192757611927611dfa565b6040519080825280601f01601f191660200182016040528015611951576020820181803683370190505b509050600360fc1b8160008151811061196c5761196c611e10565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061199b5761199b611e10565b60200101906001600160f81b031916908160001a905350600160028402015b6001811115611a28576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106119eb576119eb611e10565b1a60f81b828281518110611a0157611a01611e10565b60200101906001600160f81b031916908160001a90535060049490941c93600019016119ba565b5083156118835760405163c913478560e01b815260040160405180910390fd5b6000818152600183016020526040812054610474575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b6040518060a001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b600060208284031215611ad557600080fd5b81356001600160e01b03198116811461188357600080fd5b6001600160a01b03811681146107ee57600080fd5b600060208284031215611b1457600080fd5b813561188381611aed565b600060208284031215611b3157600080fd5b5035919050565b600080600080600080600080610100898b031215611b5557600080fd5b8835611b6081611aed565b97506020890135611b7081611aed565b96506040890135611b8081611aed565b979a96995096976060810135975060808101359660a0820135965060c0820135955060e0909101359350915050565b600080600080600080600060e0888a031215611bca57600080fd5b8735611bd581611aed565b96506020880135611be581611aed565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b600060208284031215611c2357600080fd5b8151801515811461188357600080fd5b60208082526030908201527f456e676c697368506572696f64696341756374696f6e46616365743a20616c7260408201526f1958591e481a5b9a5d1a585b1a5e995960821b606082015260800190565b600060208284031215611c9557600080fd5b815161188381611aed565b634e487b7160e01b600052601160045260246000fd5b8082018082111561047457610474611ca0565b600060208284031215611cdb57600080fd5b5051919050565b808202811582820484141761047457610474611ca0565b600082611d1657634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561047457610474611ca0565b60005b83811015611d49578181015183820152602001611d31565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611d8a816017850160208801611d2e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611dbb816028840160208801611d2e565b01602801949350505050565b6020815260008251806020840152611de6816040850160208701611d2e565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfe27d47e2aa570d0f5aa1d72abbe4d60032a12e3514b8c2bc8a49a9968779054c2a2646970667358221220d263460daaabae3a622a6893c8337914792938ed4830b81b212d3972f6b22a6a64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c8063868c5466116100b6578063d07ac3f31161006f578063d07ac3f3146103a3578063d57bde79146103c3578063dba85ccb146103d8578063def18101146103f8578063eb54f9ec1461040d578063ec214d331461042257600080fd5b8063868c5466146102c05780638dc30b70146102e05780639979ef45146103465780639c85ec1d14610359578063bff8219814610379578063c3bab6461461038e57600080fd5b80634b449cba116101085780634b449cba1461020957806355cc19ea1461021e57806355ee09d714610233578063609e46fb1461025357806361a7a2261461027357806371c65bde1461029357600080fd5b806301ffc9a714610150578063084a29f61461018557806324db41901461019a578063335b115e146101bc57806337271cc7146101df578063378252f2146101f4575b600080fd5b34801561015c57600080fd5b5061017061016b366004611ac3565b610437565b60405190151581526020015b60405180910390f35b34801561019157600080fd5b5061017061047a565b3480156101a657600080fd5b506101ba6101b5366004611b02565b610489565b005b3480156101c857600080fd5b506101d16104ae565b60405190815260200161017c565b3480156101eb57600080fd5b506101ba6104b8565b34801561020057600080fd5b506101ba6104c3565b34801561021557600080fd5b506101d1610538565b34801561022a57600080fd5b506101d1610542565b34801561023f57600080fd5b506101ba61024e366004611b1f565b61054c565b34801561025f57600080fd5b506101ba61026e366004611b1f565b61056d565b34801561027f57600080fd5b506101ba61028e366004611b1f565b61058e565b34801561029f57600080fd5b506102a86105af565b6040516001600160a01b03909116815260200161017c565b3480156102cc57600080fd5b506101d16102db366004611b1f565b6105b9565b3480156102ec57600080fd5b506103006102fb366004611b02565b6105c4565b60405161017c9190815181526020808301516001600160a01b03169082015260408083015190820152606080830151908201526080918201519181019190915260a00190565b6101ba610354366004611b1f565b61061d565b34801561036557600080fd5b506101ba610374366004611b38565b6107f1565b34801561038557600080fd5b506101d161086b565b34801561039a57600080fd5b506101d1610875565b3480156103af57600080fd5b506101ba6103be366004611baf565b61087f565b3480156103cf57600080fd5b506103006108ce565b3480156103e457600080fd5b506101ba6103f3366004611b1f565b610925565b34801561040457600080fd5b50610300610946565b34801561041957600080fd5b506101d1610956565b34801561042e57600080fd5b50610170610960565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b600061048461096a565b905090565b600080516020611e278339815191526104a18161097c565b6104aa82610986565b5050565b60006104846109b7565b6104c1336109ca565b565b6104cb61096a565b6105305760405162461bcd60e51b815260206004820152602b60248201527f456e676c697368506572696f64696341756374696f6e3a2061756374696f6e2060448201526a34b9903737ba1037bb32b960a91b60648201526084015b60405180910390fd5b6104c1610ca7565b6000610484610f30565b6000610484610f5a565b600080516020611e278339815191526105648161097c565b6104aa82610f6d565b600080516020611e278339815191526105858161097c565b6104aa82610f7d565b600080516020611e278339815191526105a68161097c565b6104aa82610f8d565b6000610484610f9d565b600061047482610fbb565b6105cc611a8b565b6105d582611116565b6040805160a0810182528254815260018301546001600160a01b0316602082015260028301549181019190915260038201546060820152600490910154608082015292915050565b610625611141565b6106975760405162461bcd60e51b815260206004820152603c60248201527f456e676c697368506572696f64696341756374696f6e3a2063616e206f6e6c7960448201527f20706c6163652062696420696e2061756374696f6e20706572696f64000000006064820152608401610527565b61069f61096a565b156107125760405162461bcd60e51b815260206004820152603d60248201527f456e676c697368506572696f64696341756374696f6e3a2061756374696f6e2060448201527f6973206f76657220616e64206177616974696e67207472616e736665720000006064820152608401610527565b60405163babcc53960e01b8152336004820152309063babcc53990602401602060405180830381865afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107719190611c11565b6107e35760405162461bcd60e51b815260206004820152603a60248201527f456e676c697368506572696f64696341756374696f6e3a2073656e646572206960448201527f73206e6f7420616c6c6f77656420746f20706c616365206269640000000000006064820152608401610527565b6107ee33823461114b565b50565b6107f961148f565b156108165760405162461bcd60e51b815260040161052790611c33565b61082863ec214d3360e01b60016114a2565b61083a63aba4f05160e01b60016114a2565b610852600080516020611e2783398151915289611518565b6108618787878787878761158c565b5050505050505050565b6000610484611672565b6000610484611685565b61088761148f565b156108a45760405162461bcd60e51b815260040161052790611c33565b6108b663ec214d3360e01b60016114a2565b6108c58787878787878761158c565b50505050505050565b6108d6611a8b565b6108de611698565b6040805160a0810182528254815260018301546001600160a01b03166020820152600283015491810191909152600382015460608201526004909101546080820152919050565b600080516020611e2783398151915261093d8161097c565b6104aa826116aa565b61094e611a8b565b6108de6116ba565b60006104846116cc565b6000610484611141565b6000610974610f30565b421015905090565b6107ee81336117d2565b8061098f611834565b80546001600160a01b039290921661010002610100600160a81b031990921691909117905550565b60006109c1611834565b60020154905090565b60006109d4611834565b6040516331a9108f60e11b81526000600482018190529192503090636352211e90602401602060405180830381865afa158015610a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a399190611c83565b9050806001600160a01b0316836001600160a01b031603610ac25760405162461bcd60e51b815260206004820152603d60248201527f456e676c697368506572696f64696341756374696f6e3a2043616e6e6f74207760448201527f69746864726177206269642069662063757272656e74206269646465720000006064820152608401610527565b600f8201546001600160a01b0390811690841603610b485760405162461bcd60e51b815260206004820152603d60248201527f456e676c697368506572696f64696341756374696f6e3a2043616e6e6f74207760448201527f69746864726177206269642069662068696768657374206269646465720000006064820152608401610527565b6001600160a01b038316600090815260088301602052604090206004810154610bcd5760405162461bcd60e51b815260206004820152603160248201527f456e676c697368506572696f64696341756374696f6e3a204e6f20636f6c6c61604482015270746572616c20746f20776974686472617760781b6064820152608401610527565b600481018054600091829055600283018290556040519091906001600160a01b0387169083908381818185875af1925050503d8060008114610c2b576040519150601f19603f3d011682016040523d82523d6000602084013e610c30565b606091505b5050905080610c9f5760405162461bcd60e51b815260206004820152603560248201527f456e676c697368506572696f64696341756374696f6e3a204661696c656420746044820152741bc81dda5d1a191c985dc818dbdb1b185d195c985b605a1b6064820152608401610527565b505050505050565b6000610cb1611834565b6040516331a9108f60e11b81526000600482018190529192503090636352211e90602401602060405180830381865afa158015610cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d169190611c83565b4260058401556006830154600e84015491925014610dc2578154610100908190046001600160a01b039081166000908152600885016020526040812060068601548082556002820183815560048301848155600384019485558854600190940180549790940486166001600160a01b0319978816178455600e8901929092559154600f880180549190951695169490941790925590546010850155546011840155546012830155610de6565b600b8201546001600160a01b03821660009081526008840160205260409020600401555b600e8201546009830155600f820154600a830180546001600160a01b0319166001600160a01b0390921691821790556010830154600b8401556011830154600c84015560009081526008830160205260408120600401819055600d83015560018083015460078401556006830154610e5d91611cb6565b6006830155600f82015460405163e31a7c0160e01b81526001600160a01b038084166004830152909116602482015260006044820152309063e31a7c0190606401600060405180830381600087803b158015610eb857600080fd5b505af1158015610ecc573d6000803e3d6000fd5b505050506011820154156104aa57306001600160a01b031663e4fc6b6d83600e01600301546040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f1c57600080fd5b505af11580156108c5573d6000803e3d6000fd5b600080610f3b611834565b90508060070154610f4a6116cc565b610f549190611cb6565b91505090565b6000610f64611834565b60030154905090565b80610f76611834565b6002015550565b80610f86611834565b6004015550565b80610f96611834565b6001015550565b6000610fa7611834565b5461010090046001600160a01b0316919050565b600080306001600160a01b03166279c6e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101f9190611cc9565b90506000306001600160a01b031663935cc61d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611061573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110859190611cc9565b90506000306001600160a01b031663fd8e6f286040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110eb9190611cc9565b905080826110f98588611ce2565b6111039190611cf9565b61110d9190611ce2565b95945050505050565b6000611120611834565b6001600160a01b039092166000908152600892909201602052506040902090565b60006109746116cc565b6000611155611834565b6001600160a01b038516600090815260088201602052604090206002820154601083015492935090916111889190611cb6565b8410156112155760405162461bcd60e51b815260206004820152604f60248201527f456e676c697368506572696f64696341756374696f6e3a2042696420616d6f7560448201527f6e74206d7573742062652067726561746572207468616e20686967686573742060648201526e1bdd5d1cdd185b991a5b99c8189a59608a1b608482015260a401610527565b6000826006015482600001540361123d578382600401546112369190611cb6565b9050611240565b50825b6040516331a9108f60e11b81526000600482018190529081903090636352211e90602401602060405180830381865afa158015611281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a59190611c83565b9050806001600160a01b0316886001600160a01b0316036112c85782915061135f565b600b850154831161134d5760405162461bcd60e51b815260206004820152604360248201527f456e676c697368506572696f64696341756374696f6e3a20436f6c6c6174657260448201527f616c206d7573742062652067726561746572207468616e2063757272656e7420606482015262189a5960ea1b608482015260a401610527565b600b85015461135c9084611d1b565b91505b6113698783611858565b6113ca5760405162461bcd60e51b815260206004820152602c60248201527f456e676c697368506572696f64696341756374696f6e3a20496e636f7272656360448201526b1d08189a5908185b5bdd5b9d60a21b6064820152608401610527565b6001840180546001600160a01b03808b166001600160a01b0319928316178355600287018a815560068901548089556003890187815560048a01898155600e8c01929092559454600f8b01805490951693169290921790925590546010880155905460118701555460128601556000611441610f30565b90504281101580156114625750611456610f5a565b6114604283611d1b565b105b156114845761146f611672565b866007015461147e9190611cb6565b60078701555b505050505050505050565b6000611499611834565b5460ff16919050565b6001600160e01b031980831690036114cd5760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c6228116020526040902061154f908261186e565b5060405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b6000611596611834565b805460ff1916600117815590506115ac88610986565b6115b585610f8d565b6115be84610f6d565b6115c7836116aa565b6115d082610f7d565b6007810194909455505060016006830181905560098301819055600a830180546001600160a01b039687166001600160a01b031991821681178355600b86019687556000600d8701818155600c8801828155928252600888016020526040909120858155935494840180548416958a1695909517909455955460028301559454600382015590546004919091015550600f018054939092169216919091179055565b600061167c611834565b60040154905090565b600061168f611834565b60010154905090565b60006116a2611834565b600e01905090565b806116b3611834565b6003015550565b60006116c4611834565b600901905090565b6000806116d7611834565b90506000306001600160a01b031663be6a2a6d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611719573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173d9190611cc9565b90506000306001600160a01b031663fd8e6f286040518163ffffffff1660e01b8152600401602060405180830381865afa15801561177f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a39190611cc9565b905081836005015411156117c8578083600501546117c19190611cb6565b93506117cc565b8193505b50505090565b6117dc828261188a565b6104aa576117f2816001600160a01b03166118e3565b6117fd8360206118f5565b60405160200161180e929190611d52565b60408051601f198184030181529082905262461bcd60e51b825261052791600401611dc7565b7fc7ed1b841b2d3c7f16d15642e7b013e89732e44006608d59c7547b8e331a7ce090565b60008061186484610fbb565b9092149392505050565b6000611883836001600160a01b038416611a48565b9392505050565b6000611883827fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811600086815260209190915260409020906001600160a01b03811660009081526001830160205260408120541515611883565b60606104746001600160a01b03831660145b60606000611904836002611ce2565b61190f906002611cb6565b67ffffffffffffffff81111561192757611927611dfa565b6040519080825280601f01601f191660200182016040528015611951576020820181803683370190505b509050600360fc1b8160008151811061196c5761196c611e10565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061199b5761199b611e10565b60200101906001600160f81b031916908160001a905350600160028402015b6001811115611a28576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106119eb576119eb611e10565b1a60f81b828281518110611a0157611a01611e10565b60200101906001600160f81b031916908160001a90535060049490941c93600019016119ba565b5083156118835760405163c913478560e01b815260040160405180910390fd5b6000818152600183016020526040812054610474575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b6040518060a001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b600060208284031215611ad557600080fd5b81356001600160e01b03198116811461188357600080fd5b6001600160a01b03811681146107ee57600080fd5b600060208284031215611b1457600080fd5b813561188381611aed565b600060208284031215611b3157600080fd5b5035919050565b600080600080600080600080610100898b031215611b5557600080fd5b8835611b6081611aed565b97506020890135611b7081611aed565b96506040890135611b8081611aed565b979a96995096976060810135975060808101359660a0820135965060c0820135955060e0909101359350915050565b600080600080600080600060e0888a031215611bca57600080fd5b8735611bd581611aed565b96506020880135611be581611aed565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b600060208284031215611c2357600080fd5b8151801515811461188357600080fd5b60208082526030908201527f456e676c697368506572696f64696341756374696f6e46616365743a20616c7260408201526f1958591e481a5b9a5d1a585b1a5e995960821b606082015260800190565b600060208284031215611c9557600080fd5b815161188381611aed565b634e487b7160e01b600052601160045260246000fd5b8082018082111561047457610474611ca0565b600060208284031215611cdb57600080fd5b5051919050565b808202811582820484141761047457610474611ca0565b600082611d1657634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561047457610474611ca0565b60005b83811015611d49578181015183820152602001611d31565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611d8a816017850160208801611d2e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611dbb816028840160208801611d2e565b01602801949350505050565b6020815260008251806020840152611de6816040850160208701611d2e565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfe27d47e2aa570d0f5aa1d72abbe4d60032a12e3514b8c2bc8a49a9968779054c2a2646970667358221220d263460daaabae3a622a6893c8337914792938ed4830b81b212d3972f6b22a6a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      }
    },
    "title": "EnglishPeriodicAuctionFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "auctionEndTime()": {
        "notice": "Get auction end time"
      },
      "auctionLengthSeconds()": {
        "notice": "Get auction length"
      },
      "auctionStartTime()": {
        "notice": "Get auction start time"
      },
      "bidExtensionSeconds()": {
        "notice": "Get bid extension seconds"
      },
      "bidExtensionWindowLengthSeconds()": {
        "notice": "Get bid extension window length"
      },
      "bidOf(address)": {
        "notice": "Get bid for address"
      },
      "calculateFeeFromBid(uint256)": {
        "notice": "Calculate fee from bid"
      },
      "closeAuction()": {
        "notice": "Close auction and trigger a transfer to the highest bidder"
      },
      "currentBid()": {
        "notice": "Get current bid"
      },
      "highestBid()": {
        "notice": "Get highest outstanding bid"
      },
      "initializeAuction(address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Initialize auction parameters with owner"
      },
      "initializeAuction(address,address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Initialize auction parameters"
      },
      "isAuctionPeriod()": {
        "notice": "Get is auction period"
      },
      "isReadyForTransfer()": {
        "notice": "Is token ready for transfer"
      },
      "minBidIncrement()": {
        "notice": "Get minimum bid increment"
      },
      "placeBid(uint256)": {
        "notice": "Place a bid"
      },
      "repossessor()": {
        "notice": "Get repossessor"
      },
      "setAuctionLengthSeconds(uint256)": {
        "notice": "Set auction length"
      },
      "setBidExtensionSeconds(uint256)": {
        "notice": "Set bid extension seconds"
      },
      "setBidExtensionWindowLengthSeconds(uint256)": {
        "notice": "Set bid extension window length"
      },
      "setMinBidIncrement(uint256)": {
        "notice": "Set minimum bid increment"
      },
      "setRepossessor(address)": {
        "notice": "Set repossessor"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "withdrawBid()": {
        "notice": "Withdraw bid collateral"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
