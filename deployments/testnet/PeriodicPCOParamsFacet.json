{
  "address": "0xaDD2eFb7f87Db4003c50d4aE60Bcc82b255F9222",
  "abi": [
    {
      "inputs": [],
      "name": "ERC165Base__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintUtils__InsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPeriodStartTime",
          "type": "uint256"
        }
      ],
      "name": "InitialPeriodStartTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "licensePeriod",
          "type": "uint256"
        }
      ],
      "name": "LicensePeriodSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "perSecondFeeDenominator",
          "type": "uint256"
        }
      ],
      "name": "PerSecondFeeDenominatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "perSecondFeeNumerator",
          "type": "uint256"
        }
      ],
      "name": "PerSecondFeeNumeratorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "initialPeriodStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_licensePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialPeriodStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_perSecondFeeNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_perSecondFeeDenominator",
          "type": "uint256"
        }
      ],
      "name": "initializePCOParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_licensePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialPeriodStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_perSecondFeeNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_perSecondFeeDenominator",
          "type": "uint256"
        }
      ],
      "name": "initializePCOParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "licensePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perSecondFeeDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perSecondFeeNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_licensePeriod",
          "type": "uint256"
        }
      ],
      "name": "setLicensePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_perSecondFeeDenominator",
          "type": "uint256"
        }
      ],
      "name": "setPerSecondFeeDenominator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_perSecondFeeNumerator",
          "type": "uint256"
        }
      ],
      "name": "setPerSecondFeeNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc5958bc395ab49c5f3d27a92fa16e7d586368a36dced460b3c91e4552d016918",
  "receipt": {
    "to": null,
    "from": "0xfF5Be16460704eFd0263dB1444Eaa216b77477c5",
    "contractAddress": "0xaDD2eFb7f87Db4003c50d4aE60Bcc82b255F9222",
    "transactionIndex": 79,
    "gasUsed": "693829",
    "logsBloom": "0x
    "blockHash": "0x695d156206a2ea3d68a4388fa61feb216824dde91247464b6599b8f0f0fff0d4",
    "transactionHash": "0xc5958bc395ab49c5f3d27a92fa16e7d586368a36dced460b3c91e4552d016918",
    "logs": [],
    "blockNumber": 9228812,
    "cumulativeGasUsed": "20980499",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "789160661a9bb39270968ba00bb416c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPeriodStartTime\",\"type\":\"uint256\"}],\"name\":\"InitialPeriodStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"licensePeriod\",\"type\":\"uint256\"}],\"name\":\"LicensePeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perSecondFeeDenominator\",\"type\":\"uint256\"}],\"name\":\"PerSecondFeeDenominatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perSecondFeeNumerator\",\"type\":\"uint256\"}],\"name\":\"PerSecondFeeNumeratorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"initialPeriodStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_licensePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialPeriodStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perSecondFeeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perSecondFeeDenominator\",\"type\":\"uint256\"}],\"name\":\"initializePCOParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_licensePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialPeriodStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perSecondFeeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perSecondFeeDenominator\",\"type\":\"uint256\"}],\"name\":\"initializePCOParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"licensePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perSecondFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perSecondFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_licensePeriod\",\"type\":\"uint256\"}],\"name\":\"setLicensePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perSecondFeeDenominator\",\"type\":\"uint256\"}],\"name\":\"setPerSecondFeeDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perSecondFeeNumerator\",\"type\":\"uint256\"}],\"name\":\"setPerSecondFeeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Params store for periodic PCO\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}}},\"title\":\"PeriodicPCOParamsFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialPeriodStartTime()\":{\"notice\":\"Get initial period start time\"},\"initializePCOParams(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize params with owner\"},\"initializePCOParams(uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize params\"},\"licensePeriod()\":{\"notice\":\"Get license period\"},\"perSecondFeeDenominator()\":{\"notice\":\"Get fee denominator\"},\"perSecondFeeNumerator()\":{\"notice\":\"Get fee numerator\"},\"setLicensePeriod(uint256)\":{\"notice\":\"Set license period\"},\"setPerSecondFeeDenominator(uint256)\":{\"notice\":\"Set fee denominator\"},\"setPerSecondFeeNumerator(uint256)\":{\"notice\":\"Set fee numerator\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pco/facets/PeriodicPCOParamsFacet.sol\":\"PeriodicPCOParamsFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c32c5b490b9a2dd9daa533a75f940f0b0f69c9033776f5e274cd2446c224513\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae788d37a6e20edf7f94be23d78517324f50bccbf0541e10ce0850d7d5bca062\",\"license\":\"MIT\"},\"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xcc4a1d78a60955d673104adaee1211de3b3cfb95668f1fbfc43ed0e7f36ad110\",\"license\":\"MIT\"},\"@solidstate/contracts/data/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbbaaeb805b3e1e704ceba33c9093285220254b1ff6b4b7f577e515b118e116f6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc250e493770feaa0da8e5a55d241712c1c6526caa7d8df2455c3e5fa25124c0b\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\",\"keccak256\":\"0xc15863a59c442e22b3f5de4e3fa79fffd45dcbe66a9fc18c52b1114c8420e177\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165Base } from './IERC165Base.sol';\\nimport { ERC165BaseInternal } from './ERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165Base is IERC165Base, ERC165BaseInternal {\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return _supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3f2268856fdd9b27946adc65010bc83992069a90034bf692ab630802a926a9c2\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xba7b4d73d42dfc9f8083ce36aed0fa2c56c73878d8bda7d64f2fb908d5e04636\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd1cfba40f8aabda5898ffe21adeeea8c7011da12bfdad7f7aa0cf87b3635653\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\n\\ninterface IERC165Base is IERC165, IERC165BaseInternal {}\\n\",\"keccak256\":\"0x288c50013c735cf30be90eb084589fc54bc0ee77a88ec69c3cc1efb11d7dccf4\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\",\"keccak256\":\"0xccda4b118c8c09c276a0e577168aa404ea6207aad6b384b04f5f3a8923316422\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/pco/IPeriodicPCOParamsInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IPeriodicPCOParamsInternal\\n */\\ninterface IPeriodicPCOParamsInternal {\\n    event InitialPeriodStartTimeSet(uint256 initialPeriodStartTime);\\n    event LicensePeriodSet(uint256 licensePeriod);\\n    event PerSecondFeeNumeratorSet(uint256 perSecondFeeNumerator);\\n    event PerSecondFeeDenominatorSet(uint256 perSecondFeeDenominator);\\n}\\n\",\"keccak256\":\"0x9ba0143c928e6602f6e75105e043c65c64a9880f4e904b21d5af246a95b4bd1a\",\"license\":\"MIT\"},\"contracts/pco/IPeriodicPCOParamsReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IPeriodicPCOParamsReadable\\n */\\ninterface IPeriodicPCOParamsReadable {\\n    /**\\n     * @notice Get initial period start time\\n     */\\n    function initialPeriodStartTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Get license period\\n     */\\n    function licensePeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice Get fee numerator\\n     */\\n    function perSecondFeeNumerator() external view returns (uint256);\\n\\n    /**\\n     * @notice Get fee denominator\\n     */\\n    function perSecondFeeDenominator() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7d2546ca1729b68fa6f1cc52bf900306b4a0439acc88f4f6d6aba12fc3fdd8f5\",\"license\":\"MIT\"},\"contracts/pco/IPeriodicPCOParamsWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IPeriodicPCOParamsWritable\\n */\\ninterface IPeriodicPCOParamsWritable {\\n    /**\\n     * @notice Set license period\\n     */\\n    function setLicensePeriod(uint256 _licensePeriod) external;\\n\\n    /**\\n     * @notice Set fee numerator\\n     */\\n    function setPerSecondFeeNumerator(uint256 _perSecondFeeNumerator) external;\\n\\n    /**\\n     * @notice Set fee denominator\\n     */\\n    function setPerSecondFeeDenominator(\\n        uint256 _perSecondFeeDenominator\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6e55f25c09d34800be40ee747f09b498d4e32405bbc68520bd05365ebb146fca\",\"license\":\"MIT\"},\"contracts/pco/PeriodicPCOParamsInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { PeriodicPCOParamsStorage } from './PeriodicPCOParamsStorage.sol';\\nimport { IPeriodicPCOParamsInternal } from './IPeriodicPCOParamsInternal.sol';\\n\\n/**\\n * @title PeriodicPCOParamsInternal\\n */\\nabstract contract PeriodicPCOParamsInternal is IPeriodicPCOParamsInternal {\\n    /**\\n     * @notice Initialize parameters\\n     */\\n    function _initializeParams(\\n        uint256 licensePeriod,\\n        uint256 initialPeriodStartTime,\\n        uint256 perSecondFeeNumerator,\\n        uint256 perSecondFeeDenominator\\n    ) internal {\\n        PeriodicPCOParamsStorage.Layout storage l = PeriodicPCOParamsStorage\\n            .layout();\\n\\n        l.isInitialized = true;\\n\\n        _setLicensePeriod(licensePeriod);\\n        _setInitialPeriodStartTime(initialPeriodStartTime);\\n        _setPerSecondFeeNumerator(perSecondFeeNumerator);\\n        _setPerSecondFeeDenominator(perSecondFeeDenominator);\\n    }\\n\\n    /**\\n     * @notice Check if initialized\\n     */\\n    function _isInitialized() internal view returns (bool) {\\n        return PeriodicPCOParamsStorage.layout().isInitialized;\\n    }\\n\\n    /**\\n     * @notice Get initial period start time\\n     */\\n    function _initialPeriodStartTime() internal view returns (uint256) {\\n        return PeriodicPCOParamsStorage.layout().initialPeriodStartTime;\\n    }\\n\\n    /**\\n     * @notice Set initial period start time\\n     */\\n    function _setInitialPeriodStartTime(\\n        uint256 initialPeriodStartTime\\n    ) internal {\\n        PeriodicPCOParamsStorage.Layout storage l = PeriodicPCOParamsStorage\\n            .layout();\\n\\n        l.initialPeriodStartTime = initialPeriodStartTime;\\n\\n        emit InitialPeriodStartTimeSet(initialPeriodStartTime);\\n    }\\n\\n    /**\\n     * @notice Get license period\\n     */\\n    function _licensePeriod() internal view returns (uint256) {\\n        return PeriodicPCOParamsStorage.layout().licensePeriod;\\n    }\\n\\n    /**\\n     * @notice Set license period\\n     */\\n    function _setLicensePeriod(uint256 licensePeriod) internal {\\n        PeriodicPCOParamsStorage.Layout storage l = PeriodicPCOParamsStorage\\n            .layout();\\n\\n        l.licensePeriod = licensePeriod;\\n\\n        emit LicensePeriodSet(licensePeriod);\\n    }\\n\\n    /**\\n     * @notice Get fee numerator\\n     */\\n    function _perSecondFeeNumerator() internal view returns (uint256) {\\n        return PeriodicPCOParamsStorage.layout().perSecondFeeNumerator;\\n    }\\n\\n    /**\\n     * @notice Set fee numerator\\n     */\\n    function _setPerSecondFeeNumerator(uint256 perSecondFeeNumerator) internal {\\n        PeriodicPCOParamsStorage.Layout storage l = PeriodicPCOParamsStorage\\n            .layout();\\n\\n        l.perSecondFeeNumerator = perSecondFeeNumerator;\\n\\n        emit PerSecondFeeNumeratorSet(perSecondFeeNumerator);\\n    }\\n\\n    /**\\n     * @notice Get fee denominator\\n     */\\n    function _perSecondFeeDenominator() internal view returns (uint256) {\\n        return PeriodicPCOParamsStorage.layout().perSecondFeeDenominator;\\n    }\\n\\n    /**\\n     * @notice Set fee denominator\\n     */\\n    function _setPerSecondFeeDenominator(\\n        uint256 perSecondFeeDenominator\\n    ) internal {\\n        PeriodicPCOParamsStorage.Layout storage l = PeriodicPCOParamsStorage\\n            .layout();\\n        l.perSecondFeeDenominator = perSecondFeeDenominator;\\n\\n        emit PerSecondFeeDenominatorSet(perSecondFeeDenominator);\\n    }\\n}\\n\",\"keccak256\":\"0x9a81b2aa7a10b982e3a078c7fae98c307eea6fc0fad2c8dd9c689cb295465750\",\"license\":\"MIT\"},\"contracts/pco/PeriodicPCOParamsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title PeriodicPCOParamsStorage\\n */\\nlibrary PeriodicPCOParamsStorage {\\n    struct Layout {\\n        bool isInitialized;\\n        /// @dev Length of time in seconds for each period the license is valid for\\n        uint256 licensePeriod;\\n        /// @dev Start timestamp of initial period\\n        uint256 initialPeriodStartTime;\\n        /// @dev Fee numerator per second\\n        uint256 perSecondFeeNumerator;\\n        /// @dev Fee denominator per second\\n        uint256 perSecondFeeDenominator;\\n    }\\n\\n    bytes32 private constant STORAGE_SLOT =\\n        keccak256('pcoart.contracts.storage.PeriodicPCOParamsStorage');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbae6d81f19bf74db6521aaf0259c3f746a5f47ddfe1596fed4208f381cd74373\",\"license\":\"MIT\"},\"contracts/pco/facets/PeriodicPCOParamsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IPeriodicPCOParamsReadable } from '../IPeriodicPCOParamsReadable.sol';\\nimport { IPeriodicPCOParamsWritable } from '../IPeriodicPCOParamsWritable.sol';\\nimport { PeriodicPCOParamsInternal } from '../PeriodicPCOParamsInternal.sol';\\nimport { ERC165Base } from '@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol';\\nimport { AccessControlInternal } from '@solidstate/contracts/access/access_control/AccessControlInternal.sol';\\n\\n/**\\n * @title PeriodicPCOParamsFacet\\n * @dev Params store for periodic PCO\\n */\\ncontract PeriodicPCOParamsFacet is\\n    AccessControlInternal,\\n    IPeriodicPCOParamsReadable,\\n    IPeriodicPCOParamsWritable,\\n    PeriodicPCOParamsInternal,\\n    ERC165Base\\n{\\n    // Component role\\n    bytes32 internal constant COMPONENT_ROLE =\\n        keccak256('PeriodicPCOParamsFacet.COMPONENT_ROLE');\\n\\n    /**\\n     * @notice Initialize params\\n     */\\n    function initializePCOParams(\\n        uint256 _licensePeriod,\\n        uint256 _initialPeriodStartTime,\\n        uint256 _perSecondFeeNumerator,\\n        uint256 _perSecondFeeDenominator\\n    ) external {\\n        require(\\n            _isInitialized() == false,\\n            'PeriodicPCOParamsFacet: already initialized'\\n        );\\n\\n        _setSupportsInterface(\\n            type(IPeriodicPCOParamsReadable).interfaceId,\\n            true\\n        );\\n        _initializeParams(\\n            _licensePeriod,\\n            _initialPeriodStartTime,\\n            _perSecondFeeNumerator,\\n            _perSecondFeeDenominator\\n        );\\n    }\\n\\n    /**\\n     * @notice Initialize params with owner\\n     */\\n    function initializePCOParams(\\n        address _owner,\\n        uint256 _licensePeriod,\\n        uint256 _initialPeriodStartTime,\\n        uint256 _perSecondFeeNumerator,\\n        uint256 _perSecondFeeDenominator\\n    ) external {\\n        require(\\n            _isInitialized() == false,\\n            'PeriodicPCOParamsFacet: already initialized'\\n        );\\n\\n        _setSupportsInterface(\\n            type(IPeriodicPCOParamsReadable).interfaceId,\\n            true\\n        );\\n        _setSupportsInterface(\\n            type(IPeriodicPCOParamsWritable).interfaceId,\\n            true\\n        );\\n        _grantRole(COMPONENT_ROLE, _owner);\\n        _initializeParams(\\n            _licensePeriod,\\n            _initialPeriodStartTime,\\n            _perSecondFeeNumerator,\\n            _perSecondFeeDenominator\\n        );\\n    }\\n\\n    /**\\n     * @notice Get initial period start time\\n     */\\n    function initialPeriodStartTime() external view returns (uint256) {\\n        return _initialPeriodStartTime();\\n    }\\n\\n    /**\\n     * @notice Get license period\\n     */\\n    function licensePeriod() external view returns (uint256) {\\n        return _licensePeriod();\\n    }\\n\\n    /**\\n     * @notice Set license period\\n     */\\n    function setLicensePeriod(\\n        uint256 _licensePeriod\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        return _setLicensePeriod(_licensePeriod);\\n    }\\n\\n    /**\\n     * @notice Get fee numerator\\n     */\\n    function perSecondFeeNumerator() external view returns (uint256) {\\n        return _perSecondFeeNumerator();\\n    }\\n\\n    /**\\n     * @notice Set fee numerator\\n     */\\n    function setPerSecondFeeNumerator(\\n        uint256 _perSecondFeeNumerator\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        return _setPerSecondFeeNumerator(_perSecondFeeNumerator);\\n    }\\n\\n    /**\\n     * @notice Get fee denominator\\n     */\\n    function perSecondFeeDenominator() external view returns (uint256) {\\n        return _perSecondFeeDenominator();\\n    }\\n\\n    /**\\n     * @notice Set fee denominator\\n     */\\n    function setPerSecondFeeDenominator(\\n        uint256 _perSecondFeeDenominator\\n    ) external onlyRole(COMPONENT_ROLE) {\\n        return _setPerSecondFeeDenominator(_perSecondFeeDenominator);\\n    }\\n}\\n\",\"keccak256\":\"0x673a248a83de67e1594c0ec6eb5dab6c93c009e4e355c064c016958a019c8bf3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b96806100206000396000f3fe608060405234801561001057600080fd5b506004361061009d5760003560e01c8063935cc61d11610066578063935cc61d1461011b578063a3cecf8314610123578063be6a2a6d14610136578063d8462a081461013e578063fd8e6f281461015157600080fd5b806279c6e9146100a257806301ffc9a7146100bd5780632ec133a4146100e05780634d73f0b4146100f5578063792f078414610108575b600080fd5b6100aa610159565b6040519081526020015b60405180910390f35b6100d06100cb3660046108d8565b610188565b60405190151581526020016100b4565b6100f36100ee366004610902565b6101cb565b005b6100f3610103366004610934565b610228565b6100f361011636600461094d565b61024d565b6100aa6102cc565b6100f3610131366004610934565b6102f6565b6100aa610317565b6100f361014c366004610934565b610341565b6100aa610362565b60006101837f47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c56115490565b905090565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b600080516020610b418339815191525460ff16156102045760405162461bcd60e51b81526004016101fb9061099d565b60405180910390fd5b61021663d0c145b160e01b600161038c565b61022284848484610402565b50505050565b600080516020610b2183398151915261024081610440565b6102498261044d565b5050565b600080516020610b418339815191525460ff161561027d5760405162461bcd60e51b81526004016101fb9061099d565b61028f63d0c145b160e01b600161038c565b6102a16336fb153f60e01b600161038c565b6102b9600080516020610b21833981519152866104b9565b6102c584848484610402565b5050505050565b60006101837f47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c56125490565b600080516020610b2183398151915261030e81610440565b6102498261052d565b60006101837f47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c56105490565b600080516020610b2183398151915261035981610440565b61024982610591565b60006101837f47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c560f5490565b6001600160e01b031980831690036103b75760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b600080516020610b41833981519152805460ff1916600117815561042585610591565b61042e846105f5565b6104378361052d565b6102c58261044d565b61044a8133610659565b50565b7f47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c5612819055604051818152600080516020610b41833981519152907f01b9ea3f7a1d4688b5da9708b485d7f3529bee8de42fe639995183fd40b7954f906020015b60405180910390a15050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604090206104f090826106bb565b5060405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b7f47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c5611819055604051818152600080516020610b41833981519152907f2fa607ba94fd16b8311e40fe6ec708f16b7c467d5502d052fa1407acbc620048906020016104ad565b7f47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c560f819055604051818152600080516020610b41833981519152907f0ce2592931633fe4bc7c7c6895d95c6fb449347b2efcd517494867fc97cde97a906020016104ad565b7f47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c5610819055604051818152600080516020610b41833981519152907f8250dc18fdc49ec02556ec27015b234378c1e068c9bd5840abe8590280b5489b906020016104ad565b61066382826106d7565b61024957610679816001600160a01b0316610730565b610684836020610742565b604051602001610695929190610a0c565b60408051601f198184030181529082905262461bcd60e51b82526101fb91600401610a81565b60006106d0836001600160a01b038416610895565b9392505050565b60006106d0827fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811600086815260209190915260409020906001600160a01b038116600090815260018301602052604081205415156106d0565b60606101c56001600160a01b03831660145b60606000610751836002610aca565b61075c906002610ae1565b67ffffffffffffffff81111561077457610774610af4565b6040519080825280601f01601f19166020018201604052801561079e576020820181803683370190505b509050600360fc1b816000815181106107b9576107b9610b0a565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106107e8576107e8610b0a565b60200101906001600160f81b031916908160001a905350600160028402015b6001811115610875576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061083857610838610b0a565b1a60f81b82828151811061084e5761084e610b0a565b60200101906001600160f81b031916908160001a90535060049490941c9360001901610807565b5083156106d05760405163c913478560e01b815260040160405180910390fd5b60008181526001830160205260408120546101c5575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b6000602082840312156108ea57600080fd5b81356001600160e01b0319811681146106d057600080fd5b6000806000806080858703121561091857600080fd5b5050823594602084013594506040840135936060013592509050565b60006020828403121561094657600080fd5b5035919050565b600080600080600060a0868803121561096557600080fd5b85356001600160a01b038116811461097c57600080fd5b97602087013597506040870135966060810135965060800135945092505050565b6020808252602b908201527f506572696f64696350434f506172616d7346616365743a20616c72656164792060408201526a1a5b9a5d1a585b1a5e995960aa1b606082015260800190565b60005b83811015610a035781810151838201526020016109eb565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610a448160178501602088016109e8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610a758160288401602088016109e8565b01602801949350505050565b6020815260008251806020840152610aa08160408501602087016109e8565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176101c5576101c5610ab4565b808201808211156101c5576101c5610ab4565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfe88fc2152b07410bc90f2d48e8a618d99441277e94c993622cc9da79b67bc6f4d47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c560ea2646970667358221220f0aec15bb2db4d8be29c8d9ddb804281c70d3a5a8c3c1ba2ebcf9761e49456eb64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009d5760003560e01c8063935cc61d11610066578063935cc61d1461011b578063a3cecf8314610123578063be6a2a6d14610136578063d8462a081461013e578063fd8e6f281461015157600080fd5b806279c6e9146100a257806301ffc9a7146100bd5780632ec133a4146100e05780634d73f0b4146100f5578063792f078414610108575b600080fd5b6100aa610159565b6040519081526020015b60405180910390f35b6100d06100cb3660046108d8565b610188565b60405190151581526020016100b4565b6100f36100ee366004610902565b6101cb565b005b6100f3610103366004610934565b610228565b6100f361011636600461094d565b61024d565b6100aa6102cc565b6100f3610131366004610934565b6102f6565b6100aa610317565b6100f361014c366004610934565b610341565b6100aa610362565b60006101837f47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c56115490565b905090565b6001600160e01b0319811660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d8602052604081205460ff165b92915050565b600080516020610b418339815191525460ff16156102045760405162461bcd60e51b81526004016101fb9061099d565b60405180910390fd5b61021663d0c145b160e01b600161038c565b61022284848484610402565b50505050565b600080516020610b2183398151915261024081610440565b6102498261044d565b5050565b600080516020610b418339815191525460ff161561027d5760405162461bcd60e51b81526004016101fb9061099d565b61028f63d0c145b160e01b600161038c565b6102a16336fb153f60e01b600161038c565b6102b9600080516020610b21833981519152866104b9565b6102c584848484610402565b5050505050565b60006101837f47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c56125490565b600080516020610b2183398151915261030e81610440565b6102498261052d565b60006101837f47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c56105490565b600080516020610b2183398151915261035981610440565b61024982610591565b60006101837f47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c560f5490565b6001600160e01b031980831690036103b75760405163b0a19dd560e01b815260040160405180910390fd5b6001600160e01b03199190911660009081527ffc606c433378e3a7e0a6a531deac289b66caa1b4aa8554fd4ab2c6f1570f92d860205260409020805460ff1916911515919091179055565b600080516020610b41833981519152805460ff1916600117815561042585610591565b61042e846105f5565b6104378361052d565b6102c58261044d565b61044a8133610659565b50565b7f47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c5612819055604051818152600080516020610b41833981519152907f01b9ea3f7a1d4688b5da9708b485d7f3529bee8de42fe639995183fd40b7954f906020015b60405180910390a15050565b60008281527fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811602052604090206104f090826106bb565b5060405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b7f47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c5611819055604051818152600080516020610b41833981519152907f2fa607ba94fd16b8311e40fe6ec708f16b7c467d5502d052fa1407acbc620048906020016104ad565b7f47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c560f819055604051818152600080516020610b41833981519152907f0ce2592931633fe4bc7c7c6895d95c6fb449347b2efcd517494867fc97cde97a906020016104ad565b7f47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c5610819055604051818152600080516020610b41833981519152907f8250dc18fdc49ec02556ec27015b234378c1e068c9bd5840abe8590280b5489b906020016104ad565b61066382826106d7565b61024957610679816001600160a01b0316610730565b610684836020610742565b604051602001610695929190610a0c565b60408051601f198184030181529082905262461bcd60e51b82526101fb91600401610a81565b60006106d0836001600160a01b038416610895565b9392505050565b60006106d0827fd3889cc5458b268d0544e5534672df1296288ca3f93cbd39bd6f497a5c622811600086815260209190915260409020906001600160a01b038116600090815260018301602052604081205415156106d0565b60606101c56001600160a01b03831660145b60606000610751836002610aca565b61075c906002610ae1565b67ffffffffffffffff81111561077457610774610af4565b6040519080825280601f01601f19166020018201604052801561079e576020820181803683370190505b509050600360fc1b816000815181106107b9576107b9610b0a565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106107e8576107e8610b0a565b60200101906001600160f81b031916908160001a905350600160028402015b6001811115610875576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061083857610838610b0a565b1a60f81b82828151811061084e5761084e610b0a565b60200101906001600160f81b031916908160001a90535060049490941c9360001901610807565b5083156106d05760405163c913478560e01b815260040160405180910390fd5b60008181526001830160205260408120546101c5575081546001808201845560008481526020808220909301849055845493815293810190915260409092205590565b6000602082840312156108ea57600080fd5b81356001600160e01b0319811681146106d057600080fd5b6000806000806080858703121561091857600080fd5b5050823594602084013594506040840135936060013592509050565b60006020828403121561094657600080fd5b5035919050565b600080600080600060a0868803121561096557600080fd5b85356001600160a01b038116811461097c57600080fd5b97602087013597506040870135966060810135965060800135945092505050565b6020808252602b908201527f506572696f64696350434f506172616d7346616365743a20616c72656164792060408201526a1a5b9a5d1a585b1a5e995960aa1b606082015260800190565b60005b83811015610a035781810151838201526020016109eb565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610a448160178501602088016109e8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610a758160288401602088016109e8565b01602801949350505050565b6020815260008251806020840152610aa08160408501602087016109e8565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176101c5576101c5610ab4565b808201808211156101c5576101c5610ab4565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfe88fc2152b07410bc90f2d48e8a618d99441277e94c993622cc9da79b67bc6f4d47e38df96560ed74ceeb040528c687d6746edaa830d5a94a1d86a43df37c560ea2646970667358221220f0aec15bb2db4d8be29c8d9ddb804281c70d3a5a8c3c1ba2ebcf9761e49456eb64736f6c63430008110033",
  "devdoc": {
    "details": "Params store for periodic PCO",
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      }
    },
    "title": "PeriodicPCOParamsFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialPeriodStartTime()": {
        "notice": "Get initial period start time"
      },
      "initializePCOParams(address,uint256,uint256,uint256,uint256)": {
        "notice": "Initialize params with owner"
      },
      "initializePCOParams(uint256,uint256,uint256,uint256)": {
        "notice": "Initialize params"
      },
      "licensePeriod()": {
        "notice": "Get license period"
      },
      "perSecondFeeDenominator()": {
        "notice": "Get fee denominator"
      },
      "perSecondFeeNumerator()": {
        "notice": "Get fee numerator"
      },
      "setLicensePeriod(uint256)": {
        "notice": "Set license period"
      },
      "setPerSecondFeeDenominator(uint256)": {
        "notice": "Set fee denominator"
      },
      "setPerSecondFeeNumerator(uint256)": {
        "notice": "Set fee numerator"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
